// HANDSHAKE: 0,
// MOVEMENT_UPDATE: 1,
// ANGLE_UPDATE: 2,
// LEFT_FROM_SESSION: 3,
// START_ATTACK: 4,
// STOP_ATTACK: 5,
// ITEM_ACTION: 6,
// CRAFT_ACTION: 7,
// BOUND_PACKET: 8,
// DROP_ITEM: 9,
// BUILD_REQUEST: 10,
// CONSOLE_COMMAND: 11,
// STORAGE_INTERACT: 12,
// BREAD_MARKET_INTERACTION: 13,
// CHAT_MESSAGE: 14,
// AUTO_FEED: 15,
// TOTEM_ACTION: 16
(() => {
    var e = {
            396() {
                Number.prototype.map = function(e, t, i, s) {
                    return (this - e) * (s - i) / (t - e) + i
                }
            },
            41() {
                Promise.create = function() {
                    let e = new Promise((e, t) => {
                        this.temp_resolve = e, this.temp_reject = t
                    });
                    return e.resolve = this.temp_resolve, e.reject = this.temp_reject, delete this.temp_resolve, delete this.temp_reject, e
                }, Promise.catchAll = function(e) {
                    return Promise.all(e.map(e => e.catch(e => {
                        Promise.reject(e)
                    })))
                }
            },
            305() {
                window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame
            }
        },
        t = {};

    function i(s) {
        var a = t[s];
        if (void 0 !== a) return a.exports;
        var r = t[s] = {
            exports: {}
        };
        return e[s](r, r.exports, i), r.exports
    }(() => {
        "use strict";
        let e = {
                DAY: "/img/Player/Day/default_head.png",
                NIGHT: "/img/Player/Night/default_head.png"
            },
            t = {
                ID: 0
            };
        t.URL = e;
        let s = {};
        s.PLAYER_BODY = t, s.PLAYER_LEFT_HAND = {
            ID: 1,
            URL: {
                DAY: "/img/Player/Day/default_left_arm.png",
                NIGHT: "/img/Player/Night/default_left_arm.png"
            }
        }, s.PLAYER_RIGHT_HAND = {
            ID: 2,
            URL: {
                DAY: "/img/Player/Day/default_right_arm.png",
                NIGHT: "/img/Player/Night/default_left_arm.png"
            }
        }, s.PLAYER_STEP = {
            ID: 3,
            URL: {
                DAY: "/img/Player/Day/step_player.png",
                NIGHT: "/img/Player/Day/step_player.png"
            }
        }, s.TREE0 = {
            ID: 4,
            URL: {
                DAY: "/img/Resources/Day/t1.png",
                NIGHT: "/img/Resources/Night/t1.png"
            }
        }, s.TREE1 = {
            ID: 5,
            URL: {
                DAY: "/img/Resources/Day/t2.png",
                NIGHT: "/img/Resources/Night/t2.png"
            }
        }, s.TREE2 = {
            ID: 6,
            URL: {
                DAY: "/img/Resources/Day/t3.png",
                NIGHT: "/img/Resources/Night/t3.png"
            }
        }, s.TREE3 = {
            ID: 7,
            URL: {
                DAY: "/img/Resources/Day/t4.png",
                NIGHT: "/img/Resources/Night/t4.png"
            }
        }, s.TREE4 = {
            ID: 8,
            URL: {
                DAY: "/img/Resources/Day/t5.png",
                NIGHT: "/img/Resources/Night/t5.png"
            }
        }, s.TREE5 = {
            ID: 9,
            URL: {
                DAY: "/img/Resources/Day/t6.png",
                NIGHT: "/img/Resources/Night/t6.png"
            }
        }, s.TREE6 = {
            ID: 10,
            URL: {
                DAY: "/img/Resources/Day/t7.png",
                NIGHT: "/img/Resources/Night/t7.png"
            }
        }, s.TREE7 = {
            ID: 11,
            URL: {
                DAY: "/img/Resources/Day/t8.png",
                NIGHT: "/img/Resources/Night/t8.png"
            }
        }, s.TREE8 = {
            ID: 12,
            URL: {
                DAY: "/img/Resources/Day/t9.png",
                NIGHT: "/img/Resources/Night/t9.png"
            }
        }, s.TREE9 = {
            ID: 13,
            URL: {
                DAY: "/img/Resources/Day/t10.png",
                NIGHT: "/img/Resources/Night/t10.png"
            }
        }, s.TREE10 = {
            ID: 14,
            URL: {
                DAY: "/img/Resources/Day/t11.png",
                NIGHT: "/img/Resources/Night/t11.png"
            }
        }, s.TREE11 = {
            ID: 15,
            URL: {
                DAY: "/img/Resources/Day/t12.png",
                NIGHT: "/img/Resources/Night/t12.png"
            }
        }, s.STONE0 = {
            ID: 16,
            URL: {
                DAY: "/img/Resources/Day/s1.png",
                NIGHT: "/img/Resources/Night/s1.png"
            }
        }, s.STONE1 = {
            ID: 17,
            URL: {
                DAY: "/img/Resources/Day/s2.png",
                NIGHT: "/img/Resources/Night/s2.png"
            }
        }, s.STONE2 = {
            ID: 18,
            URL: {
                DAY: "/img/Resources/Day/s3.png",
                NIGHT: "/img/Resources/Night/s3.png"
            }
        }, s.FLOWER1 = {
            ID: 19,
            URL: {
                DAY: "/img/decorations/flower1.png",
                NIGHT: "/img/decorations/flower1.png"
            }
        }, s.FLOWER2 = {
            ID: 20,
            URL: {
                DAY: "/img/decorations/flower2.png",
                NIGHT: "/img/decorations/flower2.png"
            }
        }, s.FLOWER3 = {
            ID: 21,
            URL: {
                DAY: "/img/decorations/flower3.png",
                NIGHT: "/img/decorations/flower3.png"
            }
        }, s.FLOWER4 = {
            ID: 22,
            URL: {
                DAY: "/img/decorations/flower4.png",
                NIGHT: "/img/decorations/flower4.png"
            }
        }, s.FLOWER5 = {
            ID: 23,
            URL: {
                DAY: "/img/decorations/flower5.png",
                NIGHT: "/img/decorations/flower5.png"
            }
        }, s.FLOWER6 = {
            ID: 24,
            URL: {
                DAY: "/img/decorations/flower6.png",
                NIGHT: "/img/decorations/flower6.png"
            }
        }, s.FLOWER7 = {
            ID: 25,
            URL: {
                DAY: "/img/decorations/flower7.png",
                NIGHT: "/img/decorations/flower7.png"
            }
        }, s.FLOWER8 = {
            ID: 26,
            URL: {
                DAY: "/img/decorations/flower8.png",
                NIGHT: "/img/decorations/flower8.png"
            }
        }, s.GRASS1 = {
            ID: 27,
            URL: {
                DAY: "/img/decorations/grass1.png",
                NIGHT: "/img/decorations/grass1.png"
            }
        }, s.GRASS2 = {
            ID: 27,
            URL: {
                DAY: "/img/decorations/grass2.png",
                NIGHT: "/img/decorations/grass2.png"
            }
        }, s.GRASS3 = {
            ID: 28,
            URL: {
                DAY: "/img/decorations/grass3.png",
                NIGHT: "/img/decorations/grass3.png"
            }
        }, s.GRASS4 = {
            ID: 29,
            URL: {
                DAY: "/img/decorations/grass4.png",
                NIGHT: "/img/decorations/grass4.png"
            }
        }, s.GRASS5 = {
            ID: 30,
            URL: {
                DAY: "/img/decorations/grass5.png",
                NIGHT: "/img/decorations/grass5.png"
            }
        }, s.GRASS6 = {
            ID: 31,
            URL: {
                DAY: "/img/decorations/grass6.png",
                NIGHT: "/img/decorations/grass6.png"
            }
        }, s.SMALL_BUSH1 = {
            ID: 32,
            URL: {
                DAY: "/img/decorations/small_bush.png",
                NIGHT: "/img/decorations/small_bush.png"
            }
        }, s.WOLF = {
            ID: 222,
            URL: {
                DAY: "/img/Mobs/mob.png",
                NIGHT: "/img/Mobs/mob.png"
            }
        }, s.WOLF_HURT = {
            ID: 223,
            URL: {
                DAY: "/img/Mobs/wolf_hurt.png",
                NIGHT: ""
            }
        }, s.RABBIT = {
            ID: 224,
            URL: {
                DAY: "/img/Mobs/rabbit.png",
                NIGHT: ""
            }
        }, s.RABBIT_HURT = {
            ID: 225,
            URL: {
                DAY: "/img/Mobs/rabbit_hurt.png",
                NIGHT: ""
            }
        }, s.SPIDER = {
            ID: 226,
            URL: {
                DAY: "/img/Mobs/spider.png",
                NIGHT: ""
            }
        }, s.SPIDER_HURT = {
            ID: 227,
            URL: {
                DAY: "/img/Mobs/spider_hurt.png",
                NIGHT: ""
            }
        }, s.SPIDER_WEB = {
            ID: 228,
            URL: {
                DAY: "/img/Mobs/spider_web.png",
                NIGHT: ""
            }
        }, s.BAR_COLD = {
            ID: 1223,
            URL: {
                DAY: "/img/ui/cold_bar.png",
                NIGHT: ""
            }
        }, s.BAR_FEED = {
            ID: 1224,
            URL: {
                DAY: "/img/ui/food_bar.png",
                NIGHT: ""
            }
        }, s.BAR_HEALTH = {
            ID: 1225,
            URL: {
                DAY: "/img/ui/health_bar.png",
                NIGHT: ""
            }
        }, s.MINIMAP = {
            ID: 1226,
            URL: {
                DAY: "/img/ui/minimap.png",
                NIGHT: ""
            }
        }, s.PLANT_BERRY_SEED = {
            ID: 1227,
            URL: {
                DAY: "/img/buildings/plant_berry_seed.png",
                NIGHT: ""
            }
        }, s.PLANT_BERRY_BUSH = {
            ID: 1228,
            URL: {
                DAY: "/img/buildings/plant_berry.png",
                NIGHT: ""
            }
        }, s.BERRY_SMALL = {
            ID: 1229,
            URL: {
                DAY: "/img/buildings/berry.png",
                NIGHT: ""
            }
        }, s.PLANT_WHEAT_SEED = {
            ID: 1230,
            URL: {
                DAY: "/img/buildings/plant_wheat_seed.png",
                NIGHT: ""
            }
        }, s.PLANT_WHEAT = {
            ID: 1231,
            URL: {
                DAY: "/img/buildings/plant_wheat.png",
                NIGHT: ""
            }
        }, s.DROP_BOX = {
            ID: 1232,
            URL: {
                DAY: "/img/entity/box.png",
                NIGHT: ""
            }
        }, s.WOOD_PICKAXE = {
            ID: 1233,
            URL: {
                DAY: "/img/items/pickaxe_wood.png",
                NIGHT: ""
            }
        }, s.STONE_PICKAXE = {
            ID: 1234,
            URL: {
                DAY: "/img/items/pickaxe_stone.png",
                NIGHT: ""
            }
        }, s.GOLD_PICKAXE = {
            ID: 1235,
            URL: {
                DAY: "/img/items/pickaxe_gold.png",
                NIGHT: ""
            }
        }, s.DIAMOND_PICKAXE = {
            ID: 1236,
            URL: {
                DAY: "/img/items/pickaxe_diamond.png",
                NIGHT: ""
            }
        }, s.AMETHYST_PICKAXE = {
            ID: 1237,
            URL: {
                DAY: "/img/items/pickaxe_amethyst.png",
                NIGHT: ""
            }
        }, s.WOOD_SWORD = {
            ID: 1238,
            URL: {
                DAY: "/img/items/sword_wood.png",
                NIGHT: ""
            }
        }, s.STONE_SWORD = {
            ID: 1239,
            URL: {
                DAY: "/img/items/sword_stone.png",
                NIGHT: ""
            }
        }, s.GOLD_SWORD = {
            ID: 1240,
            URL: {
                DAY: "/img/items/sword_gold.png",
                NIGHT: ""
            }
        }, s.DIAMOND_SWORD = {
            ID: 1241,
            URL: {
                DAY: "/img/items/sword_diamond.png",
                NIGHT: ""
            }
        }, s.AMETHYST_SWORD = {
            ID: 1242,
            URL: {
                DAY: "/img/items/sword_amethyst.png",
                NIGHT: ""
            }
        }, s.WOOD_SPEAR = {
            ID: 1243,
            URL: {
                DAY: "/img/items/spear_wood.png",
                NIGHT: ""
            }
        }, s.STONE_SPEAR = {
            ID: 1244,
            URL: {
                DAY: "/img/items/spear_stone.png",
                NIGHT: ""
            }
        }, s.GOLD_SPEAR = {
            ID: 1245,
            URL: {
                DAY: "/img/items/spear_gold.png",
                NIGHT: ""
            }
        }, s.DIAMOND_SPEAR = {
            ID: 1246,
            URL: {
                DAY: "/img/items/spear_diamond.png",
                NIGHT: ""
            }
        }, s.AMETHYST_SPEAR = {
            ID: 1247,
            URL: {
                DAY: "/img/items/spear_amethyst.png",
                NIGHT: ""
            }
        }, s.STONE_HAMMER = {
            ID: 1248,
            URL: {
                DAY: "/img/items/hammer_stone.png",
                NIGHT: ""
            }
        }, s.GOLD_HAMMER = {
            ID: 1249,
            URL: {
                DAY: "/img/items/hammer_gold.png",
                NIGHT: ""
            }
        }, s.DIAMOND_HAMMER = {
            ID: 1250,
            URL: {
                DAY: "/img/items/hammer_diamond.png",
                NIGHT: ""
            }
        }, s.AMETHYST_HAMMER = {
            ID: 1251,
            URL: {
                DAY: "/img/items/hammer_amethyst.png",
                NIGHT: ""
            }
        }, s.WOOD_HELMET = {
            ID: 1252,
            URL: {
                DAY: "/img/items/helmet_wood.png",
                NIGHT: ""
            }
        }, s.STONE_HELMET = {
            ID: 1253,
            URL: {
                DAY: "/img/items/helmet_stone.png",
                NIGHT: ""
            }
        }, s.GOLD_HELMET = {
            ID: 1254,
            URL: {
                DAY: "/img/items/helmet_gold.png",
                NIGHT: ""
            }
        }, s.DIAMOND_HELMET = {
            ID: 1255,
            URL: {
                DAY: "/img/items/helmet_diamond.png",
                NIGHT: ""
            }
        }, s.AMETHYST_HELMET = {
            ID: 1256,
            URL: {
                DAY: "/img/items/helmet_amethyst.png",
                NIGHT: ""
            }
        }, s.FIRECAMP_STICKS = {
            ID: 1257,
            URL: {
                DAY: "/img/buildings/fire/firepit_wood.png",
                NIGHT: ""
            }
        }, s.FIRECAMP_TOP = {
            ID: 1258,
            URL: {
                DAY: "/img/buildings/fire/firepit_top.png",
                NIGHT: ""
            }
        }, s.FIRECAMP_GLOW1 = {
            ID: 1259,
            URL: {
                DAY: "/img/buildings/fire/firepit_glow1.png",
                NIGHT: ""
            }
        }, s.FIRECAMP_GLOW2 = {
            ID: 1260,
            URL: {
                DAY: "/img/buildings/fire/firepit_glow2.png",
                NIGHT: ""
            }
        }, s.FIRECAMP_GLOW3 = {
            ID: 1261,
            URL: {
                DAY: "/img/buildings/fire/firepit_glow3.png",
                NIGHT: ""
            }
        }, s.WALL_WOOD = {
            ID: 1262,
            URL: {
                DAY: "/img/buildings/wall_wood.png",
                NIGHT: ""
            }
        }, s.WALL_STONE = {
            ID: 1263,
            URL: {
                DAY: "/img/buildings/wall_stone.png",
                NIGHT: ""
            }
        }, s.WALL_GOLD = {
            ID: 1264,
            URL: {
                DAY: "/img/buildings/wall_gold.png",
                NIGHT: ""
            }
        }, s.WALL_DIAMOND = {
            ID: 1265,
            URL: {
                DAY: "/img/buildings/wall_diamond.png",
                NIGHT: ""
            }
        }, s.WALL_AMETHYST = {
            ID: 1266,
            URL: {
                DAY: "/img/buildings/wall_amethyst.png",
                NIGHT: ""
            }
        }, s.DOOR_WOOD = {
            ID: 1267,
            URL: {
                DAY: "/img/buildings/door_wood.png",
                NIGHT: ""
            }
        }, s.DOOR_STONE = {
            ID: 1268,
            URL: {
                DAY: "/img/buildings/door_stone.png",
                NIGHT: ""
            }
        }, s.DOOR_GOLD = {
            ID: 1269,
            URL: {
                DAY: "/img/buildings/door_gold.png",
                NIGHT: ""
            }
        }, s.DOOR_DIAMOND = {
            ID: 1270,
            URL: {
                DAY: "/img/buildings/door_diamond.png",
                NIGHT: ""
            }
        }, s.DOOR_AMETHYST = {
            ID: 1271,
            URL: {
                DAY: "/img/buildings/door_amethyst.png",
                NIGHT: ""
            }
        }, s.SPIKE_WOOD = {
            ID: 1272,
            URL: {
                DAY: "/img/buildings/spike_wood.png",
                NIGHT: ""
            }
        }, s.SPIKE_STONE = {
            ID: 1273,
            URL: {
                DAY: "/img/buildings/spike_stone.png",
                NIGHT: ""
            }
        }, s.SPIKE_GOLD = {
            ID: 1274,
            URL: {
                DAY: "/img/buildings/spike_gold.png",
                NIGHT: ""
            }
        }, s.SPIKE_DIAMOND = {
            ID: 1275,
            URL: {
                DAY: "/img/buildings/spike_diamond.png",
                NIGHT: ""
            }
        }, s.SPIKE_AMETHYST = {
            ID: 1276,
            URL: {
                DAY: "/img/buildings/spike_amethyst.png",
                NIGHT: ""
            }
        }, s.SPIKE_DOOR_WOOD = {
            ID: 1277,
            URL: {
                DAY: "/img/buildings/door_spike_wood.png",
                NIGHT: ""
            }
        }, s.SPIKE_DOOR_STONE = {
            ID: 1278,
            URL: {
                DAY: "/img/buildings/door_spike_stone.png",
                NIGHT: ""
            }
        }, s.SPIKE_DOOR_GOLD = {
            ID: 1279,
            URL: {
                DAY: "/img/buildings/door_spike_gold.png",
                NIGHT: ""
            }
        }, s.SPIKE_DOOR_DIAMOND = {
            ID: 1280,
            URL: {
                DAY: "/img/buildings/door_spike_diamond.png",
                NIGHT: ""
            }
        }, s.SPIKE_DOOR_AMETHYST = {
            ID: 1281,
            URL: {
                DAY: "/img/buildings/door_spike_amethyst.png",
                NIGHT: ""
            }
        }, s.GOLD0 = {
            ID: 1282,
            URL: {
                DAY: "/img/Resources/Day/g1.png",
                NIGHT: "/img/Resources/Night/g1.png"
            }
        }, s.GOLD1 = {
            ID: 1283,
            URL: {
                DAY: "/img/Resources/Day/g2.png",
                NIGHT: "/img/Resources/Night/g2.png"
            }
        }, s.GOLD2 = {
            ID: 1284,
            URL: {
                DAY: "/img/Resources/Day/g3.png",
                NIGHT: "/img/Resources/Night/g3.png"
            }
        }, s.DIAMOND0 = {
            ID: 1285,
            URL: {
                DAY: "/img/Resources/Day/d1.png",
                NIGHT: "/img/Resources/Night/d1.png"
            }
        }, s.DIAMOND1 = {
            ID: 1286,
            URL: {
                DAY: "/img/Resources/Day/d2.png",
                NIGHT: "/img/Resources/Night/d2.png"
            }
        }, s.DIAMOND2 = {
            ID: 1287,
            URL: {
                DAY: "/img/Resources/Day/d3.png",
                NIGHT: "/img/Resources/Night/d3.png"
            }
        }, s.AMETHYST0 = {
            ID: 1288,
            URL: {
                DAY: "/img/Resources/Day/a1.png",
                NIGHT: "/img/Resources/Night/a1.png"
            }
        }, s.AMETHYST1 = {
            ID: 1289,
            URL: {
                DAY: "/img/Resources/Day/a2.png",
                NIGHT: "/img/Resources/Night/a2.png"
            }
        }, s.AMETHYST2 = {
            ID: 1290,
            URL: {
                DAY: "/img/Resources/Day/a3.png",
                NIGHT: "/img/Resources/Night/a3.png"
            }
        }, s.STONE_PITCHFORK = {
            ID: 1291,
            URL: {
                DAY: "/img/items/fork_stone.png",
                NIGHT: ""
            }
        }, s.COMPRESSOR_INACTIVE = {
            ID: 1295,
            URL: {
                DAY: "/img/buildings/compressor_inactive.png",
                NIGHT: ""
            }
        }, s.COMPRESSOR_ACTIVE = {
            ID: 1296,
            URL: {
                DAY: "/img/buildings/compressor_active.png",
                NIGHT: ""
            }
        }, s.WORKBENCH = {
            ID: 1297,
            URL: {
                DAY: "/img/buildings/workbench.png",
                NIGHT: ""
            }
        }, s.SIMPLE_ITEM_UI = {
            ID: 1298,
            URL: {
                DAY: "/img/items/icons/simple_item_ui.png",
                NIGHT: ""
            }
        }, s.INV_PLUS = {
            ID: 1299,
            URL: {
                DAY: "/img/items/icons/add_button.png",
                NIGHT: ""
            }
        }, s.WHEAT_SEED = {
            ID: 1300,
            URL: {
                DAY: "/img/buildings/plant_wheat_seed.png",
                NIGHT: ""
            }
        }, s.BERRY_SEED = {
            ID: 1301,
            URL: {
                DAY: "/img/buildings/plant_berry_seed.png",
                NIGHT: ""
            }
        }, s.BREAD_OVEN_INACTIVE = {
            ID: 1302,
            URL: {
                DAY: "/img/buildings/oven_not_active.png",
                NIGHT: ""
            }
        }, s.BREAD_OVEN_ACTIVE = {
            ID: 1303,
            URL: {
                DAY: "/img/buildings/oven_active.png",
                NIGHT: ""
            }
        }, s.TRIPLE_ITEM_UI = {
            ID: 1304,
            URL: {
                DAY: "/img/items/icons/triple_item_ui.png",
                NIGHT: ""
            }
        }, s.MINIMAP_WOOD = {
            ID: 1305,
            URL: {
                DAY: "/img/ui/minimap_wood.png",
                NIGHT: ""
            }
        }, s.MINIMAP_STONE = {
            ID: 1306,
            URL: {
                DAY: "/img/ui/minimap_stone.png",
                NIGHT: ""
            }
        }, s.MINIMAP_GOLD = {
            ID: 1307,
            URL: {
                DAY: "/img/ui/minimap_gold.png",
                NIGHT: ""
            }
        }, s.MINIMAP_DIAMOND = {
            ID: 1308,
            URL: {
                DAY: "/img/ui/minimap_diamond.png",
                NIGHT: ""
            }
        }, s.MINIMAP_AMETHYST = {
            ID: 1309,
            URL: {
                DAY: "/img/ui/minimap_amethyst.png",
                NIGHT: ""
            }
        }, s.MINIMAP_BERRY = {
            ID: 1310,
            URL: {
                DAY: "/img/ui/minimap_berry.png",
                NIGHT: ""
            }
        }, s.BOOK = {
            ID: 1311,
            URL: {
                DAY: "/img/items/book.png",
                NIGHT: ""
            }
        }, s.BERRY1 = {
            ID: 1312,
            URL: {
                DAY: "/img/Resources/Day/b1.png",
                NIGHT: "/img/Resources/Night/b1.png"
            }
        }, s.PLOT = {
            ID: 1313,
            URL: {
                DAY: "/img/buildings/plot.png"
            }
        }, s.WRENCH = {
            ID: 1314,
            URL: {
                DAY: "/img/items/wrench.png"
            }
        }, s.FURNACE_INACTIVE = {
            ID: 1315,
            URL: {
                DAY: "/img/buildings/furnace_inactive.png"
            }
        }, s.FURNACE_ACTIVE = {
            ID: 1316,
            URL: {
                DAY: "/img/buildings/furnace_active.png"
            }
        }, s.ONE_ITEM_UI = {
            ID: 1317,
            URL: {
                DAY: "/img/items/icons/one_item_ui.png",
                NIGHT: ""
            }
        }, s.UI_BREAD_SHOP = {
            ID: 1318,
            URL: {
                DAY: "/img/items/icons/ui_button_shop.png"
            }
        }, s.CHEST = {
            ID: 1319,
            URL: {
                DAY: "/img/buildings/chest.png"
            }
        }, s.BANDAGE_HEALS_UI = {
            ID: 1320,
            URL: {
                DAY: "/img/items/icons/ui_bands_left.png",
                NIGHT: ""
            }
        }, s.TOTEM = {
            ID: 1321,
            URL: {
                DAY: "/img/buildings/totem.png",
                NIGHT: ""
            }
        }, s.UI_TOTEM_AVAIBLE = {
            ID: 1322,
            URL: {
                DAY: "/img/ui/totem_avaible.png"
            }
        }, s.UI_TOTEM_UNAVAIBLE = {
            ID: 1323,
            URL: {
                DAY: "/img/ui/totem_not_avaible.png"
            }
        }, s.UI_TOTEM_PLAYER_ICO = {
            ID: 1324,
            URL: {
                DAY: "/img/ui/isTotem.png"
            }
        }, s.UI_TOTEM_LEADER_ICO = {
            ID: 1325,
            URL: {
                DAY: "/img/ui/totem_leader.png"
            }
        }, s.WARM_HELMET1 = {
            ID: 1326,
            URL: {
                DAY: "/img/items/hat1.png",
                NIGHT: ""
            }
        }, s.WARM_HELMET2 = {
            ID: 1327,
            URL: {
                DAY: "/img/items/hat2.png",
                NIGHT: ""
            }
        };
        let a = s;
        let Settings;
        class r {
            constructor(e, t, i, s, a, r) {
                this.o = e, this.v = t, this.min = s, this.max = i, this.min_speed = r, this.max_speed = a
            }
            update(e) {
                if (this.v < this.min && (this.v = this.min), this.v > this.max && (this.v = this.max), this.o) {
                    var t = this.v + e * this.max_speed;
                    if (t > this.max) return this.v = this.max, this.o = !1, !0;
                    this.v = t
                } else(t = this.v - e * this.min_speed) < this.min ? (this.v = this.min, this.o = !0) : this.v = t
            }
        }
        let n = 2 * Math.PI;

        function o(e, t, i) {
            var s;
            return e + (2 * (s = (t - e) % n) % n - s) * i
        }
        let l = {
                fromId: e => Object.values(l).find(t => t.Id == e),
                AIR: {
                    Id: 0,
                    name: "AIR",
                    description: "It's just a AIR"
                },
                WOOD: {
                    Id: 1,
                    name: "Wood",
                    description: "Common resource, can be used to craft your first sword or maybe a pickaxe?",
                    author: "Helpy"
                },
                STONE: {
                    Id: 2,
                    name: "Stone",
                    description: "Yup, just a rock",
                    author: "Helpy"
                },
                GOLD: {
                    Id: 3,
                    name: "Gold",
                    description: "Shinyyy!",
                    author: "Helpy"
                },
                DIAMOND: {
                    Id: 4,
                    name: "Diamond",
                    description: "Found in The deepest cave of famish world",
                    author: "Shiroś"
                },
                FIRE: {
                    Id: 5,
                    name: "Fire",
                    description: "Keeps you warm!",
                    author: "Phoenix",
                    is_building: !0,
                    objectSpriteId: a.FIRECAMP_STICKS.ID,
                    offset_angle: .307,
                    size_offset: .575
                },
                RAW_MEAT: {
                    Id: 6,
                    name: "Raw Meat",
                    description: "Try using it on campfire",
                    author: " "
                },
                COOKED_MEAT: {
                    Id: 7,
                    name: "Cooked Meat",
                    description: "Delicious steak!",
                    author: ""
                },
                BONE: {
                    Id: 8,
                    name: "Bone",
                    description: "Who did you kill for this bone?",
                    author: ""
                },
                WOLF_FUR: {
                    Id: 9,
                    name: "Wolf Fur",
                    description: "Wolfs aren't cute",
                    author: ""
                },
                RABBIT_FUR: {
                    Id: 10,
                    name: "Rabbit Fur",
                    description: "Might be used to craft hat",
                    author: ""
                },
                CORD: {
                    Id: 11,
                    name: "Cord",
                    description: "Uhh its so sticky.",
                    author: ""
                },
                BERRY: {
                    Id: 12,
                    name: "Berry",
                    description: "Sweet!",
                    author: ""
                },
                WHEAT: {
                    Id: 13,
                    name: "Wheat",
                    description: "Can be useful",
                    author: ""
                },
                WOOD_PICKAXE: {
                    Id: 14,
                    name: "Wooden Pickaxe",
                    description: "It will mine something",
                    author: "",
                    objectSpriteId: a.WOOD_PICKAXE.ID
                },
                STONE_PICKAXE: {
                    Id: 15,
                    name: "Stone Pickaxe",
                    description: "Upgrade!",
                    author: "EvelTeam ~",
                    objectSpriteId: a.STONE_PICKAXE.ID
                },
                GOLD_PICKAXE: {
                    Id: 16,
                    name: "Gold Pickaxe",
                    description: "You have envious people",
                    author: "",
                    objectSpriteId: a.GOLD_PICKAXE.ID
                },
                DIAMOND_PICKAXE: {
                    Id: 17,
                    name: "Diamond Pickaxe",
                    description: "This was hard..",
                    author: "",
                    objectSpriteId: a.DIAMOND_PICKAXE.ID
                },
                AMETHYST_PICKAXE: {
                    Id: 18,
                    name: "Amethyst Pickaxe",
                    description: "Resource King",
                    author: "",
                    objectSpriteId: a.AMETHYST_PICKAXE.ID
                },
                WOOD_SWORD: {
                    Id: 19,
                    name: "Wooden Sword",
                    description: "Tickles, no more!",
                    author: "",
                    objectSpriteId: a.WOOD_SWORD.ID
                },
                STONE_SWORD: {
                    Id: 20,
                    name: "Stone Sword",
                    description: "More serious tool",
                    author: "",
                    objectSpriteId: a.STONE_SWORD.ID
                },
                GOLD_SWORD: {
                    Id: 21,
                    name: "Golden Sword",
                    description: "King of the forest!",
                    author: "",
                    objectSpriteId: a.GOLD_SWORD.ID
                },
                DIAMOND_SWORD: {
                    Id: 22,
                    name: "Diamond Sword",
                    description: "Killer",
                    author: "",
                    objectSpriteId: a.DIAMOND_SWORD.ID
                },
                AMETHYST_SWORD: {
                    Id: 23,
                    name: "Amethyst Sword",
                    description: "Legendary warrior!",
                    author: "",
                    objectSpriteId: a.AMETHYST_SWORD.ID
                },
                WOOD_SPEAR: {
                    Id: 24,
                    name: "Wooden Spear",
                    description: "Funny tool",
                    author: "",
                    objectSpriteId: a.WOOD_SPEAR.ID
                },
                STONE_SPEAR: {
                    Id: 25,
                    name: "Stone Spear",
                    description: "Сan only pierce paper",
                    author: "",
                    objectSpriteId: a.STONE_SPEAR.ID
                },
                GOLD_SPEAR: {
                    Id: 26,
                    name: "Golden Spear",
                    description: "Melee warrior",
                    author: "",
                    objectSpriteId: a.GOLD_SPEAR.ID
                },
                DIAMOND_SPEAR: {
                    Id: 27,
                    name: "Diamond Spear",
                    description: "Serious Warrior",
                    author: "",
                    objectSpriteId: a.DIAMOND_SPEAR.ID
                },
                AMETHYST_SPEAR: {
                    Id: 28,
                    name: "Amethyst Spear",
                    description: "Ohh.. Didn't expect this one to show up",
                    author: "",
                    objectSpriteId: a.AMETHYST_SPEAR.ID
                },
                WOOD_HELMET: {
                    Id: 29,
                    name: "Wooden Helmet",
                    description: "Why do you use crate as a helmet?",
                    author: "Helpy",
                    objectSpriteId: a.WOOD_HELMET.ID
                },
                STONE_HELMET: {
                    Id: 30,
                    name: "Stone Helmet",
                    description: "A real knight!",
                    author: "Helpy",
                    objectSpriteId: a.STONE_HELMET.ID
                },
                GOLD_HELMET: {
                    Id: 31,
                    name: "Golden Helmet",
                    description: "Used by the king of the forest",
                    author: "Helpy",
                    objectSpriteId: a.GOLD_HELMET.ID
                },
                DIAMOND_HELMET: {
                    Id: 32,
                    name: "Diamond Helmet",
                    description: "Swaggy!",
                    author: "Helpy",
                    objectSpriteId: a.DIAMOND_HELMET.ID
                },
                AMETHYST_HELMET: {
                    Id: 33,
                    name: "Amethyst Helmet",
                    description: "You conquered the winter!",
                    author: "Helpy",
                    objectSpriteId: a.AMETHYST_HELMET.ID
                },
                AMETHYST: {
                    Id: 34,
                    name: "Amethyst",
                    description: "Found in The deepest cave of famish world",
                    author: "Helpy"
                },
                STONE_HAMMER: {
                    Id: 35,
                    name: "Stone Hammer",
                    description: "It may be usefull not sure tho.",
                    author: "Helpy",
                    objectSpriteId: a.STONE_HAMMER.ID
                },
                GOLD_HAMMER: {
                    Id: 36,
                    name: "Golden Hammer",
                    description: "A bit better than Stone",
                    author: "Helpy",
                    objectSpriteId: a.GOLD_HAMMER.ID
                },
                DIAMOND_HAMMER: {
                    Id: 37,
                    name: "Diamond Hammer",
                    description: "You can raid a base now!",
                    author: "Helpy",
                    objectSpriteId: a.DIAMOND_HAMMER.ID
                },
                AMETHYST_HAMMER: {
                    Id: 38,
                    name: "Amethyst Hammer",
                    description: "All scary of you",
                    author: "",
                    objectSpriteId: a.AMETHYST_HAMMER.ID
                },
                WRENCH: {
                    Id: 39,
                    name: "Wrench",
                    description: "Fixing buildings should be easy now!",
                    author: "",
                    objectSpriteId: a.WRENCH.ID
                },
                WALL_WOOD: {
                    Id: 40,
                    name: "Wooden Wall",
                    description: "Yea, Just a wall",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.WALL_WOOD.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 1e3
                },
                WALL_STONE: {
                    Id: 41,
                    name: "Stone Wall",
                    description: "Way better than Wood. You can now protect something",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.WALL_STONE.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 1500
                },
                WALL_GOLD: {
                    Id: 42,
                    name: "Gold Wall",
                    description: "Best one that you can make in the forest!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.WALL_GOLD.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 2e3
                },
                WALL_DIAMOND: {
                    Id: 43,
                    name: "Diamond Wall",
                    description: "We are getting there!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.WALL_DIAMOND.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 2500
                },
                WALL_AMETHYST: {
                    Id: 44,
                    name: "Amethyst Wall",
                    description: "The sturdiest of all...",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.WALL_AMETHYST.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 3500
                },
                SPIKE_WOOD: {
                    Id: 45,
                    name: "Wooden Spike",
                    description: "A ball with spikes",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.SPIKE_WOOD.ID,
                    offset_angle: .307,
                    size_offset: 1.4,
                    max_health: 750
                },
                SPIKE_STONE: {
                    Id: 46,
                    name: "Stone Spike",
                    description: "Don't touch it. You will hurt yourself!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.SPIKE_STONE.ID,
                    offset_angle: .307,
                    size_offset: 1.4,
                    max_health: 1150
                },
                SPIKE_GOLD: {
                    Id: 47,
                    name: "Gold Spike",
                    description: "A big long... Spike",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.SPIKE_GOLD.ID,
                    offset_angle: .307,
                    size_offset: 1.4,
                    max_health: 1500
                },
                SPIKE_DIAMOND: {
                    Id: 48,
                    name: "Diamond Spike",
                    description: "You can cause serious trouble with this one!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.SPIKE_DIAMOND.ID,
                    offset_angle: .307,
                    size_offset: 1.4,
                    max_health: 2e3
                },
                SPIKE_AMETHYST: {
                    Id: 49,
                    name: "Amethyst Spike",
                    description: "Good with bases and running from those savages!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.SPIKE_AMETHYST.ID,
                    offset_angle: .307,
                    size_offset: 1.4,
                    max_health: 2750
                },
                DOOR_WOOD: {
                    Id: 50,
                    name: "Wooden Door",
                    description: "Huh. I don't think it will last a long",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.DOOR_WOOD.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 1e3
                },
                DOOR_STONE: {
                    Id: 51,
                    name: "Stone Door",
                    description: "Upgrade from Wood. A bit better",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.DOOR_STONE.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 1500
                },
                DOOR_GOLD: {
                    Id: 52,
                    name: "Gold Door",
                    description: "Now we are talking!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.DOOR_GOLD.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 2e3
                },
                DOOR_DIAMOND: {
                    Id: 53,
                    name: "Diamond Door",
                    description: "Very sturdy. Can make a great base!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.DOOR_DIAMOND.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 2500
                },
                DOOR_AMETHYST: {
                    Id: 54,
                    name: "Amethyst Door",
                    description: "The best off all. Raiders will be mad!",
                    author: "",
                    is_building: !0,
                    objectSpriteId: a.DOOR_AMETHYST.ID,
                    offset_angle: .307,
                    size_offset: 1.75,
                    max_health: 3500
                },
                STONE_PITCHFORK: {
                    Id: 55,
                    name: "Stone Pitchfork",
                    description: "",
                    author: "",
                    objectSpriteId: a.STONE_PITCHFORK.ID
                },
                COMPRESSOR: {
                    Id: 59,
                    name: "Compressor",
                    description: "",
                    author: "",
                    objectSpriteId: a.COMPRESSOR_INACTIVE.ID,
                    is_building: !0,
                    offset_angle: 0,
                    size_offset: .9
                },
                WORKBENCH: {
                    Id: 60,
                    name: "Workbench",
                    description: "",
                    author: "",
                    objectSpriteId: a.WORKBENCH.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .45
                },
                WHEAT_SEED: {
                    Id: 61,
                    name: "Wheat Seed",
                    description: "",
                    author: "",
                    objectSpriteId: a.WHEAT_SEED.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .725
                },
                BERRY_SEED: {
                    Id: 62,
                    name: "Berry Seed",
                    description: "",
                    author: "",
                    objectSpriteId: a.BERRY_SEED.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .725
                },
                FLOUR: {
                    Id: 63,
                    name: "Flour",
                    description: "Cook time?",
                    author: "EvelTeam ~"
                },
                BREAD: {
                    Id: 64,
                    name: "Bread",
                    description: "Impressive!",
                    author: "EvelTeam ~"
                },
                BREAD_OVEN: {
                    Id: 65,
                    name: "Bread Oven",
                    description: "",
                    author: "EvelTeam ~",
                    objectSpriteId: a.BREAD_OVEN_INACTIVE.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .225
                },
                BOOK: {
                    Id: 66,
                    name: "Book",
                    description: "",
                    author: "",
                    objectSpriteId: a.BOOK.ID
                },
                PLOT: {
                    Id: 67,
                    name: "Planting Plot",
                    description: "Useful for plantings",
                    author: "",
                    objectSpriteId: a.PLOT.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .85
                },
                FURNACE: {
                    Id: 68,
                    name: "Furnace",
                    description: "Very hot",
                    author: "EvelTeam ~",
                    objectSpriteId: a.FURNACE_INACTIVE.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .275
                },
                CHEST: {
                    Id: 69,
                    name: "Chest",
                    description: "now your resources are safe",
                    author: "EvelTeam ~",
                    objectSpriteId: a.CHEST.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: .35
                },
                BANDAGE: {
                    Id: 70,
                    name: "Bandage",
                    description: "Heals you, heal: 40",
                    author: "EvelTeam ~"
                },
                TOTEM: {
                    Id: 71,
                    name: "Totem",
                    description: "Your teammates will be safe",
                    author: "EvelTeam ~",
                    objectSpriteId: a.TOTEM.ID,
                    is_building: !0,
                    offset_angle: .5 * Math.PI,
                    size_offset: 1
                },
                WARM_HELMET1: {
                    Id: 72,
                    name: "hat 1",
                    description: "You are ready for the winter!",
                    author: "Helpy",
                    objectSpriteId: a.WARM_HELMET1.ID
                },
                WARM_HELMET2: {
                    Id: 73,
                    name: "hat 2",
                    description: "You are ready for the winter!",
                    author: "Helpy",
                    objectSpriteId: a.WARM_HELMET2.ID
                }
            },
            h = [
                [],
                [],
                [],
                [],
                []
            ],
            d = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
        class g {
            constructor() {}
            static clear_building_data() {
                Ne.buildingsManager.current_building = 0, Ne.buildingsManager.lastBuild = -1
            }
            static is_teammate(e) {
                return Ne.myPlayer.totem_data.players.find(t => t[0] == e)
            }
            static draw_color_behind() {
                ctx.globalCompositeOperation = "source-in", ctx.fillStyle = "#09f", ctx.fillRect(0, 0, e.width, e.height)
            }
            static get_image_effect(e, t, i) {
                var s = h[i][e];
                if (void 0 === s) {
                    var a = (s = document.createElement("canvas")).getContext("2d"),
                        r = t.width,
                        n = t.height;
                    s.width = r, s.height = n, a.drawImage(t, 0, 0), a.globalCompositeOperation = "source-in", a.fillStyle = d[i], a.fillRect(0, 0, r, n), h[i][e] = s
                }
                return s
            }
            static calculateAction(e, t, i, s, a, r, n, o, l) {
                let h = 0;
                return e && (h |= 512), t && (h |= 2), i && (h |= 4), s && (h |= 8), a && (h |= 16), r && (h |= 32), n && (h |= 64), o && (h |= 128), l && (h |= 256), h
            }
            static getNearest(e, t = []) {
                let i = {
                    dist: 9999999,
                    entity: null
                };
                for (let s = 0; s < t.length; s++) {
                    let a = t[s],
                        r = g.getDist(e.x, e.y, a.x, a.y);
                    i.dist > r && (i.dist = r, i.entity = a)
                }
                return i
            }
            static getNearestPlayer(e, t = []) {
                let i = {
                    dist: 9999999,
                    entity: null
                };
                for (let s = 0; s < t.length; s++) {
                    if(e.id == t[s].id) s++;
                    let a = t[s],
                        r = g.getDist(e.x, e.y, a.x, a.y);
                    i.dist > r && (i.dist = r, i.entity = a)
                }
                return i
            }
            static isInsidePlayerView(e, t) {
                return e.x > t.x && e.x < t.x + t.width && e.y < t.y + t.height && e.y > t.y
            }
            static isInside(e) {
                let t = Ne.mouse.evX,
                    i = Ne.mouse.evY;
                return t > e.x && t < e.x + e.width && i < e.y + e.height && i > e.y
            }
            static hitten(e) {
                let t = e[1],
                    i = e[2],
                    s = e[0];
                if (s < 0) {
                    let a = Ne.gameClient.world.objects.find(e => e.id == t);
                    a.hit.angle = i, a.hit.update = !0
                } else {
                    let r = g.getEntity(t, s);
                    r.hit.angle = i, r.hit.update = !0
                }
            }
            static random_min_max(e, t) {
                return e + Math.floor(Math.random() * t)
            }
            static reverseValue(e) {
                return -.5 * e
            }
            static getFakeWorld() {
                let e = 10 + Math.floor(10 * Math.random()),
                    t = [];
                for (let i = 0; i < e; i++) {
                    let s = i > .15 * e ? "TREE" : "STONE";
                    "STONE" == s && (s += g.random_min_max(0, 2)), "TREE" == s && (s += g.random_min_max(0, 11));
                    let a = .49 * g.random_min_max(-Ne.gameClient.render.canvas.width, 2 * Ne.gameClient.render.canvas.width),
                        r = .49 * g.random_min_max(-Ne.gameClient.render.canvas.height, 2 * Ne.gameClient.render.canvas.height);
                    t.push({
                        type: s,
                        x: a,
                        y: r,
                        size: g.random_min_max(0, 1)
                    })
                }
                return t
            }
            static disposeEntity(e, t) {
                let i = Ne.gameClient.entities[t];
                if (!i) return;
                let s = i.filter(t => t.id != e.id);
                Ne.gameClient.entities[t] = s
            }
            static getWeaponInfo(e) {
                return l.fromId(e)
            }
            static angleDifference(e, t) {
                let i = 2 * Math.PI,
                    s = (t - e) % i;
                return Math.abs(2 * s % i - s)
            }
            static wordSplit(e, {
                maxLength: t = 50,
                char: i = "\n",
                prepend: s = "",
                append: a = ""
            } = {}) {
                if (e.length <= t) return [e];
                let r = [e];
                if (Array.isArray(i))
                    for (; i.length > 0 && r.some(e => e.length > t);) {
                        let n = i.shift();
                        r = n instanceof RegExp ? r.flatMap(e => e.match(n)) : r.flatMap(e => e.split(n))
                    } else r = e.split(i);
                if (r.some(e => e.length > t)) throw RangeError("SPLIT_MAX_LEN");
                let o = [],
                    l = "";
                for (let h of r) l && (l + i + h + a).length > t && (o.push(l + a), l = s), l += (l && l !== s ? i : "") + h;
                return o.concat(l).filter(e => e)
            }
            static setCursor(e) {
                document.querySelector("body").style.cursor = e ? document.querySelector("body").style.cursor = "url(../img/cursor_pointer.png), none" : "url(../img/cursor_default.png), none"
            }
            static clear_team() {
                let e = document.getElementById("team_box");
                e.innerHTML = "", e.style.display = "none", Ne.myPlayer.totem_data = {
                    players: null,
                    leader: !1,
                    locked: 0,
                    entity: null
                }
            }
            static update_totem_ui() {
                let e = document.getElementById("team_box");
                if (Ne.myPlayer.totem_data.players.length <= 0) return e.style.display = "none";
                let t = g.getPlayerInfo(Ne.myPlayer.totem_data.players[0][0]);
                e.innerHTML = "", null != t && (e.innerHTML += '<div id="leader"><img src="./img/ui/totem_leader.png" style="width:25px;margin-right:5px;" ></img>' + t.name + "</div");
                for (let i = 1; i < Ne.myPlayer.totem_data.players.length; i++) {
                    let s = Ne.myPlayer.totem_data.players[i],
                        a = g.getPlayerInfo(s[0]);
                    a && (Ne.myPlayer.id == Ne.myPlayer.totem_data.players[0][0] ? e.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + a.name + '</div><div class="eject_member" id="eject_member' + i + '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>' : e.innerHTML += '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' + a.name + '</div><div class="eject_member" id="eject_member' + i)
                }
                if (Ne.myPlayer.id == Ne.myPlayer.totem_data.players[0][0]) {
                    1 == Ne.myPlayer.totem_data.locked ? e.innerHTML += '<div id="lock_team" style="display:inline-block;">LOCK</div></div>' : e.innerHTML += '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>', document.getElementById("lock_team").addEventListener("click", g.lock_update, !1);
                    for (let r = 1; r < Ne.myPlayer.totem_data.players.length; r++) document.getElementById("eject_member" + r).addEventListener("click", function() {
                        g.kick_teammate(r)
                    }, !1)
                } else e.innerHTML += '<div id="leave" style="display:inline-block;">LEAVE</div></div>', document.getElementById("leave").addEventListener("click", g.leave_team, !1);
                e.style.display = "inline-block"
            }
            static leave_team() {
                Ne.networkClient.sendJSON([16, 3])
            }
            static lock_update() {
                Ne.networkClient.sendJSON([16, 2])
            }
            static kick_teammate(e) {
                Ne.networkClient.sendJSON([16, 4, e])
            }
            static isPlayerExists(e) {
                return !!this.getPlayer(e)
            }
            static isEntityAppeared(e, t) {
                return !!this.getEntities(t).find(t => t.id == e)
            }
            static getEntity(e, t) {
                return this.getEntities(t).find(t => t.id == e)
            }
            static getPlayer(e) {
                return this.getEntities(0).find(t => t.id == e)
            }
            static getPlayerInfo(e) {
                return Ne.gameClient.playerList.find(t => t.id == e)
            }
            static getEntities(e) {
                return Ne.gameClient.entities[e].filter(e => null != e)
            }
            static getNickname(e) {
                let t = Ne.gameClient.playerList.find(t => t.id == e);
                return t ? t.name : null
            }
            static getDist(e, t, i, s) {
                return Math.sqrt((e - i) ** 2 + (t - s) ** 2)
            }
            static reverseStr() {
                return arguments[0].split("").reverse().join("")
            }
            static ease_out_quad(e) {
                return e * (2 - e)
            }
            static ease_out_cubic(e) {
                return --e * e * e + 1
            }
            static ease_in_out_quad(e) {
                return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
            }
            static ease_in_out_cubic(e) {
                return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1
            }
            static ease_in_out_quart(e) {
                return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e
            }
            static ease_out_quart(e) {
                return 1 - --e * e * e * e
            }
            static ease_out_quint(e) {
                return 1 + --e * e * e * e * e
            }
        }
        class m {
            constructor(e, t, i, s, a, r, n, o, l) {
                this.fun = e, this.ed = t, this.em = i, this.sx = s, this.sy = a, this.x = r, this.y = n, this.ex = o, this.ey = l
            }
            ease = function(e, t) {
                if (e.x == this.ex && e.y == this.ey || (this.ex = e.x, this.ey = e.y, this.sx = this.x, this.sy = this.y, this.ed = 0), this.ex != this.x || this.ey != this.y) {
                    if (this.ed += t, this.ed > this.em) this.x = this.ex, this.y = this.ey;
                    else {
                        var i = this.fun(this.ed / this.em);
                        this.x = this.sx + (this.ex - this.sx) * i, this.y = this.sy + (this.ey - this.sy) * i
                    }
                }
            }
        }

        function c(e, t) {
            var i = document.createElement("canvas"),
                s = i.getContext("2d"),
                a = Math.floor(32),
                r = Math.floor(22);
            s.font = r + "px Baloo Paaji";
            var n, o, l, h, d = s.measureText(t).width + 20,
                g = 10;
            return i.width = d, i.height = a, o = s, l = d, h = a, l < 2 * g && (g = l / 2), h < 2 * g && (g = h / 2), 0 > g && (g = 0), o.beginPath(), o.moveTo(0 + g, 0), o.arcTo(0 + l, 0, 0 + l, 0 + h, g), o.arcTo(0 + l, 0 + h, 0, 0 + h, g), o.arcTo(0, 0 + h, 0, 0, g), o.arcTo(0, 0, 0 + l, 0, g), o.closePath(), s.globalAlpha = .5, (n = s).fillStyle = "#000", n.fill(), s.globalAlpha = 1, s.textBaseline = "middle", s.font = r + "px Baloo Paaji", s.beginPath(), s.fillStyle = "#FFF", s.fillText(t, 10, a / 2 * 1.1), i
        }

        function _(e, t, i, s, a, r, n, o, l, h) {
            void 0 !== t.tryLoad && 1 !== t.tryLoad() || (void 0 !== h ? e.drawImage(t, i, s, Math.max(1, a), Math.max(1, r), n, o, l, h) : void 0 !== r ? e.drawImage(t, i, s, a, r) : e.drawImage(t, i, s))
        }

        function p() {
            let e = Ne.gameClient.render.delta,
                t = Ne.gameClient.render.ctx;
            if (t.save(), t.translate(Ne.camera.cam.x + this.x, Ne.camera.cam.y + this.y), this.text.length > 0) {
                for (var i = 0; i < this.text.length && i < 2; i++) this.label[i] || (this.label[i] = c(0, this.text[i]), this.text_effect[i] = 0, this.text_move[i] = 0), 1 === i && (this.text_move[0] = 30 * g.ease_in_out_quad(this.text_ease));
                for (this.text_effect[0] += e, this.text.length > 1 && (this.text_ease = Math.min(this.text_ease + e, 1), this.text_effect[0] > 1 && this.text_ease > .5 && (this.text_effect[1] += e)), i = 0; i < this.text.length && i < 2; i++) {
                    var s = this.text_effect[i];
                    s > 0 && (t.globalAlpha = s < .25 ? 4 * s : s > 3.75 ? Math.max(4 * (4 - s), 0) : 1, _(t, this.label[i], -this.label[i].width / 2, -this.text_move[i] + -this.label[i].height / 2 - 110))
                }
                this.text_effect[0] > 4 && (this.text_effect.shift(), this.text.shift(), this.text_move.shift(), this.label.shift(), this.text_ease = 0)
            }
            t.restore()
        }

        function u(e, t, i, s) {
            this.angle && NaN != this.angle || (this.angle = Math.PI), this._angle && NaN != this._angle || (this._angle = this.angle), this._angle = o(this._angle, this.angle, 10 * i);
            let r = 32 & this.action,
                n = 64 & this.action,
                h = 0 != this.attack.v || 16 & this.action;
            r && this.walk.update(i), n && this.idle.update(i), 16 & this.action && this.attack.update(i) && 0 == this.attack.o && (this.hand = !this.hand, this.action -= 16), 0 != this.right && (this.hand = !0);
            let d = this.hand ? this.attack.v / 3 : -this.attack.v,
                m = this.hand ? this.attack.v : -this.attack.v / 3,
                c = 32 & this.action ? this.walk.v : this.idle.v;
            this.id == Ne.myPlayer.id && (this._angle = Ne.mouse.angle);
            let p = 0 == Ne.gameClient.world.cycle.isNight;
            t.save(), 0 != this.right && function(e, t, i, s, a) {
                window.imgScale || (window.imgScale = .6), window.rot || (window.rot = .1), window.ox || (window.ox = 1), window.oy || (window.oy = 1), window.imageHeightScale || (window.imageHeightScale = .6), e.save();
                let r = l.fromId(s.right),
                    n = Ne.spriteClient.getSprite(r.objectSpriteId, !0),
                    o, h, d, g, m;
                switch (e.translate(s.x + Ne.camera.cam.x, s.y + Ne.camera.cam.y), e.rotate(s._angle - Math.PI / 2 + 2 * a.right), s.right) {
                    case l.WOOD_PICKAXE.Id:
                    case l.STONE_PICKAXE.Id:
                    case l.GOLD_PICKAXE.Id:
                    case l.DIAMOND_PICKAXE.Id:
                    case l.AMETHYST_PICKAXE.Id:
                        o = -9, h = 73, d = 2.347, g = .48, m = .48;
                        break;
                    case l.WOOD_SWORD.Id:
                    case l.STONE_SWORD.Id:
                    case l.GOLD_SWORD.Id:
                    case l.DIAMOND_SWORD.Id:
                    case l.AMETHYST_SWORD.Id:
                        o = -1, h = 100, d = 1.417, g = .32, m = .33;
                        break;
                    case l.WOOD_SPEAR.Id:
                    case l.STONE_SPEAR.Id:
                    case l.GOLD_SPEAR.Id:
                    case l.DIAMOND_SPEAR.Id:
                    case l.AMETHYST_SPEAR.Id:
                        o = 3, h = 123, d = 1.417, g = .57, m = .6;
                        break;
                    case l.STONE_HAMMER.Id:
                    case l.GOLD_HAMMER.Id:
                    case l.DIAMOND_HAMMER.Id:
                    case l.AMETHYST_HAMMER.Id:
                        o = -2, h = 85, d = 1.397, g = .92, m = .93;
                        break;
                    case l.STONE_PITCHFORK.Id:
                        o = -3, h = 116, d = 3, g = -.175, m = .175;
                        break;
                    case l.BOOK.Id:
                        o = -10, h = 56, g = .55, m = .55, d = 15.35;
                        break;
                    case l.WRENCH.Id:
                        o = -3.9, h = 60.2, g = -.25, m = -.25, d = 8.75
                }
                e.translate(o, h), e.translate(-55 - (a.drawAttack || 32 & s.action ? 0 : a.handsOffset), (a.drawAttack ? 0 : 32 & s.action ? -a.handsOffset : 0) - 38), e.rotate(d), null != n && i.drawImage(n, -n.width * (g / 2), -n.height * (m / 2), n.width * g, n.height * m), e.restore()
            }(t, 0, s, this, {
                drawAttack: h,
                right: d,
                handsOffset: c
            }), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
            let u = Ne.spriteClient.getSprite(a.PLAYER_BODY.ID, p);
            if (t.drawImage(u, -u.width / 4.25, -u.height / 4.25, u.width / 2.125, u.height / 2.125), t.restore(), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle + Math.PI / 2), (2 & this.action || .6 != this.hurt.anim.v) && (this.hurt.anim.update(i), t.globalAlpha = .7 - this.hurt.anim.v, t.drawImage(g.get_image_effect(0, u, 0), -u.width / 4.25, -u.height / 4.25, u.width / 2.125, u.height / 2.125)), (128 & this.action || .6 != this.heal.anim.v) && (this.heal.anim.update(i), t.globalAlpha = .7 - this.heal.anim.v, t.drawImage(g.get_image_effect(0, u, 1), -u.width / 4.25, -u.height / 4.25, u.width / 2.125, u.height / 2.125)), (8 & this.action || .6 != this.hunger.anim.v) && (this.hunger.anim.update(i), t.globalAlpha = .7 - this.hunger.anim.v, t.drawImage(g.get_image_effect(0, u, 3), -u.width / 4.25, -u.height / 4.25, u.width / 2.125, u.height / 2.125)), (4 & this.action || .6 != this.cold.anim.v) && (this.cold.anim.update(i), t.globalAlpha = .7 - this.cold.anim.v, t.drawImage(g.get_image_effect(0, u, 2), -u.width / 4.25, -u.height / 4.25, u.width / 2.125, u.height / 2.125)), t.restore(), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), this.stunned || .6 != this.stun.anim.v) {
                let I = Ne.spriteClient.getSprite(a.SPIDER_WEB.ID, p);
                this.stunned = !1, this.stun.anim.update(i), t.globalAlpha = .7 - this.stun.anim.v, t.drawImage(I, -I.width / 2.9, -I.height / 2.9, I.width / 1.45, I.height / 1.45)
            }
            t.restore(), 0 != this.hat && function(e, t, i, s) {
                e.save();
                let a = l.fromId(s.hat),
                    r = Ne.spriteClient.getSprite(a.objectSpriteId, !0),
                    n, o, h, d;
                switch (e.translate(s.x + Ne.camera.cam.x, s.y + Ne.camera.cam.y), e.rotate(s._angle - Math.PI / 2), s.hat) {
                    case l.WOOD_HELMET.Id:
                        n = 1, o = -4, h = .26, d = .26;
                        break;
                    case l.STONE_HELMET.Id:
                        n = 0, o = -23, h = .24, d = .24;
                        break;
                    case l.GOLD_HELMET.Id:
                    case l.DIAMOND_HELMET.Id:
                        n = -1, o = -7, h = .22, d = .22;
                        break;
                    case l.AMETHYST_HELMET.Id:
                        n = -.125, o = -1, h = .21, d = .21;
                        break;
                    case l.WARM_HELMET1.Id:
                        n = 1.552, o = -21.2799, h = .495, d = -.475;
                        break;
                    case l.WARM_HELMET2.Id:
                        n = .002000000000000668, o = -10, h = -.4811, d = -.475
                }
                e.translate(n, o), null != r && i.drawImage(r, -r.width * (h / 2), -r.height * (d / 2), r.width * h, r.height * d), e.restore()
            }(t, 0, s, this), Ne.drawShit && this.id == Ne.myPlayer.id && (t.save(), t.beginPath(), t.lineWidth = 5, t.arc(Ne.drawShit[0].x + Ne.camera.cam.x, Ne.drawShit[0].y + Ne.camera.cam.y, Ne.drawShit[0].radius, 0, 2 * Math.PI, !1), t.stroke(), t.restore()), t.save();
            let f = Ne.spriteClient.getSprite(a.PLAYER_LEFT_HAND.ID, p);
            t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle + Math.PI / 2 + m), t.save(), t.translate(40 + (h || r ? 0 : c), -20 + (h ? 0 : r ? c : 0)), t.rotate(5.45), t.drawImage(f, 0, 0, f.width / 2.125, f.height / 2.125), t.restore(), t.restore(), t.save();
            let y = Ne.spriteClient.getSprite(a.PLAYER_RIGHT_HAND.ID, p);
            var w, D, v, A, E, S, b = "#000",
                T = 2;
            t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle + Math.PI / 2 + d), t.save(), t.translate((h || r ? 0 : -c) - 55, -38 + (h ? 0 : r ? c : 0)), t.rotate(.95), t.drawImage(y, 0, 0, y.width / 2.125, y.height / 2.125), t.restore(), t.restore(), t.restore(), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), this.name_label || (this.name_label = (w = g.getNickname(this.id), void 0 === D && (D = 0), A = (v = document.createElement("canvas")).getContext("2d"), T = T ? 1 * T : 0, E = Math.floor(24), A.textAlign = "center", A.font = E + "px Baloo Paaji", A.lineJoin = "round", S = Math.min(A.measureText(w).width + 2 + 0, 300), E = 1 * (E + T + D) + 0, v.width = S, v.height = E, A.textBaseline = "middle", A.font = "24px Baloo Paaji", A.lineJoin = "round", b && (A.beginPath(), A.fillStyle = b, A.fillText(w, 0, E / 2 + T - 0, S)), A.beginPath(), A.fillStyle = "#FFF", A.fillText(w, D, (E - 0) / 2, S), v));
            let O = Math.floor(-this.name_label.height / 2 - 70),
                R = Math.floor(-this.name_label.width / 2);
            if (null != Ne.myPlayer.totem_data.players) {
                let x = g.is_teammate(this.id);
                if (null != x) {
                    let C = Ne.spriteClient.getSprite(1 == x[1] ? a.UI_TOTEM_LEADER_ICO.ID : a.UI_TOTEM_PLAYER_ICO.ID);
                    s.drawImage(C, R + -16 - 22.5, O + -14 + 5, 32, 28)
                }
            }
            _(t, this.name_label, R, O), t.restore(), t.restore(), this.draw_text()
        }

        function I(e, t, i, s) {
            this._angle = o(this._angle, this.angle, 10 * i), this.move_anim.update(i);
            let r = 0 != this.hurt.animation.v || 2 & this.action;
            r && this.hurt.animation.update(i), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
            let n = Ne.spriteClient.getSprite(a.WOLF.ID, !0),
                l = n.width / 1.125,
                h = n.height / 1.125;
            if (s.drawImage(n, 20 + -l / 2 + -(5 * this.move_anim.v) / 2, 20 + -h / 2 + -(5 * this.move_anim.v) / 2, -40 + l + 5 * this.move_anim.v, -40 + h + 5 * this.move_anim.v), r) {
                t.globalAlpha = this.hurt.animation.v / 1.75;
                let d = Ne.spriteClient.getSprite(a.WOLF_HURT.ID, !0);
                l = d.width / 1.125, h = d.height / 1.125, s.drawImage(d, 20 + -l / 2, 20 + -h / 2, -40 + l, -40 + h)
            }
            t.restore()
        }

        function f(e, t, i, s) {
            this._angle = o(this._angle, this.angle, 10 * i), this.move_anim.update(i);
            let r = 0 != this.hurt.animation.v || 2 & this.action;
            r && this.hurt.animation.update(i), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
            let n = Ne.spriteClient.getSprite(a.RABBIT.ID, !0);
            if (s.drawImage(n, 10 + -n.width / 2 + -(5 * this.move_anim.v) / 2, 15 + -n.height / 2 + -(5 * this.move_anim.v) / 2, -20 + n.width + 5 * this.move_anim.v, -30 + n.height + 5 * this.move_anim.v), r) {
                t.globalAlpha = this.hurt.animation.v / 1.75;
                let l = Ne.spriteClient.getSprite(a.RABBIT_HURT.ID, !0);
                s.drawImage(l, 10 + -l.width / 2, 15 + -l.height / 2, -20 + l.width, -30 + l.height)
            }
            t.restore()
        }

        function y(e, t, i, s) {
            if (this.hit.update && this.itemsIn > 0 && Math.random() > .85 && this.particleAPI.createNewParticle({
                    x: this.x,
                    y: this.y,
                    isAnimatedSpawn: !0,
                    isAnimatedDispose: !0,
                    radius: {
                        min: 12,
                        max: 20
                    },
                    speed: 2.5,
                    disposeSpeed: 4.5,
                    aliveTime: 10 + Math.floor(40 * Math.random()),
                    colors: this.particleColors
                }), this.ground.update(i), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), 6 == this.type && this.age >= 1 && (this.wind.update(i), t.rotate(this.wind.v)), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let h;
            switch (this.type) {
                case 6:
                    if (0 == this.itemsIn && (h = Ne.spriteClient.getSprite(a.PLANT_WHEAT_SEED.ID, !0)), 1 == this.itemsIn && (h = Ne.spriteClient.getSprite(a.PLANT_WHEAT.ID, !0)), 0 == this.itemsIn) {
                        let d = l.WHEAT_SEED.size_offset;
                        d *= this.ground.v, s.drawImage(h, n + -h.width * (.5 * d), o + -h.height * (.5 * d), h.width * d, h.height * d)
                    } else s.drawImage(h, 9 + n + -h.width / 5.2, -17.5 + (o + -h.height / 5.2), h.width / 2.6, h.height / 2.6);
                    break;
                case 5:
                    if (0 == this.age) {
                        h = Ne.spriteClient.getSprite(a.PLANT_BERRY_SEED.ID, !0);
                        let g = l.BERRY_SEED.size_offset;
                        g *= this.ground.v, s.drawImage(h, n + -h.width * (.5 * g), o + -h.height * (.5 * g), h.width * g, h.height * g)
                    }
                    let m, c;
                    1 == this.age && (h = Ne.spriteClient.getSprite(a.PLANT_BERRY_BUSH.ID, !0), s.drawImage(h, n + -h.width / 2, o + -h.height / 2, h.width, h.height));
                    var _ = (h = Ne.spriteClient.getSprite(a.BERRY_SMALL.ID, !0)).width * this.ground.v,
                        p = h.height * this.ground.v;
                    for (let u = 0; u < this.itemsIn; u++) switch (u + 1) {
                        case 1:
                            m = 5, c = -15, s.drawImage(h, n + -_ / 2 + m, o + -p / 2 + c, _, p);
                            break;
                        case 2:
                            m = -14, c = 1, s.drawImage(h, n + -_ / 2 + m, o + -p / 2 + c, _, p);
                            break;
                        case 3:
                            m = 8, c = 12, s.drawImage(h, n + -_ / 2 + m, o + -p / 2 + c, _, p)
                    }
            }
            t.restore(), this.particleAPI.updateParticles(t, e, i, s)
        }

        function w(e, t, i, s) {
            this._angle = o(this._angle, this.angle, 10 * i), this.move_anim.update(i);
            let r = 0 != this.hurt.animation.v || 2 & this.action;
            r && this.hurt.animation.update(i), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
            let n = Ne.spriteClient.getSprite(a.SPIDER.ID, !0),
                l = n.width / 1.45,
                h = n.height / 1.4;
            if (s.drawImage(n, 20 + -l / 2 + -(5 * this.move_anim.v) / 2, 20 + -h / 2 + -(5 * this.move_anim.v) / 2, -40 + l + 5 * this.move_anim.v, -40 + h + 5 * this.move_anim.v), r) {
                t.globalAlpha = this.hurt.animation.v / 1.75;
                let d = Ne.spriteClient.getSprite(a.SPIDER_HURT.ID, !0);
                l = d.width / 1.45, h = d.height / 1.4, s.drawImage(d, 20 + -l / 2, 20 + -h / 2, -40 + l, -40 + h)
            }
            t.restore()
        }

        function D(e, t, i, s) {
            t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2);
            let r = Ne.spriteClient.getSprite(a.DROP_BOX.ID, !0);
            s.drawImage(r, -(.3 * r.width), -(.3 * r.height), .6 * r.width, .6 * r.height), (2 & this.action || .6 != this.hurt.anim.v) && (this.hurt.anim.update(i), t.globalAlpha = .7 - this.hurt.anim.v, t.drawImage(g.get_image_effect(0, r, 0), -(.3 * r.width), -(.3 * r.height), .6 * r.width, .6 * r.height)), t.restore()
        }

        function v(e, t, i, s) {
            t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2);
            let r = null,
                n = null;
            if (this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let o = (1 - this.hit.anim.v) * i * 600;
                var h = Math.cos(this.hit.angle) * o,
                    d = Math.sin(this.hit.angle) * o
            } else h = 0, d = 0;
            let g = -2;
            switch (this.type) {
                case 10:
                    r = Ne.spriteClient.getSprite(a.WALL_WOOD.ID, !0), n = l.WALL_WOOD;
                    break;
                case 11:
                    r = Ne.spriteClient.getSprite(a.WALL_STONE.ID, !0), n = l.WALL_STONE, g = -4;
                    break;
                case 12:
                    r = Ne.spriteClient.getSprite(a.WALL_GOLD.ID, !0), n = l.WALL_GOLD, g = -5;
                    break;
                case 13:
                    r = Ne.spriteClient.getSprite(a.WALL_DIAMOND.ID, !0), n = l.WALL_DIAMOND, g = -6;
                    break;
                case 14:
                    r = Ne.spriteClient.getSprite(a.WALL_AMETHYST.ID, !0), n = l.WALL_AMETHYST, g = -6
            }
            let m = n.size_offset;
            if (s.drawImage(r, h + -r.width * (.5 * m), d + -r.height * (.5 * m), r.width * m, r.height * m), Ne.options.get_value("render", "building_health")) {
                let c = this.info,
                    _ = n.max_health;
                _ - c > 5 && (t.beginPath(), t.globalAlpha = .25, t.strokeStyle = "wheat", t.lineWidth = 10, t.lineCap = "round", t.arc(h, d + g, r.width * m / 4, 0, 2 * Math.PI / (_ / (c - _)), !1), t.stroke())
            }
            t.restore()
        }
        let A = new Map;

        function E(e, t, i, s) {
            let r = !1;
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let n = (1 - this.hit.anim.v) * i * 600;
                var o = Math.cos(this.hit.angle) * n,
                    h = Math.sin(this.hit.angle) * n
            } else o = 0, h = 0;
            let d = Ne.spriteClient.getSprite(a.COMPRESSOR_INACTIVE.ID, !0),
                g = l.COMPRESSOR,
                m = g.size_offset,
                c = this.action;
            if (0 != this.info || 0 != c) {
                if (!A.get(c[0][0]) || c[1][1] >= 512) r = !0;
                else {
                    d = Ne.spriteClient.getSprite(a.COMPRESSOR_ACTIVE.ID, !0), g = l.COMPRESSOR;
                    let _ = Math.floor(Math.random() * (2 * Math.PI));
                    s.drawImage(d, 1 * Math.cos(_) + o + -d.width * (.5 * m), 1 * Math.sin(_) + h + -d.height * (.5 * m), d.width * m, d.height * m)
                }
            }
            r && s.drawImage(d, o + -d.width * (.5 * m), h + -d.height * (.5 * m), d.width * m, d.height * m), t.restore(), 0 == this.info && 0 == this.action || (+new Date - this.particleAPI.lastParticle > this.nextParticle && (this.nextParticle = r ? 600 + Math.floor(3900 * Math.random()) : 200 + Math.floor(1300 * Math.random()), this.particleAPI.lastParticle = +new Date, this.particleAPI.createNewParticle({
                x: this.x,
                y: this.y,
                isAnimatedSpawn: !0,
                isAnimatedDispose: !0,
                radius: {
                    min: 15,
                    max: 25
                },
                colors: r ? ["#686e6b", "#858f89", "#98a39d", "#59665f", "#616362"] : ["#342c57", "#2f284e", "#484168", "#1f1a34", "#5d5679"]
            })), this.particleAPI.updateParticles(t, e, i, s))
        }

        function S(e, t, i, s) {
            let r = !1;
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let n = (1 - this.hit.anim.v) * i * 600;
                var o = Math.cos(this.hit.angle) * n,
                    h = Math.sin(this.hit.angle) * n
            } else o = 0, h = 0;
            let d = Ne.spriteClient.getSprite(a.BREAD_OVEN_INACTIVE.ID, !0),
                g = l.BREAD_OVEN,
                m = g.size_offset,
                c = this.action;
            if (0 != this.info || 0 != c) {
                let _ = c[0],
                    p = c[1],
                    u = c[2];
                if (0 != _[0] && _[1] >= 1 && 0 != p[0] && p[1] >= 1 && u[1] < 40) {
                    d = Ne.spriteClient.getSprite(a.BREAD_OVEN_ACTIVE.ID, !0), g = l.BREAD_OVEN;
                    var I = Math.cos(this.angle - .5 * Math.PI),
                        f = Math.sin(this.angle - .5 * Math.PI);
                    s.drawImage(d, I + o + -d.width * (.5 * m), f + h + -d.height * (.5 * m), d.width * m, d.height * m)
                } else r = !0
            } else r = !0;
            r && s.drawImage(d, o + -d.width * (.5 * m), h + -d.height * (.5 * m), d.width * m, d.height * m), t.restore(), 0 == this.info && 0 == this.action || (+new Date - this.particleAPI.lastParticle > this.nextParticle && (this.nextParticle = r ? 400 + Math.floor(4200 * Math.random()) : 600 + Math.floor(2600 * Math.random()), this.particleAPI.lastParticle = +new Date, this.particleAPI.createNewParticle({
                x: this.x,
                y: this.y,
                isAnimatedSpawn: !0,
                isAnimatedDispose: !0,
                speed: .4,
                radius: {
                    min: 15,
                    max: 25
                },
                colors: r ? ["#686e6b", "#858f89", "#98a39d", "#59665f", "#616362"] : ["#c29b1d", "#cca423", "#bf960f", "#c2a442", "#a38626"]
            })), this.particleAPI.updateParticles(t, e, i, s))
        }

        function b(e, t, i, s) {
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let h = Ne.spriteClient.getSprite(a.CHEST.ID, !0),
                d = l.CHEST.size_offset;
            s.drawImage(h, n + -h.width * (.5 * d), o + -h.height * (.5 * d), h.width * d, h.height * d), t.restore()
        }

        function T(e, t, i, s) {
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let h = Ne.spriteClient.getSprite(a.WORKBENCH.ID, !0),
                d = l.WORKBENCH.size_offset;
            s.drawImage(h, n + -h.width * (.5 * d), o + -h.height * (.5 * d), h.width * d, h.height * d), t.restore()
        }

        function O(e, t, i, s) {
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let h = Ne.spriteClient.getSprite(a.PLOT.ID, !0),
                d = l.PLOT.size_offset;
            s.drawImage(h, n + -h.width * (.5 * d), o + -h.height * (.5 * d), h.width * d, h.height * d), t.restore()
        }

        function R(e, t, i, s) {
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let h = Ne.spriteClient.getSprite(a.TOTEM.ID, !0),
                d = l.TOTEM.size_offset;
            s.drawImage(h, n + -h.width * (.5 * d), o + -h.height * (.5 * d), h.width * d, h.height * d), t.restore()
        }

        function x(e, t, i, s) {
            t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2);
            let r = null,
                n = null;
            if (this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let o = (1 - this.hit.anim.v) * i * 600;
                var h = Math.cos(this.hit.angle) * o,
                    d = Math.sin(this.hit.angle) * o
            } else h = 0, d = 0;
            switch (this.type) {
                case 15:
                    r = Ne.spriteClient.getSprite(a.SPIKE_WOOD.ID, !0), n = l.SPIKE_WOOD;
                    break;
                case 16:
                    r = Ne.spriteClient.getSprite(a.SPIKE_STONE.ID, !0), n = l.SPIKE_STONE;
                    break;
                case 17:
                    r = Ne.spriteClient.getSprite(a.SPIKE_GOLD.ID, !0), n = l.SPIKE_GOLD;
                    break;
                case 18:
                    r = Ne.spriteClient.getSprite(a.SPIKE_DIAMOND.ID, !0), n = l.SPIKE_DIAMOND;
                    break;
                case 19:
                    r = Ne.spriteClient.getSprite(a.SPIKE_AMETHYST.ID, !0), n = l.SPIKE_AMETHYST
            }
            let g = n.size_offset;
            if (s.drawImage(r, h + -r.width * (.5 * g), d + -r.height * (.5 * g), r.width * g, r.height * g), Ne.options.get_value("render", "building_health")) {
                let m = this.info,
                    c = n.max_health;
                c - m > 5 && (t.beginPath(), t.globalAlpha = .25, t.strokeStyle = "wheat", t.lineWidth = 10, t.lineCap = "round", t.arc(h, d + -2, r.width * g / 4, 0, 2 * Math.PI / (c / (m - c)), !1), t.stroke())
            }
            t.restore()
        }

        function C(e, t, i, s) {
            t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2);
            let a = null,
                r = null;
            if (this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let n = (1 - this.hit.anim.v) * i * 600;
                var o = Math.cos(this.hit.angle) * n,
                    h = Math.sin(this.hit.angle) * n
            } else o = 0, h = 0;
            switch (this.type) {
                case 20:
                    r = l.DOOR_WOOD;
                    break;
                case 21:
                    r = l.DOOR_STONE;
                    break;
                case 22:
                    r = l.DOOR_GOLD;
                    break;
                case 23:
                    r = l.DOOR_DIAMOND;
                    break;
                case 24:
                    r = l.DOOR_AMETHYST
            }
            a = Ne.spriteClient.getSprite(r.objectSpriteId, !0);
            let d = r.size_offset;
            if (0 == this.action && (t.globalAlpha = .5), s.drawImage(a, o + -a.width * (.5 * d), h + -a.height * (.5 * d), a.width * d, a.height * d), Ne.options.get_value("render", "building_health")) {
                let g = this.info,
                    m = r.max_health;
                m - g > 5 && (t.beginPath(), t.globalAlpha = .25, t.strokeStyle = "wheat", t.lineWidth = 10, t.lineCap = "round", t.arc(o, h + -2, a.width * d / 4, 0, 2 * Math.PI / (m / (g - m)), !1), t.stroke())
            }
            t.restore()
        }

        function L(e, t, i, s) {
            if (this.hit.update) {
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let l, h;
            t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
            let d = null;
            l = (d = Ne.spriteClient.getSprite(a.FIRECAMP_GLOW1.ID, !0)).width * this.halo.v, h = d.width * this.halo.v, t.save(), t.globalAlpha = .6, l = (d = Ne.spriteClient.getSprite(a.FIRECAMP_GLOW3.ID, !0)).width * this.halo.v, h = d.height * this.halo.v, s.drawImage(d, n + -.25 * l, o + -.25 * h, .5 * l, .5 * h), t.restore(), t.save(), t.globalAlpha = .95, l = (d = Ne.spriteClient.getSprite(a.FIRECAMP_TOP.ID, !0)).width * this.top_anim.v, h = d.width * this.top_anim.v, s.drawImage(d, n + -.225 * l, o + -.225 * h, .45 * l, .45 * h), t.restore(), t.restore(), t.save(), Ne.options.get_value("render", "fire_particles") && +new Date - this.particleAPI.lastParticle > this.nextParticle && (this.nextParticle = 200 + Math.floor(1300 * Math.random()), this.particleAPI.lastParticle = +new Date, this.particleAPI.createNewParticle({
                x: this.x,
                y: this.y,
                isAnimatedSpawn: !0,
                isAnimatedDispose: !0,
                radius: {
                    min: 15,
                    max: 25
                },
                colors: ["#e7a518", "#ea8233", "#ea5834", "#eac234", "#e77218"]
            })), this.particleAPI.updateParticles(t, e, i, s), t.restore()
        }

        function P(e, t, i, s) {
            if (this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n, o, l = Math.cos(this.hit.angle) * r,
                    h = Math.sin(this.hit.angle) * r;
                Ne.options.get_value("render", "fire_particles") && Math.random() > .6 && this.particleAPI.createNewParticle({
                    x: this.x,
                    y: this.y,
                    isAnimatedSpawn: !0,
                    isAnimatedDispose: !0,
                    radius: {
                        min: 15,
                        max: 25
                    },
                    speed: 4,
                    disposeSpeed: 2.6,
                    aliveTime: 20 + Math.floor(100 * Math.random()),
                    colors: ["#e7a518", "#ea8233", "#ea5834", "#eac234", "#e77218"]
                })
            } else l = 0, h = 0;
            this.halo.update(i), this.top_anim.update(i), t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
            let d = null;
            t.save(), t.globalAlpha = .6, n = (d = Ne.spriteClient.getSprite(a.FIRECAMP_GLOW2.ID, !0)).width * this.halo.v, o = d.width * this.halo.v, s.drawImage(d, l + -.25 * n, h + -.25 * o, .5 * n, .5 * o), t.restore(), d = Ne.spriteClient.getSprite(a.FIRECAMP_STICKS.ID, !0), s.drawImage(d, l + -.2875 * d.width, h + -.2875 * d.height, .575 * d.width, .575 * d.height), t.restore()
        }

        function k(e, t, i, s) {
            if (this.action instanceof Array && this.action[0][1] >= 1) {
                if (this.hit.update) {
                    let r = (1 - this.hit.anim.v) * i * 600;
                    var n = Math.cos(this.hit.angle) * r,
                        o = Math.sin(this.hit.angle) * r
                } else n = 0, o = 0;
                let l, h;
                t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this._angle - Math.PI / 2);
                let d = null;
                t.globalAlpha = .6, l = .5 * (d = Ne.spriteClient.getSprite(a.FIRECAMP_GLOW3.ID, !0)).width, h = .5 * d.height, s.drawImage(d, n + -l / 2, o + -h / 2, l, h), t.restore(), t.save(), Ne.options.get_value("render", "fire_particles") && +new Date - this.particleAPI.lastParticle > this.nextParticle && (this.nextParticle = 200 + Math.floor(1300 * Math.random()), this.particleAPI.lastParticle = +new Date, this.particleAPI.createNewParticle({
                    x: this.x,
                    y: this.y,
                    isAnimatedSpawn: !0,
                    isAnimatedDispose: !0,
                    radius: {
                        min: 15,
                        max: 25
                    },
                    colors: ["#e7a518", "#ea8233", "#ea5834", "#eac234", "#e77218"]
                })), this.particleAPI.updateParticles(t, e, i, s), t.restore()
            }
        }

        function N(e, t, i, s) {
            if (t.save(), t.translate(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y), t.rotate(this.angle - Math.PI / 2), this.hit.update) {
                this.hit.anim.update(Ne.gameClient.render.delta) && 0 == this.hit.anim.o && (this.hit.update = !1);
                let r = (1 - this.hit.anim.v) * i * 600;
                var n = Math.cos(this.hit.angle) * r,
                    o = Math.sin(this.hit.angle) * r
            } else n = 0, o = 0;
            let h = Ne.spriteClient.getSprite(a.FURNACE_INACTIVE.ID, !0),
                d = l.FURNACE.size_offset,
                g = !1;
            this.action instanceof Array && this.action[0][1] >= 1 && (h = Ne.spriteClient.getSprite(a.FURNACE_ACTIVE.ID, !0), g = !0), s.drawImage(h, n + -h.width * (.5 * d), o + -h.height * (.5 * d), h.width * d, h.height * d), t.restore(), +new Date - this.particleAPI.lastParticle > this.nextParticle && (this.nextParticle = g ? 600 + Math.floor(3900 * Math.random()) : 200 + Math.floor(1300 * Math.random()), this.particleAPI.lastParticle = +new Date, this.particleAPI.createNewParticle({
                x: this.x,
                y: this.y,
                isAnimatedSpawn: !0,
                isAnimatedDispose: !0,
                radius: {
                    min: 15,
                    max: 25
                },
                disposeSpeed: .9,
                speed: .65,
                colors: g ? ["#e7a518", "#ea8233", "#ea5834", "#eac234", "#e77218"] : ["#727272", "#868686", "#aeaeae"]
            })), this.particleAPI.updateParticles(t, e, i, s)
        }
        A.set(l.BERRY.Id, {
            take_number: 6,
            extract_item: l.WHEAT_SEED.Id,
            extract_number: 1
        }), A.set(l.WHEAT.Id, {
            take_number: 1,
            extract_item: l.FLOUR.Id,
            extract_number: 1
        });
        class M {
            constructor() {}
            static getDistance(e) {
                let t;
                return {
                    xDist: Math.sqrt(Math.pow(e.x - Ne.myPlayer.obj.x, 2)),
                    yDist: Math.sqrt(Math.pow(e.y - Ne.myPlayer.obj.y, 2))
                }
            }
            static distanceSqrt(e, t, i, s) {
                return Math.sqrt((e - i) ** 2 + (t - s) ** 2)
            }
            static difference(e, t) {
                return e - t
            }
            static simplifyScore(e) {
                if (null == e || !e || isNaN(e)) return 0;
                if (1e4 <= e) {
                    let t = Math.max(0, 3 - (Math.floor(Math.log10(e)) - 2)),
                        i = Math.floor(e / 1e3).toString();
                    if (t) {
                        for (i += "." + (e % 1e3 / 1e3).toString().substring(2).substring(0, t), e = i.length - 1, t = 0; 0 < e && "0" == i[e]; e--) t++;
                        "." == (i = i.substring(0, i.length - t))[i.length - 1] && (i = i.substring(0, i.length - 1))
                    }
                    return i + "k"
                }
                if (null == e) return 0;
                try {
                    return e.toString()
                } catch (s) {
                    console.log("return score Error")
                }
            }
            static uuidv4() {
                return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, e => (e ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> e / 4).toString(16))
            }
            static seed(e) {
                let t = 1779033703,
                    i = 3144134277,
                    s = 1013904242,
                    a = 2773480762;
                for (let r, n = 0; n < e.length; n++) t = i ^ Math.imul(t ^ (r = e.charCodeAt(n)), 597399067), i = s ^ Math.imul(i ^ r, 2869860233), s = a ^ Math.imul(s ^ r, 951274213), a = t ^ Math.imul(a ^ r, 2716044179);
                return t = Math.imul(s ^ t >>> 18, 597399067), i = Math.imul(a ^ i >>> 22, 2869860233), s = Math.imul(t ^ s >>> 17, 951274213), a = Math.imul(i ^ a >>> 19, 2716044179), [(t ^ i ^ s ^ a) >>> 0, (i ^ t) >>> 0, (s ^ t) >>> 0, (a ^ t) >>> 0]
            }
        }
        let U = {
            copy_vector: function(e, t) {
                t.x = e.x, t.y = e.y
            },
            get_vector: function(e, t) {
                let i = {};
                return i.x = e.x - t.x, i.y = e.y - t.y, i
            },
            mul_vector: function(e, t) {
                e.x *= t, e.y *= t
            },
            scalar_product: function(e, t) {
                return e.x * t.x + e.y * t.y
            },
            norm: function(e) {
                return Math.sqrt(e.x * e.x + e.y * e.y)
            },
            sign: function(e) {
                return e < 0 ? -1 : 1
            },
            cross_product: function(e, t) {
                return e.x * t.y - e.y * t.x
            },
            get_std_angle: function(e, t) {
                return this.get_angle({
                    x: 1,
                    y: 0
                }, this.get_vector(e, t))
            },
            dist: function(e, t) {
                return Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y))
            },
            build_vector: function(e, t) {
                return {
                    x: Math.cos(t) * e,
                    y: Math.sin(t) * e
                }
            },
            add_vector: function(e, t) {
                e.x += t.x, e.y += t.y
            },
            sub_vector: function(e, t) {
                e.x -= t.x, e.y -= t.y
            },
            translate_vector: function(e, t, i) {
                e.x += t, e.y += i
            },
            translate_new_vector: function(e, t, i) {
                let s = {};
                return s.x = e.x + t, s.y = e.y + i, s
            },
            move: function(e, t, i) {
                e.x += Math.cos(i) * t, e.y += Math.sin(i) * t
            },
            middle: function(e, t) {
                return Math.floor((e - t) / 2)
            },
            middle_point: function(e, t) {
                let i = {};
                return i.x = (e.x + t.x) / 2, i.y = (e.y + t.y) / 2, i
            },
            rand_sign: function() {
                return Math.random() > .5 ? 1 : -1
            },
            get_angle: function(e, t) {
                return Math.acos(this.scalar_product(e, t) / (this.norm(e) * this.norm(t))) * this.sign(this.cross_product(e, t))
            }
        };
        class H {
            constructor() {
                this.particles = [], this.lastParticleId = 0, this.lastParticle = -1, this.maxId = 16384
            }
            refreshParticleIds() {
                this.lastParticleId = 0
            }
            createNewParticle(e) {
                this.lastParticleId >= this.maxId && this.refreshParticleIds(), this.lastParticle = +new Date;
                let t = new G(this, e, ++this.lastParticleId);
                this.particles.push(t)
            }
            disposeParticle(e) {
                let t = this.particles.filter(t => t.Id != e);
                this.particles = t
            }
            updateParticles(e, t, i, s) {
                let a = +new Date;
                for (let r = 0; r < this.particles.length; r++) this.particles[r].disposeUnit(a);
                for (let n = 0; n < this.particles.length; n++) this.particles[n].renderUpdate(e, t, i, a)
            }
        }
        class G {
            constructor(e, t, i) {
                this.Id = i, this.Instance = e, this.Settings = t, this.image = this.Settings.image ?? null, this.x = this.Settings.x ?? 0, this.y = this.Settings.y ?? 0, this.dispose_speed = this.Settings.disposeSpeed ?? .6, this.dispose_opacity = this.Settings.isAnimatedDispose ? new r(!1, 1, 1, .1, this.dispose_speed, this.dispose_speed) : 1, this.spawn_opacity = this.Settings.isAnimatedSpawn ? new r(!1, 1, 1, .1, .6, .6) : 1, this.state = 0, this.velocity = this.Settings.velocity ?? this.getVelocity(), this.spawnTimestamp = +new Date, this.aliveTime = this.Settings.aliveTime ?? 100 + Math.floor(1400 * Math.random()), this.sizeAnimation = new r(!1, -5, 5, -5, 2.5, 2.5), this.speed = this.Settings.speed ?? 1, this.colors = this.Settings.colors ?? "#ea8233", this.currentColor = this.colorsOf(), this.radiuses = this.Settings.radius ?? {
                    min: 20,
                    max: 60
                }, this.currentRadius = this.radiuses.min + Math.floor(Math.random() * (this.radiuses.max - this.radiuses.min))
            }
            colorsOf() {
                return this.colors instanceof Array ? this.colors[Math.floor(Math.random() * this.colors.length)] : this.colors
            }
            renderUpdate(e, t, i, s) {
                this.updateUnit(i, s);
                let a = function(e, t) {
                    let i = 0,
                        s = 0;
                    switch (e) {
                        case 1:
                            i -= t;
                            break;
                        case 2:
                            i += t;
                            break;
                        case 4:
                            s += t;
                            break;
                        case 5:
                            i -= .71 * t, s += .71 * t;
                            break;
                        case 6:
                            i += .71 * t, s += .71 * t;
                            break;
                        case 8:
                            s -= t;
                            break;
                        case 10:
                            i += .71 * t, s -= .71 * t;
                            break;
                        case 9:
                            i -= .71 * t, s -= .71 * t
                    }
                    return [i, s]
                }(this.velocity, this.speed);
                this.x += a[0], this.y += a[1], e.save(), e.globalAlpha = 1 == this.state ? this.dispose_opacity.v : this.spawn_opacity.v, e.beginPath(), e.fillStyle = this.currentColor, e.arc(this.x + Ne.camera.cam.x, this.y + Ne.camera.cam.y, this.currentRadius + this.sizeAnimation.v, 0, 2 * Math.PI), e.fill(), e.restore()
            }
            disposeUnit(e) {
                this.dispose_opacity.v <= .12 && (this.state = 2, this.Instance.disposeParticle(this.Id))
            }
            updateUnit(e, t) {
                t - this.spawnTimestamp > this.aliveTime && (this.state = 1, this.Settings.isAnimatedDispose && this.dispose_opacity.update(e)), this.sizeAnimation.update(e)
            }
            getVelocity() {
                let e = 1 + Math.floor(10 * Math.random());
                return 7 != e && 3 != e || (e = Math.random() > .5 ? 6 : 8), e
            }
        }
        class Y {
            constructor(e = {}) {
                switch (this.type = e.type, this.id = e.id, this.owner = e.owner || null, this.angle = e.angle, this._angle = this.angle, this.x = e.x, this.y = e.y, this.info = e.info, this.right = 0, this.stunned = !1, this.lastUpdate = -1, this.r = {
                        x: this.x,
                        y: this.y
                    }, this.type) {
                    case 0:
                        this.action = 0, this.text_ease = 0, this.text_effect = [], this.text_move = [], this.text = [], this.label = [], this.draw_text = p, this.name_label = null, this.idle = new r(!0, 0, 2.25, -1.5, 3.75, 7.5), this.walk = new r(!0, 0, 7.5, -3, 22.5, 33.75), this.attack = new r(!1, 0, 0, -Math.PI / 3, 6, 9), this.render = u, this.right = e.right, this.hat = e.hat, this.hurt = {
                            anim: new r(!1, .6, .6, 0, 5, 3)
                        }, this.heal = {
                            anim: new r(!1, .6, .6, 0, 5, 3)
                        }, this.cold = {
                            anim: new r(!1, .6, .6, 0, 5, 3)
                        }, this.hunger = {
                            anim: new r(!1, .6, .6, 0, 5, 3)
                        }, this.stun = {
                            anim: new r(!1, .6, .6, 0, 1, .75)
                        }, this.update = e => {
                            U.dist(this.r, e) > Ne.LAG_DISTANCE && (this.x = e.x, this.y = e.y), this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, 16 & this.action && !(16 & e.action) && (e.action = g.calculateAction(512 & e.action, 2 & e.action, 4 & e.action, 8 & e.action, !0, 32 & e.action, 64 & e.action, 128 & e.action, 256 & e.action)), this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        };
                        break;
                    case 6:
                        this.particleColors = ["#b0a774", "#9e9668", "#7b7551", "#8d865d"], this.wind = new r(!1, 0, Math.PI / 30, -Math.PI / 30, .06, .06);
                    case 5:
                        this.particleAPI = new H, 5 == this.type && (this.particleColors = ["#077b49", "#066f42", "#06623a"]), this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.ground = new r(!1, .9, 1.05, .9, .2, .2), this.itemsIn = e.itemsIn ?? 0, this.age = e.age ?? 0, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.age = e.age, this.itemsIn = e.itemsIn, this.lastUpdate = +new Date
                        }, this.render = this.getRenderFrom();
                        break;
                    case 3:
                    case 2:
                    case 1:
                        this.action = 0, this.move_anim = new r(!0, 0, 1, -1, 1.5, 1.5), this.hurt = {
                            animation: new r(!0, 0, .7, 0, 5, 5),
                            timestamp: -1,
                            isUpdate: !1
                        }, this.render = this.getRenderFrom(), this.update = e => {
                            U.dist(this.r, e) > Ne.LAG_DISTANCE && (this.x = e.x, this.y = e.y), this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        };
                        break;
                    case 7:
                        this.action = 0, this.hurt = {
                            anim: new r(!1, .6, .6, 0, 5, 3)
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, 16 & this.action && !(16 & e.action) && (e.action = g.calculateAction(512 & e.action, 2 & e.action, 4 & e.action, 8 & e.action, !0, 32 & e.action, 64 & e.action, 128 & e.action, 256 & e.action)), this.action = e.action, 512 & this.action && g.disposeEntity(this, this.type), this.lastUpdate = +new Date
                        }, this.render = D;
                        break;
                    case 8:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.nextParticle = 200 + Math.floor(1300 * Math.random()), this.particleAPI = new H, this.halo = new r(!1, 1, 1.23, 1.18, .02, .02), this.top_anim = new r(!1, 1, 1.03, .98, .18, .18), this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.info = e.info, this.lastUpdate = +new Date
                        }, this.renderDown = P, this.renderUp = L;
                        break;
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        }, this.render = v;
                        break;
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        }, this.render = x;
                        break;
                    case 20:
                    case 21:
                    case 22:
                    case 23:
                    case 24:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        }, this.render = C;
                        break;
                    case 30:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.info = 0, this.action = 0, this.nextParticle = 200 + Math.floor(1300 * Math.random()), this.particleAPI = new H, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        }, this.render = E;
                        break;
                    case 31:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.info = 0, this.action = 0, this.nextParticle = 200 + Math.floor(1300 * Math.random()), this.particleAPI = new H, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.info = e.info, this.lastUpdate = +new Date
                        }, this.render = S;
                        break;
                    case 34:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.lastUpdate = +new Date
                        }, this.render = T;
                        break;
                    case 32:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.particleAPI = new H, this.nextParticle = 200 + Math.floor(1300 * Math.random()), this.halo = new r(!1, 1, 1.23, 1.18, .02, .02), this.top_anim = new r(!1, 1, 1.03, .98, .18, .18), this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.lastUpdate = +new Date
                        }, this.renderDown = N, this.renderUp = k;
                        break;
                    case 33:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.action = e.action, this.lastUpdate = +new Date
                        }, this.render = b;
                        break;
                    case 4:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.lastUpdate = +new Date
                        }, this.render = O;
                        break;
                    case 35:
                        this.hit = {
                            anim: new r(!1, 1, 1, 0, 10, 10),
                            update: !0,
                            angle: 0
                        }, this.update = e => {
                            this.r.x = e.x, this.r.y = e.y, this.angle = e.angle, this.totem_data = e.action, this.lastUpdate = +new Date
                        }, this.render = R
                }
            }
            getRenderFrom() {
                switch (this.type) {
                    case 3:
                        return w;
                    case 2:
                        return f;
                    case 1:
                        return I;
                    case 5:
                    case 6:
                        return y
                }
            }
        }
        class W {
            constructor(e = l.AIR.Id, t = 0) {
                this.item = e, this.count = t
            }
            clear() {
                this.item = l.AIR.Id, this.count = 0
            }
            setItem(e) {
                this.item = e < l.AIR.Id ? l.AIR.Id : e
            }
            setCount(e) {
                this.count = e < 0 ? 0 : e
            }
        }
        class B {
            constructor(e = 14) {
                this.slots = [];
                for (let t = 0; t < e; t++) this.slots.push(new W)
            }
            _getSlot(e) {
                return this.slots.find(t => t.item == e)
            }
            getCount(e) {
                let t = this._getSlot(e);
                return t ? t.count : 0
            }
            newSlot() {
                this.slots.push(new W)
            }
            hasItem(e) {
                return 0 != this.getCount(e)
            }
            addItem(e, t = 1) {
                if (e == l.AIR.Id) return;
                let i = this._getSlot(e),
                    s = this.slots.map(e => e.item == l.AIR.Id ? null : e.item);
                if (i) {
                    let a = s.indexOf(e);
                    this.slots[a].count += t
                } else {
                    let r = s.indexOf(null);
                    this.slots[r].item = e, this.slots[r].count = t
                }
            }
            removeItem(e, t = 1) {
                if (e == l.AIR.Id) return;
                let i = this._getSlot(e);
                i && (i.count -= t, i.count < 1 && i.clear())
            }
            setItem(e, t) {
                if (e == l.AIR.Id) return;
                let i = this._getSlot(e),
                    s = this.slots.map(e => e.item == l.AIR.Id ? null : e.item);
                if (i) {
                    let a = s.indexOf(e);
                    this.slots[a].count = t
                } else {
                    let r = s.indexOf(null);
                    this.slots[r].item = e, this.slots[r].count = t
                }
            }
            fromJson(e) {
                e.forEach((e, t) => {
                    let i = Ne.inventory.slots.find(t => t.item == e.item);
                    if (!i) return this.slots[t].item = e.item, this.slots[t].count = e.count;
                    i.count = e.count
                })
            }
            size() {
                return this.slots.filter(e => e.item != l.AIR.Id).length
            }
            forEach(e) {
                for (let t = 0; t < this.slots.length; t++) e(this.slots[t], t)
            }
        }

        function j() {
            this.set_azerty = function() {
                this.LEFT = 81, this.RIGHT = 68, this.TOP = 90, this.DOWN = 83
            }, this.set_qwerty = function() {
                this.LEFT = 65, this.RIGHT = 68, this.TOP = 87, this.BOTTOM = 83
            }, this.UP = 0, this.DOWN = 1, this._1 = 49, this._2 = 50, this._3 = 51, this._4 = 52, this._5 = 53, this._6 = 54, this._7 = 55, this._8 = 56, this._9 = 57, this._0 = 48, this.CTRL = 17, this.ARROW_LEFT = 37, this.ARROW_RIGHT = 39, this.ARROW_TOP = 38, this.ARROW_BOTTOM = 40, this.SPACE = 32, this.R = 82, this.G = 71, this.V = 86, this.M = 77, this.E = 69, this.B = 66, this.O = 79, this.SHIFT = 16, this.ESC = 27, this.ENTER = 13, this.set_qwerty(), this.keys = Array(255);
            for (var e = 0; e < 255; e++) this.keys[e] = this.UP;
            this.up = function(e) {
                var t = Math.min(e.charCode || e.keyCode, 255);
                this.keys[t] = this.UP
            }, this.down = function(e) {
                var t = Math.min(e.charCode || e.keyCode, 255);
                return t == this.LEFT || t == this.ARROW_LEFT ? this.press_left() : t == this.TOP || t == this.ARROW_TOP ? this.press_top() : t == this.DOWN || t == this.ARROW_DOWN ? this.press_bottom() : t != this.RIGHT && t != this.ARROW_RIGHT || this.press_right(), this.keys[t] = this.DOWN, t
            }, this.press_left = function() {
                this.keys[this.RIGHT] = this.UP, this.keys[this.ARROW_RIGHT] = this.UP
            }, this.press_right = function() {
                this.keys[this.LEFT] = this.UP, this.keys[this.ARROW_LEFT] = this.UP
            }, this.press_bottom = function() {
                this.keys[this.TOP] = this.UP, this.keys[this.ARROW_TOP] = this.UP
            }, this.press_top = function() {
                this.keys[this.BOTTOM] = this.UP, this.keys[this.ARROW_BOTTOM] = this.UP
            }, this.clear_directionnal = function() {
                this.keys[this.RIGHT] = this.UP, this.keys[this.ARROW_RIGHT] = this.UP, this.keys[this.LEFT] = this.UP, this.keys[this.ARROW_LEFT] = this.UP, this.keys[this.TOP] = this.UP, this.keys[this.ARROW_TOP] = this.UP, this.keys[this.BOTTOM] = this.UP, this.keys[this.ARROW_BOTTOM] = this.UP
            }, this.is_left = function() {
                return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT]
            }, this.is_right = function() {
                return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT]
            }, this.is_top = function() {
                return this.keys[this.TOP] || this.keys[this.ARROW_TOP]
            }, this.is_bottom = function() {
                return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM]
            }, this.is_ctrl = function() {
                return this.keys[this.CTRL]
            }, this.is_1 = function() {
                return this.keys[this._1]
            }, this.is_2 = function() {
                return this.keys[this._2]
            }, this.is_3 = function() {
                return this.keys[this._3]
            }, this.is_4 = function() {
                return this.keys[this._4]
            }, this.is_5 = function() {
                return this.keys[this._5]
            }, this.is_6 = function() {
                return this.keys[this._6]
            }, this.is_7 = function() {
                return this.keys[this._7]
            }, this.is_8 = function() {
                return this.keys[this._8]
            }, this.is_9 = function() {
                return this.keys[this._9]
            }, this.is_0 = function() {
                return this.keys[this._0]
            }, this.is_space = function() {
                return this.keys[this.SPACE]
            }, this.is_r = function() {
                return this.keys[this.R]
            }, this.is_m = function() {
                return this.keys[this.M]
            }, this.is_e = function() {
                return this.keys[this.E]
            }, this.is_esc = function() {
                return this.keys[this.ESC]
            }, this.is_g = function() {
                return this.keys[this.G]
            }, this.is_v = function() {
                return this.keys[this.V]
            }, this.is_b = function() {
                return this.keys[this.B]
            }, this.is_o = function() {
                return this.keys[this.O]
            }, this.is_shift = function() {
                return this.keys[this.SHIFT]
            }, this.is_enter = function() {
                return this.keys[this.ENTER]
            }
        }
        class F {
            static onServerWait() {
                +new Date - Ne.menu.server.timestamp > 6500 && (Ne.menu.server.waiting = !1, Ne.menu.server.timestamp = -1, Ne.ServerMessageManager.onMessage("Cannot join the server, try reload page!"))
            }
            static on_failed(e) {
                Ne.menu.server.waiting = !1, Ne.menu.server.timestamp = -1, Ne.ServerMessageManager.onMessage(e)
            }
        }
        class K {
            constructor(e, t, i, s, a, n) {
                this.type = e, this.x = t, this.y = i, this.size = s, this.sizeMultipler = n, this.render = {
                    x: this.x,
                    y: this.y
                }, this.hit = {
                    anim: new r(!0, 0, 1, -1, 20, 20),
                    update: !0,
                    angle: 0
                }, this.id = a, this.info = 0, this.type.includes("berry") && (this.ground = new r(!1, .9, 1.05, .9, .2, .2))
            }
            draw_berries(e, t, i, s, r, n) {
                this.ground.update(i), t.save();
                let o = [];
                switch (this.info) {
                    case 9:
                        o.push([-40, 50.1]);
                    case 8:
                        o.push([-17.5, 55.7]);
                    case 7:
                        o.push([-25.3, 32.1]);
                    case 6:
                        o.push([30.9, 16.3]);
                    case 5:
                        o.push([34.3, -7.3]);
                    case 4:
                        o.push([54.6, 7.3]);
                    case 3:
                        o.push([-18.6, -37.7]);
                    case 2:
                        o.push([2.8, -49]);
                    case 1:
                        o.push([-13, -65.9])
                }
                let l = Ne.spriteClient.getSprite(a.BERRY_SMALL.ID, !0);
                var h = 1 * l.width * this.ground.v,
                    d = 1 * l.height * this.ground.v;
                for (let g = 0; g < o.length; g++) {
                    let m = o[g][0],
                        c = o[g][1];
                    s.drawImage(l, r + -h / 2 + m, n + -d / 2 + c, h, d)
                }
                t.restore()
            }
        }
        class V {
            constructor() {
                this.objects = [], this.width = 1e4, this.height = 1e4, this.cycle = {
                    isNight: !1,
                    time: 0
                }, this.particleAPI = new H, this.decorations = [
                    ["flower4", 2370, 639],
                    ["flower2", 1615, 580],
                    ["flower6", 7410, 2813],
                    ["flower7", 2215, 1729],
                    ["flower4", 306, 5663],
                    ["flower6", 4769, 8382],
                    ["flower6", 6935, 4110],
                    ["flower7", 7309, 7580],
                    ["flower5", 9467, 8872],
                    ["flower2", 337, 3263],
                    ["flower1", 2613, 479],
                    ["flower1", 2451, 6067],
                    ["flower5", 2704, 1419],
                    ["flower5", 3577, 2145],
                    ["flower7", 6021, 1091],
                    ["flower2", 2073, 9096],
                    ["flower6", 5104, 6800],
                    ["flower7", 9334, 9469],
                    ["flower2", 9398, 3732],
                    ["flower2", 1102, 3222],
                    ["flower4", 259, 6334],
                    ["flower2", 6984, 8452],
                    ["flower2", 3159, 9450],
                    ["flower7", 5477, 4193],
                    ["flower3", 2861, 5394],
                    ["flower2", 6291, 5419],
                    ["flower6", 6908, 4905],
                    ["flower3", 4617, 9153],
                    ["flower1", 1814, 3521],
                    ["flower2", 9804, 4004],
                    ["flower2", 1031, 9137],
                    ["flower6", 8416, 2688],
                    ["flower6", 2914, 1751],
                    ["flower1", 2386, 6740],
                    ["flower4", 9627, 7127],
                    ["flower7", 3807, 8774],
                    ["flower1", 9145, 9924],
                    ["flower6", 2819, 3622],
                    ["flower2", 9847, 724],
                    ["flower6", 4654, 5994],
                    ["flower2", 117, 2373],
                    ["flower1", 133, 9711],
                    ["flower6", 447, 434],
                    ["flower1", 630, 4758],
                    ["flower1", 4630, 1563],
                    ["flower4", 8540, 8697],
                    ["flower3", 6974, 3113],
                    ["flower3", 2210, 122],
                    ["flower1", 8798, 6273],
                    ["flower3", 9453, 752],
                    ["flower1", 7693, 954],
                    ["flower7", 3452, 1933],
                    ["flower6", 1601, 1855],
                    ["flower3", 6677, 604],
                    ["flower3", 6141, 7854],
                    ["flower1", 1051, 9822],
                    ["flower4", 1999, 8634],
                    ["flower5", 4976, 5050],
                    ["flower7", 359, 6023],
                    ["flower3", 2044, 9560],
                    ["flower2", 4775, 4e3],
                    ["flower3", 6982, 1232],
                    ["flower3", 8726, 1115],
                    ["flower5", 6902, 8880],
                    ["flower3", 7149, 1930],
                    ["flower7", 1898, 3665],
                    ["flower7", 2042, 7228],
                    ["flower5", 7639, 9988],
                    ["flower3", 2789, 5178],
                    ["flower6", 1777, 7099],
                    ["flower7", 1326, 9543],
                    ["flower2", 7585, 7934],
                    ["flower3", 5564, 825],
                    ["flower6", 5651, 4672],
                    ["flower4", 4963, 5002],
                    ["flower2", 2816, 2318],
                    ["flower3", 5939, 5733],
                    ["flower3", 7631, 6931],
                    ["flower3", 9723, 3774],
                    ["flower6", 4522, 8473],
                    ["flower3", 2514, 1998],
                    ["flower4", 5945, 3191],
                    ["flower6", 121, 1442],
                    ["flower1", 2738, 8037],
                    ["flower1", 3582, 2671],
                    ["flower6", 3388, 3485],
                    ["flower5", 1051, 9382],
                    ["flower3", 7178, 7105],
                    ["flower4", 9926, 3338],
                    ["flower3", 2016, 5059],
                    ["flower3", 1983, 5292],
                    ["flower3", 3019, 8103],
                    ["flower4", 9489, 3743],
                    ["flower3", 3957, 8656],
                    ["flower6", 8065, 4836],
                    ["flower1", 5896, 2735],
                    ["flower6", 6831, 9476],
                    ["flower1", 6788, 3680],
                    ["flower3", 8365, 8923],
                    ["flower6", 7533, 7162],
                    ["flower6", 2622, 3809],
                    ["flower1", 3752, 90],
                    ["flower7", 9052, 8116],
                    ["flower2", 3212, 2594],
                    ["flower2", 8503, 7129],
                    ["flower4", 6232, 4271],
                    ["flower6", 2266, 4378],
                    ["flower5", 7768, 9016],
                    ["flower5", 5266, 2889],
                    ["flower6", 3769, 1865],
                    ["flower3", 7685, 3481],
                    ["flower4", 6143, 7900],
                    ["flower3", 7659, 6025],
                    ["flower4", 6330, 3121],
                    ["flower6", 4135, 1132],
                    ["flower7", 5956, 6547],
                    ["flower3", 9445, 1999],
                    ["flower2", 5035, 8745],
                    ["flower1", 335, 939],
                    ["flower5", 1363, 5360],
                    ["flower2", 5538, 9064],
                    ["flower4", 7298, 6038],
                    ["flower4", 9966, 1923],
                    ["flower6", 3379, 1290],
                    ["flower3", 8742, 4446],
                    ["flower5", 9936, 9269],
                    ["flower7", 5553, 916],
                    ["flower6", 1906, 9510],
                    ["flower6", 1032, 4966],
                    ["flower1", 9157, 6388],
                    ["flower4", 3083, 3648],
                    ["flower1", 1567, 5800],
                    ["flower1", 7470, 612],
                    ["flower1", 7783, 4991],
                    ["flower3", 3895, 3244],
                    ["flower7", 3099, 9736],
                    ["flower1", 6938, 213],
                    ["flower6", 3353, 951],
                    ["flower4", 7342, 6653],
                    ["flower3", 6650, 2318],
                    ["flower4", 354, 1359],
                    ["flower3", 161, 8268],
                    ["flower4", 397, 7104],
                    ["flower5", 8018, 2635],
                    ["flower3", 4297, 5157],
                    ["flower7", 1494, 4078],
                    ["flower6", 5296, 2150],
                    ["flower2", 8707, 7570],
                    ["flower5", 3339, 6633],
                    ["flower1", 2108, 3621],
                    ["flower2", 3993, 430],
                    ["flower2", 703, 3103],
                    ["flower5", 6807, 7735],
                    ["flower6", 5421, 8206],
                    ["flower6", 1185, 1301],
                    ["flower2", 1535, 9308],
                    ["flower3", 4303, 4568],
                    ["flower3", 8258, 3694],
                    ["flower4", 7578, 6161],
                    ["flower5", 7748, 4383],
                    ["flower6", 5451, 2491],
                    ["flower2", 8329, 6429],
                    ["flower5", 3539, 4079],
                    ["flower2", 5628, 5157],
                    ["flower1", 4587, 8838],
                    ["flower2", 3108, 7317],
                    ["flower5", 6800, 8659],
                    ["flower2", 4875, 9873],
                    ["flower2", 4547, 5142],
                    ["flower6", 8209, 6706],
                    ["flower4", 2619, 6213],
                    ["flower5", 3925, 5550],
                    ["flower1", 8342, 5815],
                    ["flower6", 7747, 7256],
                    ["flower4", 1012, 6382],
                    ["flower5", 9210, 7909],
                    ["flower4", 4636, 9844],
                    ["flower5", 374, 2560],
                    ["flower3", 2486, 4108],
                    ["flower7", 1327, 9754],
                    ["flower7", 2768, 5789],
                    ["flower5", 7954, 5601],
                    ["flower5", 7976, 3838],
                    ["flower2", 7681, 6129],
                    ["flower5", 5369, 4084],
                    ["flower5", 2050, 3791],
                    ["flower1", 1846, 9433],
                    ["flower3", 1019, 6508],
                    ["flower7", 1186, 1535],
                    ["flower7", 6396, 7608],
                    ["flower2", 8166, 2342],
                    ["flower7", 3416, 280],
                    ["flower6", 167, 35],
                    ["flower1", 1136, 9507],
                    ["flower3", 3248, 3089],
                    ["flower4", 5319, 4402],
                    ["flower1", 5631, 3031],
                    ["flower4", 8289, 4187],
                    ["flower7", 2664, 2631],
                    ["flower2", 5676, 4140],
                    ["flower4", 1429, 8826],
                    ["flower7", 9346, 1392],
                    ["flower4", 3298, 6305],
                    ["flower6", 1433, 1301],
                    ["flower6", 2184, 4387],
                    ["flower3", 9762, 1710],
                    ["flower2", 7844, 4440],
                    ["flower5", 2418, 2201],
                    ["flower4", 1875, 4242],
                    ["flower6", 7828, 29],
                    ["flower5", 6662, 458],
                    ["flower2", 6346, 1486],
                    ["flower3", 1038, 5154],
                    ["flower4", 2370, 6312],
                    ["flower5", 7817, 5402],
                    ["flower1", 7829, 7415],
                    ["flower1", 8425, 7753],
                    ["flower3", 4508, 4831],
                    ["flower5", 5266, 8995],
                    ["flower3", 387, 1521],
                    ["flower2", 5194, 5434],
                    ["flower2", 9181, 7651],
                    ["flower7", 4647, 5048],
                    ["flower7", 6831, 9667],
                    ["flower3", 9851, 1484],
                    ["flower1", 3992, 7552],
                    ["flower5", 6620, 2595],
                    ["flower6", 9544, 1582],
                    ["flower4", 2616, 4355],
                    ["flower6", 2713, 5403],
                    ["flower4", 1263, 555],
                    ["flower7", 1026, 7541],
                    ["flower5", 2020, 4421],
                    ["flower3", 2976, 9709],
                    ["flower3", 6989, 1245],
                    ["flower3", 1651, 7405],
                    ["flower2", 8640, 364],
                    ["flower1", 8912, 1967],
                    ["flower6", 8011, 1396],
                    ["flower5", 6746, 4663],
                    ["flower5", 5468, 386],
                    ["flower6", 1955, 7644],
                    ["flower2", 8318, 6971],
                    ["flower1", 2325, 3841],
                    ["flower1", 450, 4268],
                    ["flower5", 5652, 1575],
                    ["flower3", 8609, 3755],
                    ["flower6", 288, 7234],
                    ["flower3", 1185, 8046],
                    ["flower1", 8056, 1598],
                    ["flower6", 1326, 2923],
                    ["flower5", 372, 5361],
                    ["flower5", 5985, 9452],
                    ["flower3", 5796, 7049],
                    ["flower2", 8075, 7937],
                    ["flower5", 8325, 2441],
                    ["flower1", 9799, 5534],
                    ["flower3", 3431, 156],
                    ["flower1", 7700, 9479],
                    ["flower4", 9600, 293],
                    ["flower3", 5818, 6482],
                    ["flower2", 7467, 7543],
                    ["flower1", 9643, 320],
                    ["flower4", 7637, 2097],
                    ["flower1", 5492, 5012],
                    ["flower6", 3153, 4564],
                    ["flower1", 9664, 9475],
                    ["flower7", 2438, 7602],
                    ["flower2", 8333, 7429],
                    ["flower5", 8045, 7341],
                    ["flower6", 6724, 6626],
                    ["flower6", 2441, 6966],
                    ["flower2", 433, 5659],
                    ["flower2", 5737, 7258],
                    ["flower5", 1224, 7450],
                    ["flower6", 5626, 3138],
                    ["flower6", 9098, 9990],
                    ["flower3", 1569, 7837],
                    ["flower2", 4528, 8606],
                    ["flower7", 6406, 4559],
                    ["flower5", 2556, 3997],
                    ["flower5", 2856, 8324],
                    ["flower5", 2955, 5725],
                    ["flower6", 387, 3445],
                    ["flower6", 4203, 3770],
                    ["flower5", 1226, 9762],
                    ["flower6", 7186, 4492],
                    ["flower1", 5967, 1400],
                    ["flower4", 7226, 6142],
                    ["flower5", 1367, 5595],
                    ["flower3", 9490, 4399],
                    ["flower2", 3277, 6765],
                    ["flower6", 4141, 2452],
                    ["flower6", 7040, 5646],
                    ["flower3", 7919, 8455],
                    ["flower3", 3015, 4008],
                    ["flower6", 1897, 5976],
                    ["flower2", 6355, 5560],
                    ["flower7", 104, 3073],
                    ["flower5", 4035, 3257],
                    ["flower1", 8082, 220],
                    ["grass3", 3299, 7622],
                    ["grass5", 2300, 2893],
                    ["grass4", 9036, 550],
                    ["grass5", 3779, 1919],
                    ["grass2", 5484, 1667],
                    ["grass3", 6045, 2655],
                    ["grass1", 4471, 7692],
                    ["grass2", 441, 8094],
                    ["grass1", 725, 4110],
                    ["grass3", 3152, 8819],
                    ["grass1", 6931, 4286],
                    ["grass5", 3094, 3904],
                    ["grass6", 4750, 6138],
                    ["grass2", 1522, 5648],
                    ["grass6", 7594, 7079],
                    ["grass3", 5382, 8902],
                    ["grass2", 4287, 2792],
                    ["grass3", 9119, 5257],
                    ["grass3", 3177, 9270],
                    ["grass1", 4587, 6382],
                    ["grass6", 41, 6927],
                    ["grass2", 1767, 3418],
                    ["grass3", 9512, 3843],
                    ["grass3", 3728, 819],
                    ["grass4", 7318, 5136],
                    ["grass6", 3556, 144],
                    ["grass3", 7349, 1437],
                    ["grass4", 4722, 3141],
                    ["grass2", 3158, 1739],
                    ["grass6", 6463, 8189],
                    ["grass3", 2682, 5723],
                    ["grass4", 6345, 7078],
                    ["grass6", 2265, 421],
                    ["grass4", 2415, 6508],
                    ["grass4", 4152, 1446],
                    ["grass1", 6213, 4810],
                    ["grass1", 9815, 2116],
                    ["grass2", 8312, 8826],
                    ["grass6", 3060, 1868],
                    ["grass2", 6611, 2046],
                    ["grass2", 886, 6744],
                    ["grass2", 9070, 1376],
                    ["grass2", 1150, 3794],
                    ["grass6", 6821, 2458],
                    ["grass5", 3465, 6496],
                    ["grass5", 330, 8609],
                    ["grass2", 5236, 4860],
                    ["grass2", 8733, 4816],
                    ["grass6", 528, 1138],
                    ["grass2", 9139, 1952],
                    ["grass5", 5951, 4165],
                    ["grass1", 3057, 1522],
                    ["grass5", 297, 5416],
                    ["grass6", 5494, 1487],
                    ["grass3", 9901, 7030],
                    ["grass3", 274, 5653],
                    ["grass5", 1074, 9157],
                    ["grass2", 6632, 8993],
                    ["grass4", 8655, 4483],
                    ["grass3", 8750, 8712],
                    ["grass4", 5482, 9564],
                    ["grass1", 2065, 2891],
                    ["grass2", 8055, 3661],
                    ["grass5", 2708, 416],
                    ["grass4", 2114, 1371],
                    ["grass1", 9188, 5908],
                    ["grass5", 7260, 1146],
                    ["grass4", 6630, 631],
                    ["grass5", 7110, 6732],
                    ["grass3", 6364, 5237],
                    ["grass5", 6160, 9631],
                    ["grass3", 7106, 4963],
                    ["grass6", 3277, 639],
                    ["grass4", 4393, 2838],
                    ["grass4", 8555, 1120],
                    ["grass2", 4135, 6334],
                    ["grass5", 5297, 9026],
                    ["grass3", 4173, 7417],
                    ["grass5", 6290, 4448],
                    ["grass6", 5933, 4060],
                    ["grass6", 2347, 5965],
                    ["grass1", 3050, 6679],
                    ["grass4", 9244, 8190],
                    ["grass1", 1494, 1823],
                    ["grass3", 2256, 9589],
                    ["grass2", 6116, 8834],
                    ["grass3", 6749, 4749],
                    ["grass4", 2596, 4440],
                    ["grass3", 4378, 736],
                    ["grass1", 3838, 7581],
                    ["grass1", 6810, 3017],
                    ["grass2", 474, 4122],
                    ["grass6", 1356, 4546],
                    ["grass3", 9878, 7877],
                    ["grass5", 4891, 3486],
                    ["grass6", 9135, 6269],
                    ["grass2", 2791, 7893],
                    ["grass5", 4070, 5620],
                    ["grass5", 8344, 338],
                    ["grass2", 7198, 9698],
                    ["grass5", 6986, 9747],
                    ["grass2", 1124, 9015],
                    ["grass4", 643, 2631],
                    ["grass5", 9497, 5673],
                    ["grass4", 4421, 932],
                    ["grass5", 3511, 7648],
                    ["grass2", 1566, 8676],
                    ["grass1", 2706, 2040],
                    ["grass2", 4533, 1143],
                    ["grass2", 1959, 4867],
                    ["grass4", 9270, 1464],
                    ["grass2", 4060, 3368],
                    ["grass6", 9838, 1659],
                    ["grass1", 4789, 9198],
                    ["grass6", 2626, 460],
                    ["grass2", 3962, 807],
                    ["grass3", 9186, 4132],
                    ["grass2", 498, 6557],
                    ["grass6", 8020, 6234],
                    ["grass6", 6640, 4296],
                    ["grass3", 9180, 1070],
                    ["grass2", 3410, 8761],
                    ["grass3", 5906, 5403],
                    ["grass5", 491, 1093],
                    ["grass1", 4530, 8942],
                    ["grass6", 4508, 3983],
                    ["grass6", 3807, 1197],
                    ["grass1", 3635, 9429],
                    ["grass1", 4764, 6029],
                    ["grass1", 6636, 9666],
                    ["grass1", 9565, 8104],
                    ["grass5", 2650, 2080],
                    ["grass3", 2109, 6365],
                    ["grass1", 6141, 3373],
                    ["grass1", 3635, 6476],
                    ["grass3", 6782, 4543],
                    ["grass6", 8729, 6463],
                    ["grass4", 4396, 5238],
                    ["grass1", 19, 4850],
                    ["grass3", 5639, 4629],
                    ["grass3", 1511, 8610],
                    ["grass5", 7296, 664],
                    ["grass1", 8354, 2636],
                    ["grass1", 5863, 7444],
                    ["grass6", 352, 4285],
                    ["grass4", 2784, 9109],
                    ["grass4", 6260, 2519],
                    ["grass2", 5842, 9689],
                    ["grass5", 8722, 2451],
                    ["grass1", 3266, 2606],
                    ["grass6", 2420, 1829],
                    ["grass3", 1134, 681],
                    ["grass5", 9141, 4128],
                    ["grass5", 5134, 8903],
                    ["grass2", 5188, 6850],
                    ["grass2", 1866, 5119],
                    ["grass1", 1638, 9507],
                    ["grass4", 5795, 6534],
                    ["grass6", 6565, 5609],
                    ["grass6", 6712, 6262],
                    ["grass5", 4549, 3681],
                    ["grass3", 4065, 3115],
                    ["grass1", 8205, 6659],
                    ["grass3", 6194, 6365],
                    ["grass4", 329, 9963],
                    ["grass3", 8800, 5869],
                    ["grass5", 6681, 7614],
                    ["grass1", 955, 6714],
                    ["grass3", 3588, 6729],
                    ["grass4", 7972, 8515],
                    ["grass1", 1437, 9364],
                    ["grass3", 4046, 9353],
                    ["grass2", 932, 6690],
                    ["grass6", 6110, 2467],
                    ["grass2", 7104, 9070],
                    ["grass5", 3799, 7322],
                    ["grass6", 7305, 3300],
                    ["grass5", 5038, 6189],
                    ["grass4", 3934, 7633],
                    ["grass3", 3420, 863],
                    ["grass1", 4830, 8203],
                    ["grass6", 65, 2121],
                    ["grass5", 5527, 9237],
                    ["grass6", 5362, 7428],
                    ["grass6", 8886, 9213],
                    ["grass3", 4494, 6762],
                    ["grass5", 3286, 4020],
                    ["grass6", 4904, 8893],
                    ["grass4", 3664, 1297],
                    ["grass2", 6357, 4220],
                    ["grass6", 3606, 8495],
                    ["grass1", 1797, 4719],
                    ["grass1", 9229, 6901],
                    ["grass5", 9547, 3599],
                    ["grass1", 332, 9892],
                    ["grass2", 6572, 103],
                    ["grass2", 5569, 5421],
                    ["grass1", 2288, 1899],
                    ["grass3", 2466, 794],
                    ["grass3", 8770, 9471],
                    ["grass6", 6583, 9973],
                    ["grass1", 4540, 449],
                    ["grass4", 1387, 6747],
                    ["grass1", 7741, 7335],
                    ["grass2", 78, 3402],
                    ["grass3", 423, 1801],
                    ["grass6", 7559, 6092],
                    ["grass6", 1835, 3145],
                    ["grass6", 1335, 6693],
                    ["grass6", 1007, 4287],
                    ["grass1", 2498, 4700],
                    ["grass6", 2580, 1389],
                    ["grass5", 5861, 1112],
                    ["grass3", 1603, 8428],
                    ["grass3", 255, 4729],
                    ["grass5", 6130, 2581],
                    ["grass6", 8358, 2527],
                    ["grass6", 6759, 2490],
                    ["grass4", 2717, 2938],
                    ["grass5", 4314, 2346],
                    ["grass1", 816, 2030],
                    ["grass4", 9232, 3383],
                    ["grass6", 4326, 3485],
                    ["grass5", 6500, 9642],
                    ["grass1", 1913, 87],
                    ["grass5", 5504, 7741],
                    ["grass6", 25, 5647],
                    ["grass3", 6404, 9514],
                    ["grass4", 1122, 3803],
                    ["grass2", 7806, 2154],
                    ["grass4", 7457, 478],
                    ["grass5", 2732, 9800],
                    ["grass3", 7556, 3636],
                    ["grass5", 2041, 7439],
                    ["grass3", 7739, 2133],
                    ["grass3", 7482, 7946],
                    ["grass1", 9531, 6301],
                    ["grass4", 2119, 2040],
                    ["grass3", 975, 7916],
                    ["grass4", 5019, 5324],
                    ["grass3", 4029, 8242],
                    ["grass6", 1734, 4021],
                    ["grass1", 6086, 8098],
                    ["grass3", 7533, 5609],
                    ["grass1", 8758, 2754],
                    ["grass5", 259, 1251],
                    ["grass3", 2767, 8096],
                    ["grass4", 3156, 8633],
                    ["grass6", 970, 6400],
                    ["grass6", 3642, 7395],
                    ["grass1", 3628, 2404],
                    ["grass1", 7934, 4155],
                    ["grass2", 3498, 5462],
                    ["grass6", 8614, 5906],
                    ["grass3", 1040, 7624],
                    ["grass2", 3760, 8728],
                    ["grass5", 9685, 5589],
                    ["grass2", 3976, 6077],
                    ["grass1", 2429, 9720],
                    ["grass4", 9923, 2513],
                    ["grass2", 3826, 8938],
                    ["grass2", 4247, 8087],
                    ["grass6", 347, 3528],
                    ["grass4", 4332, 1770],
                    ["grass5", 6166, 6431],
                    ["grass1", 9231, 425],
                    ["grass4", 3833, 5627],
                    ["grass2", 2875, 548],
                    ["grass1", 8110, 6991],
                    ["grass4", 9150, 6772],
                    ["grass3", 8837, 9490],
                    ["grass6", 8428, 4505],
                    ["grass2", 981, 8620],
                    ["grass1", 6225, 8905],
                    ["grass1", 5404, 9506],
                    ["grass1", 7999, 948],
                    ["grass5", 5209, 4303],
                    ["grass3", 8654, 7734],
                    ["grass3", 1138, 9398],
                    ["grass4", 5908, 1905],
                    ["grass5", 1682, 3832],
                    ["grass6", 7690, 3359],
                    ["grass6", 6180, 836],
                    ["grass4", 8385, 3399],
                    ["grass5", 5951, 7459],
                    ["grass6", 6003, 9101],
                    ["grass4", 5452, 6357],
                    ["grass4", 435, 2344],
                    ["grass2", 6256, 553],
                    ["grass5", 2126, 7366],
                    ["grass4", 1290, 1651],
                    ["grass2", 3179, 935],
                    ["grass5", 3481, 3250],
                    ["grass1", 9416, 7708],
                    ["grass6", 6618, 5201],
                    ["grass6", 6408, 5291],
                    ["grass4", 445, 6638],
                    ["grass3", 9838, 8177],
                    ["grass1", 3811, 4635],
                    ["grass2", 8181, 4026],
                    ["grass1", 2714, 2464],
                    ["grass1", 1174, 8025],
                    ["grass4", 4368, 3242],
                    ["grass3", 2042, 121],
                    ["grass6", 938, 9862],
                    ["grass6", 769, 512],
                    ["grass2", 9784, 6267],
                    ["grass4", 7278, 9182],
                    ["grass6", 6449, 7969],
                    ["grass4", 3896, 9527],
                    ["grass5", 996, 4105],
                    ["grass2", 1972, 3044],
                    ["grass4", 2838, 2442],
                    ["grass6", 6290, 1777],
                    ["grass5", 2292, 3281],
                    ["grass6", 4729, 6668],
                    ["grass2", 8417, 768],
                    ["grass1", 1098, 5391],
                    ["grass5", 8646, 9125],
                    ["grass2", 9988, 4507],
                    ["grass6", 4285, 7015],
                    ["grass1", 7780, 7838],
                    ["grass2", 8732, 7878],
                    ["grass3", 7316, 2213],
                    ["grass4", 9974, 3242],
                    ["grass1", 915, 7652],
                    ["grass2", 6190, 6208],
                    ["grass2", 6396, 9886],
                    ["grass4", 2529, 74],
                    ["grass1", 9521, 3003],
                    ["grass5", 6945, 2471],
                    ["grass4", 747, 110],
                    ["grass5", 12, 788],
                    ["grass3", 2673, 8178],
                    ["grass5", 9932, 7438],
                    ["grass3", 9406, 8256],
                    ["grass5", 2361, 1315],
                    ["grass5", 7408, 562],
                    ["grass3", 9909, 3132],
                    ["grass6", 9823, 3125],
                    ["grass6", 8795, 9105],
                    ["grass6", 6073, 5391],
                    ["grass5", 9032, 8512],
                    ["grass4", 7426, 777],
                    ["grass2", 6312, 6294],
                    ["grass3", 6435, 7812],
                    ["grass2", 2883, 732],
                    ["grass5", 8258, 6649],
                    ["grass4", 9463, 3335],
                    ["grass2", 8549, 7799],
                    ["grass5", 8324, 5625],
                    ["grass5", 84, 6689],
                    ["grass6", 5920, 6629],
                    ["grass1", 3038, 5493],
                    ["grass3", 9476, 2007],
                    ["grass2", 9955, 9070],
                    ["grass1", 8831, 7758],
                    ["grass5", 1384, 8746],
                    ["grass5", 2961, 9143],
                    ["grass3", 8482, 2710],
                    ["grass2", 2757, 6678],
                    ["grass6", 6513, 1561],
                    ["grass1", 48, 4244],
                    ["grass1", 4764, 1741],
                    ["grass6", 4703, 1865],
                    ["grass3", 7231, 3393],
                    ["grass6", 1919, 7176],
                    ["grass2", 7901, 7355],
                    ["grass3", 8234, 191],
                    ["grass3", 4529, 8522],
                    ["grass2", 5068, 3890],
                    ["grass1", 3130, 9842],
                    ["grass3", 3528, 278],
                    ["grass1", 4396, 7957],
                    ["grass1", 471, 4152],
                    ["grass6", 1140, 7422],
                    ["grass5", 8707, 9286],
                    ["grass6", 9759, 8373],
                    ["grass2", 2642, 3075],
                    ["grass6", 4875, 3415],
                    ["grass4", 943, 392],
                    ["grass2", 7244, 1756],
                    ["grass3", 8559, 8093],
                    ["grass2", 3618, 5821],
                    ["grass1", 3833, 784],
                    ["grass5", 5100, 6845],
                    ["grass6", 2503, 5941],
                    ["grass6", 9875, 4985],
                    ["grass4", 2594, 7502],
                    ["grass6", 7946, 3029],
                    ["grass2", 3817, 3509],
                    ["grass2", 1303, 6020],
                    ["grass6", 3493, 677],
                    ["grass2", 3314, 7550],
                    ["grass6", 8323, 5332],
                    ["grass4", 9487, 1584],
                    ["grass5", 1475, 9075],
                    ["grass6", 7550, 6929],
                    ["grass3", 2081, 4937],
                    ["grass3", 213, 7564],
                    ["grass3", 1609, 2996],
                    ["grass6", 5348, 7933],
                    ["grass2", 742, 5123],
                    ["grass4", 9266, 4995],
                    ["grass1", 2469, 4844],
                    ["grass1", 4162, 6800],
                    ["grass5", 1520, 7653],
                    ["grass3", 7739, 514],
                    ["grass3", 2671, 7731],
                    ["grass3", 249, 3473],
                    ["grass5", 4464, 3055],
                    ["grass3", 730, 2510],
                    ["grass4", 2688, 7162],
                    ["grass6", 7402, 6431],
                    ["grass2", 1298, 9559],
                    ["grass4", 7798, 8710],
                    ["grass1", 6320, 5224],
                    ["grass4", 5752, 5822],
                    ["grass1", 6367, 4612],
                    ["grass6", 2063, 7220],
                    ["grass3", 8610, 9180],
                    ["grass2", 439, 9877],
                    ["grass4", 3364, 6868],
                    ["grass2", 8894, 5604],
                    ["grass3", 2061, 2682],
                    ["grass1", 1677, 7076],
                    ["grass4", 1359, 1045],
                    ["grass1", 1281, 4769],
                    ["grass5", 3516, 547],
                    ["grass5", 7075, 3413],
                    ["grass2", 2623, 4597],
                    ["grass4", 8347, 906],
                    ["grass4", 149, 8501],
                    ["grass5", 5443, 6701],
                    ["grass1", 9498, 8043],
                    ["grass5", 2851, 6580],
                    ["grass3", 2329, 2562],
                    ["grass1", 531, 4838],
                    ["grass2", 2086, 6466],
                    ["grass4", 7652, 5316],
                    ["grass1", 1775, 4153],
                    ["grass1", 4585, 44],
                    ["grass3", 1998, 1808],
                    ["grass2", 5503, 6895],
                    ["grass6", 848, 7692],
                    ["grass2", 7191, 1448],
                    ["grass1", 169, 4691],
                    ["grass3", 9376, 2665],
                    ["grass3", 6296, 8834],
                    ["grass5", 4767, 2974],
                    ["grass2", 6259, 2064],
                    ["grass1", 3517, 1282],
                    ["grass3", 3373, 8616],
                    ["grass6", 3805, 759],
                    ["grass1", 8559, 6735],
                    ["grass1", 9158, 1120],
                    ["grass4", 1337, 2197],
                    ["grass1", 2004, 1979],
                    ["grass4", 2888, 1440],
                    ["grass4", 7090, 2181],
                    ["grass3", 7473, 9989],
                    ["grass6", 7716, 6057],
                    ["grass1", 5833, 2882],
                    ["grass6", 9209, 6578],
                    ["grass3", 3512, 61],
                    ["grass1", 6742, 5348],
                    ["grass2", 4971, 5586],
                    ["grass4", 6199, 5768],
                    ["grass6", 6561, 1769],
                    ["grass3", 3195, 8224],
                    ["grass3", 7980, 8385],
                    ["grass6", 7101, 4207],
                    ["grass6", 9509, 7105],
                    ["grass3", 4051, 5770],
                    ["grass2", 7661, 5076],
                    ["grass1", 3440, 8955],
                    ["grass3", 3244, 1031],
                    ["grass2", 180, 464],
                    ["grass4", 4899, 3190],
                    ["grass6", 9425, 54],
                    ["grass1", 5838, 700],
                    ["grass3", 6705, 9733],
                    ["grass6", 8683, 7031],
                    ["grass1", 2439, 4983],
                    ["grass1", 2251, 2542],
                    ["grass4", 8439, 3447],
                    ["grass1", 2836, 9629],
                    ["grass4", 5294, 9412],
                    ["grass3", 5012, 6642],
                    ["grass4", 9992, 950],
                    ["grass3", 1351, 5763],
                    ["grass3", 9576, 3776],
                    ["grass1", 7693, 4173],
                    ["grass1", 8225, 4248],
                    ["grass2", 4164, 2284],
                    ["grass4", 7203, 1849],
                    ["grass1", 7172, 5321],
                    ["grass2", 7955, 2201],
                    ["grass3", 6837, 7777]
                ], this.addableOffset = 5, this.biomes = []
            }
            setWorldBorder(e, t) {
                this.width = e, this.height = t
            }
            setWorld(e) {
                this.setWorldBorder(e.width, e.height), this.biomes = e.biomes;
                for (let t = 0; t < e.objects.length; t++) {
                    let i = e.objects[t],
                        s = new K(i[0], i[1], i[2], i[3], i[4]);
                    this.objects.push(s)
                }
            }
            renderWeather(e, t, i, s) {}
            renderWorldObjects(e, t, i, s) {
                let r = [];
                for (let n = 0; n < this.objects.length; n++) {
                    let o = this.objects[n],
                        l = M.getDistance({
                            x: o.x,
                            y: o.y
                        });
                    l.xDist <= Math.min(2560, window.innerWidth) && l.yDist <= Math.min(1440, window.innerHeight) && r.push(o)
                }
                for (let h = 0; h < r.length; h++) {
                    let d = r[h],
                        g = 0,
                        m = 0,
                        c = 80;
                    if (t.save(), d.hit.update) {
                        d.hit.anim.update(Ne.gameClient.render.delta) && 0 == d.hit.anim.o && (d.hit.update = !1);
                        let _ = (1 - d.hit.anim.v) * i * 600;
                        var p = Math.cos(d.hit.angle) * _,
                            u = Math.sin(d.hit.angle) * _
                    } else p = 0, u = 0;
                    t.translate(d.x + Ne.camera.cam.x, d.y + Ne.camera.cam.y);
                    let I = Ne.spriteClient.getSprite(a[d.type.toUpperCase()].ID, 0 == this.cycle.isNight),
                        {
                            sizeAW: f,
                            sizeAH: y
                        } = .42;
                    if (null != I) {
                        switch (d.type.replace(/[0-9]/g, "")) {
                            case "tree":
                                g = window.treex ?? 1, m = window.treey ?? 6, c = d.sizeAmplifier = 1, f = .42, y = .42;
                                break;
                            case "stone":
                                f = .4, y = .4, g = window.stonex ?? 4, m = window.stoney ?? 4, c = 80 - d.size;
                                break;
                            case "gold":
                                f = .36, y = .36, g = window.stonex ?? 1, m = window.stoney ?? 5;
                                break;
                            case "diamond":
                                f = .36, y = .36;
                                break;
                            case "amethyst":
                                f = .345, y = .345;
                                break;
                            case "berry":
                                f = 1, y = 1
                        }
                        s.drawImage(I, .5 * p + (-I.width * (f / 2) + g), .5 * u + (-I.height * (y / 2) + m), I.width * f, I.height * y), 0 != this.info && d.type.includes("berry") && d.draw_berries(e, t, i, s, p, u), t.restore()
                    }
                }
            }
            clearWorld() {
                for (let e = 0; e < this.objects.length; e++) this.objects = []
            }
            update() {
                this.move_units(Ne.gameClient.entities[0]), this.move_units(Ne.gameClient.entities[1]), this.move_units(Ne.gameClient.entities[2]), this.move_units(Ne.gameClient.entities[3])
            }
            move_units(e, t) {
                for (let i = 0; i < e.length; i++) {
                    let s = e[i];
                    if (s.x != s.r.x || s.y != s.r.y) {
                        64 & s.action && (s.action -= 64);
                        let a = U.get_std_angle(s, s.r) + Math.PI,
                            r = Ne.gameClient.render.delta * (s.info - .5),
                            n = U.build_vector(r, a);
                        U.norm(n) < U.norm(U.get_vector(s, s.r)) ? U.add_vector(s, n) : (32 & s.action && (s.action -= 32), U.copy_vector(s.r, s)), U.dist(s, s.r) > Ne.LAG_DISTANCE && (s.x = s.r.x, s.y = s.r.y)
                    }
                }
            }
        }
        let z = 0,
            X = {};
        X.SOCIAL_DISCORD_BUTTON_IN = z++, X.SOCIAL_DISCORD_BUTTON_OUT = z++, X.SOCIAL_YOUTUBE_BUTTON_IN = z++, X.SOCIAL_YOUTUBE_BUTTON_OUT = z++, X.PLAY_BUTTON_IN = z++, X.PLAY_BUTTON_OUT = z++, X.SERVERS_SELECT_BUTTON_IN = z++, X.SERVERS_SELECT_BUTTON_OUT = z++, X.MENU_CATEGORY_PLAY = z++, X.MENU_CATEGORY_PROFILE = z++, X.MENU_CATEGORY_LEADERBOARD = z++, X.MENU_CATEGORY_LEADERBOARD_IN = z++, X.MENU_CATEGORY_SHOP = z++, X.TV_FEAUTED_VIDEOS_UNDER = z++, X.TV_BODY = z++, X.CHANGELOG = z++, X.PLAY_BACKGROUND = z++, X.COMING_SOON_V1 = z++, X.COMING_SOON_V2 = z++, X.SOCIALS_BACKGROUND = z++, X.LOGO = z++, X.MINIMAP = z++, X.LOADING_BAR_LINE = z++, X.LOADING_BAR_UP = z++, X.LOADING_BG_BAR = z++, X.LOADING_TITLE = z++, X.LOADING_BACKGROUND = z++, X.LOADING_WHEEL = z++;
        let q = X;

        function J(e, t, i, s) {
            let a = Ne.ServerMessageManager;
            if (a.messages.length < 1) return;
            let r = a.animation,
                n = a.messages;
            r.v >= 1 && 0 == a.loop && (a.loop = 1, a.isUpdate = !1, a.timestamp = Date.now()), 1 == a.loop && Date.now() - a.timestamp > 3550 && (a.loop = 2, a.isUpdate = !0), r.v <= 0 && 2 == a.loop && (a.isUpdate = !1, a.rawShift()), a.isUpdate && a.animation.update(i), n.length <= 0 || (t.globalAlpha = r.v, s.drawTextWithShadow(n[0].message, .5 * e.width, 100, "48px"), t.globalAlpha = 1)
        }

        function Q(e) {
            let t = Ne.mouse.evX,
                i = Ne.mouse.evY;
            return t > e.x && t < e.x + e.width && i < e.y + e.height && i > e.y
        }
        class Z {
            constructor(e, t, i) {
                this.index = e, this.x = 0, this.y = 0, this.oldX, this.oldY, this.isDrag = !1, this.id = t, this.image = i, this.width = 200, this.height = 220, this.item = 0, this.count = 0, this.source_width = null == i ? 0 : i.width, this.source_height = null == i ? 0 : i.width
            }
            creation(e, t, i) {
                this.x = e, this.y = t, this.image = i, this.source_width = this.image.width, this.source_height = this.image.height
            }
            update(e, t, i, s) {
                this.image = e, this.item = t, this.count = i, this.index = s, this.source_width = this.image.width, this.source_height = this.image.height
            }
            render(e, t, i, s) {
                t.save(), 0 != Ne.InvEvents.drag && Ne.InvEvents.drag - 1 != this.index && (t.globalAlpha = .6), this.isDrag ? (t.save(), this.image.width = 178, this.image.height = 178, e.drawImage(this.image, this.oldX, this.oldY), t.restore(), this.image.width = 198, this.image.height = 188, this.x = Ne.mouse.evX - this.width / 4, this.y = Ne.mouse.evY - this.height / 4) : (this.image.width = 178, this.image.height = 178, this.x = i.width / 2 - 925 + 91 * s + 355, 0 != Ne.mouse.hovers.item_inventory && Ne.mouse.hovers.item_inventory == this.item ? this.y = i.height - 80 - 2 : this.y = i.height - 80 - 10), e.drawImage(this.image, this.x, this.y), t.restore(), this.image.width = this.source_width, this.image.height = this.source_height
            }
            renderPlus(e, t, i, s, r) {
                t.save();
                let n = Ne.spriteClient.getSprite(a.INV_PLUS.ID, !0);
                r && (t.globalAlpha = .85), t.translate(this.x, this.y), e.drawImage(n, 14.5, -65, 60, 60, !1), t.restore()
            }
            drag() {
                this.oldX = this.x, this.oldY = this.y, this.isDrag = !0, Ne.InvEvents.drag = this.index + 1
            }
            drop() {
                this.isDrag = !1, this.x = this.oldX, this.y = this.oldY, Ne.InvEvents.drag = 0
            }
            renderInfo(e, t, i, s) {
                this.isDrag || (t.save(), this.count > 0 && e.drawText(this.index + 1, this.x + 17, this.y + 20, "20px"), t.textAlign = "right", this.count > 0 && e.drawText("x" + this.count, this.x + this.width / 2 - 15, this.y + this.height / 2 - 30, "21px", "white", !1), t.restore())
            }
            displayInfo(e, t, i, s) {
                if (this.isDrag || 0 == this.item || 0 != Ne.InvEvents.drag) return;
                t.globalAlpha = .7, t.textAlign = "left", t.fillStyle = "black";
                let a = g.getWeaponInfo(this.item),
                    r = e.measureText(a.name, "20px"),
                    n = g.wordSplit(a.description, {
                        maxLength: 30,
                        char: " "
                    }),
                    o = 32 + 20 * (n = n.map(t => ({
                        str: t,
                        measure: e.measureText(t, "18px")
                    }))).length,
                    l = Math.max(r.width, ...n.map(e => e.measure.width)) + 20;
                e.drawRoundRect(this.x, this.y - o - 12, l, o, 5, !0), t.globalAlpha = 1, e.drawText(a.name, this.x + 10, this.y - o + 10, "20px", "white", !1), n.forEach((t, i) => {
                    e.drawText(t.str, this.x + 10, this.y - o + 20 * i + 30, "18px", "gray", !1)
                })
            }
        }
        class ee {
            constructor(e, t, i) {
                this.index = e, this.img = t, this.x = 0, this.y = 0, this.width = 0, this.height = 0, this.isCreated = !1, this.val = null, this.color = null, this.animation = null, this.add = 1 == this.index ? 4 : 0, this.upy = 0
            }
            creation(e, t, i, s, a, r, n) {
                this.isCreated = !0, this.x = e, this.y = t, this.img = i, this.width = this.img.width / 2.5, this.height = this.img.height / 2.5, this.val = s, this.animation = r, this.color = a, this.globs = n, this.upy = -20
            }
            update(e) {
                this.val = e
            }
            render(e, t, i, s, a) {
                this.img && (this.x = i.width / 2 - 520 + 300 * s + 240, this.y = i.height - 140, t.save(), this.val.value <= 60 && (this.animation.update(a), t.globalAlpha = 1 - this.animation.v), this.val.update(a), t.fillStyle = this.color, t.fillRect(this.x - 130, this.y - 20 - this.upy, this.val.renderValue.map(0, 200, 0, 215 + this.add), 30), t.restore(), t.save(), e.drawImage(this.img, this.x, this.y - this.upy, this.width, this.height, !0), t.restore())
            }
        }
        let et = [new ee(1, null), new ee(2, null), new ee(3, null)];

        function ei(e) {
            return e.includes("tree") ? a.MINIMAP_WOOD.ID : e.includes("stone") ? a.MINIMAP_STONE.ID : e.includes("gold") ? a.MINIMAP_GOLD.ID : e.includes("diamond") ? a.MINIMAP_DIAMOND.ID : e.includes("amethyst") ? a.MINIMAP_AMETHYST.ID : e.includes("berry") ? a.MINIMAP_BERRY.ID : "green"
        }

        function es(e) {
            let t = Ne.mouse.evX,
                i = Ne.mouse.evY;
            return t > e.x && t < e.x + e.width && i < e.y + e.height && i > e.y
        }
        let ea = {
            render(e, t, i, s) {
                var r, n, o, h, d, m, c;
                Ne.options.get_value("render", "leaderboard") && function(e, t, i, s) {
                        t.save(), t.fillStyle = "black", t.globalAlpha = .2, s.drawRoundRect(e.width - 250, 20, 230, 280, 15, "white"), t.globalAlpha = .8, s.drawText("Leaderboard", e.width - 135, 45, "30px");
                        for (let a = 1; a <= 10; a++) s.drawText(a, e.width - 235, 60 + 22 * a, "20px", "white", !1);
                        let r = Ne.gameClient.playerList.sort((e, t) => t.score - e.score);
                        for (let n = 0; n < (r.length < 10 ? r.length : 10); n++) {
                            let o = r[n],
                                l = o.id == Ne.myPlayer.id ? "wheat" : "white";
                            s.drawText(o.name.length > 12 ? o.name.slice(0, 12) + "..." : o.name, e.width - 210, 80 + 22 * n, "16px", l, !1), t.textAlign = "right", s.drawText(M.simplifyScore(o.score), e.width - 35, 80 + 22 * n, "16px", l, !1), t.textAlign = "left"
                        }
                        t.restore()
                    }(e, t, 0, s), r = i, n = e, o = t, h = s, Ne.gameClient.inGame && et.forEach((e, t) => {
                        if (e.isCreated) {
                            e.render(h, o, n, t, r);
                            let i = null;
                            0 == t && (i = Ne.gauges.values.health), 1 == t && (i = Ne.gauges.values.food), 2 == t && (i = Ne.gauges.values.cold), i && e.update(i, Ne)
                        } else {
                            let s = 0,
                                l = 0,
                                d = 0,
                                g = 0;
                            0 == t && (s = Ne.spriteClient.getSprite(a.BAR_HEALTH.ID, !0), l = Ne.gauges.values.health, d = "#62a859", g = Ne.gauges.animation.health), 1 == t && (s = Ne.spriteClient.getSprite(a.BAR_FEED.ID, !0), l = Ne.gauges.values.food, d = "#b53217", g = Ne.gauges.animation.food), 2 == t && (s = Ne.spriteClient.getSprite(a.BAR_COLD.ID, !0), l = Ne.gauges.values.cold, d = "#47a1b4", g = Ne.gauges.animation.cold), e.creation(n.width / 2 - 520 + (200 * t + 1), n.height - 140, s, l, d, g)
                        }
                    }), 0 != Ne.buildingsManager.current_building && function(e, t, i, s) {
                        t.save();
                        let a = Ne.myPlayer.obj,
                            r = l.fromId(Ne.buildingsManager.current_building),
                            n = Ne.spriteClient.getSprite(r.objectSpriteId, !0);
                        if (null != n) {
                            if (Ne.buildingsManager.G_MODE) {
                                var o = Math.floor(a.x + 145 * Math.cos(a._angle)),
                                    h = Math.floor(a.y + 145 * Math.sin(a._angle));
                                o = Ne.camera.cam.x + (o - o % 100 + 50), h = Ne.camera.cam.y + (h - h % 100 + 50)
                            } else o = 145 * Math.cos(a._angle) + a.x + Ne.camera.cam.x, h = 145 * Math.sin(a._angle) + a.y + Ne.camera.cam.y;
                            t.save(), s.drawText(Ne.buildingsManager.G_MODE ? "Building method: Grid. Press G to change" : "Building method: Free. Press G to change", .5 * e.width, e.height - 180, "24px", "#e2c340", !0), t.restore(), t.translate(o, h), Ne.buildingsManager.G_MODE || t.rotate(a._angle - Math.PI / 2 + r.offset_angle), t.globalAlpha = .4;
                            let d = r.size_offset;
                            s.drawImage(n, -n.width * (.5 * d), -n.height * (.5 * d), n.width * d, n.height * d)
                        }
                        t.restore()
                    }(e, t, 0, s), Ne.options.get_value("render", "minimap") && function(e, t, i) {
                        let s = e.width,
                            r = e.height,
                            n = Ne.spriteClient.getSprite(a.MINIMAP.ID, !0);
                        if (Ne.bigmap) {
                            i.drawImage(n, .5 * s - .275 * n.width, .5 * r - .275 * n.height, n.width, n.height, !0);
                            let o = n;
                            e.width, e.height, t.save();
                            let l = null;
                            t.save();
                            for (var h = 0; h < Ne.gameClient.world.objects.length; h++) {
                                l = Ne.gameClient.world.objects[h];
                                let d = Ne.spriteClient.getSprite(ei(l.type), !0);
                                i.drawImage(d, -.5 * o.width + (.5 * s - .3 * d.width) + .0415 * l.x + 36, -.5 * o.height + (.5 * r - .3 * d.height) + .0415 * l.y + 36, .35 * d.width, .35 * d.height)
                            }
                            t.restore(), l = Ne.myPlayer.obj, t.beginPath(), t.fillStyle = "white", t.strokeStyle = "black", t.arc(-.25 * o.width + (.5 * s - .3 * n.width) + .0415 * l.x + 51, -.25 * o.height + (.5 * r - .3 * n.height) + .0415 * l.y + 51, 8, 0, 2 * Math.PI), t.fill(), t.stroke(), t.closePath(), l = Ne.marker, t.beginPath(), t.fillStyle = "red", t.arc(-.25 * o.width + (.5 * s - .3 * n.width) + .0415 * l.x + 51, -.25 * o.height + (.5 * r - .3 * n.height) + .0415 * l.y + 51, 10, 0, 2 * Math.PI), t.fill(), t.closePath(), t.restore()
                        } else {
                            let m = {};
                            m.x = s + -(.5 * n.width), m.y = r + -(.5 * n.width), m.width = .5 * n.width, m.height = .5 * n.height, g.isInside(m) ? Ne.mouse.hovers.minimap = 1 : Ne.mouse.hovers.minimap = 0, i.drawImage(n, s + -(.25 * n.width), r + -(.25 * n.width), .5 * n.width, .5 * n.height, !0);
                            let c = e.width / s - 51,
                                _ = e.height / r - 51;
                            t.save(), t.translate(s + -(.495 * n.width) + 20, r + -(.495 * n.height) + 20);
                            let p = null;
                            for (t.save(), h = 0; h < Ne.gameClient.world.objects.length; h++) {
                                p = Ne.gameClient.world.objects[h];
                                let u = Ne.spriteClient.getSprite(ei(p.type), !0);
                                i.drawImage(u, -(.1 * u.width) + -p.x / c, -(.1 * u.height) + -p.y / _, .2 * u.width, .2 * u.height)
                            }
                            t.restore(), p = Ne.myPlayer.obj, t.beginPath(), t.fillStyle = "white", t.arc(-p.x / c, -p.y / _, 3, 0, 2 * Math.PI), t.fill(), t.closePath(), p = Ne.marker, t.beginPath(), t.fillStyle = "red", t.arc(-p.x / c, -p.y / _, 5, 0, 2 * Math.PI), t.fill(), t.closePath(), t.restore()
                        }
                    }(e, t, s), Ne.options.get_value("render", "delays") && function(e, t, i, s) {
                        let a = +new Date;
                        for (let r = 0; r < Ne.delayManager.delays.length; r++) {
                            let n = Ne.delayManager.delays[r],
                                o = 2 * Math.PI / (n[2] / (a - (n[1] + n[2])));
                            t.save(), t.translate(45, e.height - 50 - 112 * r), t.beginPath(), t.lineCap = "round", t.strokeStyle = "wheat", t.lineWidth = 9, t.arc(0, 0, 40, 0, o, !1), t.stroke(), t.restore(), a - n[1] > n[2] && Ne.delayManager.disposeDelay(n)
                        }
                    }(e, t),
                    function(e, t, i) {
                        let s = Ne.craftManager.craftables,
                            a = 0,
                            r = 0;
                        for (let n = 0; n < s.length; n++) {
                            a += 90, n % 5 == 0 && (a = 0, r += 90);
                            let o = Ne.spriteClient.getItemSprite(s[n].id),
                                h = o.width,
                                d = o.height,
                                m = -85 + r,
                                c = 5 + a;
                            if (o && o.width > 0 && o.height > 0) {
                                t.save(), t.translate(m, c), o.width = 178, o.height = 178, Ne.craftManager.in_craft.itemId == l.AIR.Id ? t.globalAlpha = .85 : Ne.craftManager.in_craft.itemId == s[n].id ? t.globalAlpha = 1 : t.globalAlpha = .35;
                                let _ = 0;
                                if (Ne.mouse.hovers.craft_inventory == s[n].id && (_ = 7.5), i.drawImage(o, 0, _), t.restore(), Ne.craftManager.in_craft.itemId != l.AIR.Id && Ne.craftManager.in_craft.itemId == s[n].id) {
                                    t.save(), t.translate(m, c), t.fillStyle = "#047d0c ", t.globalAlpha = .65;
                                    let p = +new Date - Ne.craftManager.in_craft.timestamp,
                                        u = p.map(0, Ne.craftManager.in_craft.time, 0, .5 * o.width),
                                        I = p.map(0, Ne.craftManager.in_craft.time, 0, .5 * o.height);
                                    i.drawRoundRect(-(.5 * u) + .25 * o.width, -(.5 * I) + .25 * o.height, u, I, 15, !0), t.restore()
                                }
                                o.width = h, o.height = d
                            }
                        }(function(e, t, i, s) {
                            let a = 0,
                                r = 0,
                                n = 0;
                            for (let o = 0; o < s.length; o++) {
                                a += 90, o % 5 == 0 && (a = 0, r += 90);
                                let l = -85 + r,
                                    h = 5 + a,
                                    d = {};
                                if (d.x = l, d.y = h, d.width = 85, d.height = 85, es(d)) {
                                    if (0 != Ne.craftManager.in_craft.itemId && s[o].id != Ne.craftManager.in_craft.itemId) return;
                                    t.save(), t.globalAlpha = .7, t.textAlign = "left", t.fillStyle = "black";
                                    let m = g.getWeaponInfo(s[o].id);
                                    n = s[o].id;
                                    let c = {
                                            maxLength: 30,
                                            char: " "
                                        },
                                        _ = i.measureText(m.name, "20px"),
                                        p = g.wordSplit(m.description, c),
                                        u = 32 + 20 * (p = p.map(e => ({
                                            str: e,
                                            measure: i.measureText(e, "18px")
                                        }))).length,
                                        I = Math.max(_.width, ...p.map(e => e.measure.width)) + 20;
                                    i.drawRoundRect(l + 95, h, I, u, 5, !0), t.globalAlpha = 1, i.drawText(m.name, l + 105, h + 20, "20px", "white", !1), p.forEach((e, t) => {
                                        i.drawText(e.str, l + 105, h + 20 * t + 40, "18px", "gray", !1)
                                    }), t.restore();
                                    break
                                }
                            }
                            Ne.mouse.onHover(n, "attach", "craft_inventory")
                        })(0, t, i, s), Ne.craftManager.in_craft.itemId != l.AIR.Id && +new Date - Ne.craftManager.in_craft.timestamp > Ne.craftManager.in_craft.time && Ne.craftManager.on_craft_finished()
                    }(0, t, s), Ne.mouse.states.isDown && Ne.gameClient.inGame && 0 == Ne.InvEvents.drag && Ne.inventory.forEach((e, t) => {
                        e && e.item == l.AIR.Id || 0 == Ne.InvEvents.drag && Q({
                            x: e.SlotManager.x,
                            y: e.SlotManager.y,
                            width: e.SlotManager.width / 2,
                            height: e.SlotManager.height / 2
                        }) && e.SlotManager.drag()
                    }), d = e, m = t, c = s, Ne.inventory.forEach((e, t) => {
                        if (e.SlotManager || (e.SlotManager = new Z(t, Ne.inventory.slots[t].item), e.SlotManager.creation(d.width / 2 + 90 * t + 5, d.height - 90 - 10, Ne.spriteClient.getItemSprite(e.item))), e) {
                            e.SlotManager.update(Ne.spriteClient.getItemSprite(e.item), e.item, e.count, t), e.SlotManager.render(c, m, d, t);
                            let i = {};
                            i.x = e.SlotManager.x, i.y = e.SlotManager.y, i.width = e.SlotManager.width / 2, i.height = e.SlotManager.height / 2;
                            let s = i;
                            Ne.mouse.onHover(e.item, Q(s) ? "attach" : "remove", "item_inventory"), Q(s) && e.SlotManager.displayInfo(c, m, d, t)
                        }
                    }), Ne.inventory.forEach((e, t) => {
                        e.SlotManager && e.SlotManager.renderInfo(c, m, d, t)
                    }), Ne.ServerMessageManager.messages.length > 0 && (Ne.ServerMessageManager.updateMessages(), J(e, t, i, s)), Ne.craftManager.on_state_update(), Ne.market.opened && Ne.market.tail.render();
                let _ = Ne.gameClient.entities[8],
                    p = Ne.gameClient.entities[34],
                    u = Ne.gameClient.entities[30],
                    I = Ne.gameClient.entities[31],
                    f = Ne.gameClient.entities[32],
                    y = Ne.gameClient.entities[33],
                    w = Ne.gameClient.entities[35],
                    D = Ne.myPlayer.obj,
                    v = [],
                    A = !1;
                if (_.length >= 1 && g.getNearest(D, _).dist <= 230 && (A = !0), p.length >= 1 && g.getNearest(D, p).dist <= 160 ? Ne.myPlayer.states.isInWorkbench = !0 : Ne.myPlayer.states.isInWorkbench = !1, u.length >= 1) {
                    let E = g.getNearest(D, u);
                    E.dist <= 140 && v.push(E.entity)
                }
                if (I.length >= 1) {
                    let S = g.getNearest(D, I);
                    S.dist <= 140 && v.push(S.entity)
                }
                if (y.length >= 1) {
                    let b = g.getNearest(D, y);
                    b.dist <= 120 && v.push(b.entity)
                }
                if (f.length >= 1) {
                    let T = g.getNearest(D, f);
                    T.dist <= 220 && T.entity.action instanceof Array && T.entity.action[0][1] >= 1 && (A = !0), T.dist <= 140 && v.push(T.entity)
                }
                if (w.length >= 1) {
                    let O = g.getNearest(D, w);
                    O.dist <= 120 ? Ne.myPlayer.totem_data.entity = O.entity : Ne.myPlayer.totem_data.entity = null
                } else Ne.myPlayer.totem_data.entity = null;
                if (Ne.myPlayer.states.isInFire = !!A, v.length >= 1) {
                    Ne.interfacedBuildings.clear();
                    let R = 1 == v.length ? v[0] : g.getNearest(D, v).entity,
                        x = [],
                        C = 0;
                    switch (R.type) {
                        case 30:
                            C = 0, x.push(l.WHEAT.Id), x.push(l.BERRY.Id);
                            break;
                        case 32:
                            C = 1, x.push(l.WOOD.Id);
                            break;
                        case 31:
                            C = 3, x.push(l.WOOD.Id), x.push(l.FLOUR.Id);
                            break;
                        case 33:
                            for (let L in C = 0, l) "AIR" != L && x.push(l[L].Id)
                    }
                    let P = {};
                    P.type = C, P.renderEntity = R, P.drawingItems = x, P.shouldRenderItemPlus = x.length > 0, Ne.interfacedBuildings.renderData = P, Ne.interfacedBuildings.render(e, t, s)
                } else Ne.interfacedBuildings.clear();
                if (Ne.autofeed.state && (t.save(), t.fillStyle = "black", t.globalAlpha = .7, s.drawRoundRect(e.width - 400, 25, 150, 45, 15, "white"), t.restore(), t.save(), s.drawText("Auto Feed", e.width - 325, 47.5, "28px", "white", !0), t.restore()), Ne.myPlayer.bandage_heals > 0) {
                    t.save(), t.globalAlpha = .75;
                    let k = Ne.spriteClient.getSprite(a.BANDAGE_HEALS_UI.ID, !0),
                        N = .4 * k.width,
                        U = .4 * k.height;
                    s.drawImage(k, e.width - 297.5 + -N / 2, 190 + -U / 2, N, U), t.globalAlpha = 1, s.drawTextWithShadow2(Ne.myPlayer.bandage_heals, e.width - 362.5, 195, "36px", "#eeeef6", !0, "#fee8f7", "24px"), t.restore()
                }
                t.save();
                let H = Ne.spriteClient.getSprite(a.UI_BREAD_SHOP.ID, !0),
                    G = .25 * H.width,
                    Y = .25 * H.height,
                    W = e.width - 305 + -Y / 2,
                    B = 112.5 + -G / 2,
                    j = {};
                j.x = W, j.y = B, j.width = G, j.height = Y, g.isInside(j) ? (t.globalAlpha = .85, Ne.mouse.hovers.shop_button = 1) : Ne.mouse.hovers.shop_button = 0, s.drawImage(H, W, B, G, Y), t.restore(), null == Ne.myPlayer.totem_data.entity && null == Ne.myPlayer.totem_data.players || function(e, t, i, s) {
                    i.save(), i.translate(.5 * t.width, 20);
                    let r = !1,
                        n = Ne.spriteClient.getSprite(a.UI_TOTEM_AVAIBLE.ID, !0);
                    if (null != Ne.myPlayer.totem_data.entity || null != Ne.myPlayer.totem_data.players) {
                        let o = .77 * n.width,
                            l = .7 * n.height;
                        if (null != Ne.myPlayer.totem_data.entity && null == Ne.myPlayer.totem_data.players && (Ne.myPlayer.totem_data.entity.totem_data[0] >= 10 || 1 != Ne.myPlayer.totem_data.entity.totem_data[1])) return n = Ne.spriteClient.getSprite(a.UI_TOTEM_UNAVAIBLE.ID, !0), i.translate(0, 15), s.drawImage(n, -.5 * o, -.5 * l, o, l), void i.restore();
                        let h = {};
                        h.x = .5 * t.width + -o / 2, h.y = 20 + -l / 2, h.width = o, h.height = l, g.isInside(h) && (Ne.mouse.hovers.totem_button = 1, r = !0), s.drawImage(n, -.5 * o, -.5 * l, o, l)
                    }
                    i.restore(), r || (Ne.mouse.hovers.totem_button = 0)
                }(0, e, t, s)
            }
        };
        class er {
            constructor() {
                this.cam = null, this.isAble = !1, this.isUpdatable = !1
            }
            update(e, t, i) {
                var s = Math.max(Math.min(window.innerWidth / 2 - e, -2), 2 - Ne.gameClient.world.width + window.innerWidth),
                    a = Math.max(Math.min(window.innerHeight / 2 - t, -2), 2 - Ne.gameClient.world.height + window.innerHeight);
                let r = {};
                r.x = s, r.y = a, null != this.cam && this.cam.ease(r, Ne.gameClient.render.delta)
            }
            setOwner(e) {
                this.id = e
            }
            setup() {
                this.cam = new m(g.ease_out_quad, 0, .4, 0, 0, window.innerWidth / 2, window.innerHeight / 2, window.innerWidth / 2, window.innerHeight / 2), this.cam.w = window.innerWidth, this.cam.h = window.innerHeight, this.cam.rw = this.cam.w, this.cam.rh = this.cam.h, this.cam.rx = 0, this.cam.ry = 0, this.cam.rdw = 0, this.cam.rdh = 0, this.isUpdatable = !0, this.isAble = !0
            }
        }
        class en {
            constructor() {
                this.scene = 0, this.stop = !1, this.canvas = document.getElementById("gcvs"), this.ctx = this.canvas.getContext("2d"), this.old_now = Date.now(), this.delta = .016, window.addEventListener("resize", () => this.resize()), this.resize(), this.lastRefresh = Date.now(), this.framesTick = 0
            }
            resize() {
                this.canvas.width = window.innerWidth, this.canvas.height = window.innerHeight, Ne.gameClient.setMiddleCanvas(.5 * this.canvas.width, .5 * this.canvas.height)
            }
            onSceneChanged() {
                switch (this.scene) {
                    case 2:
                    case 3:
                    case 0:
                    case -1:
                        document.getElementById("game_menu").style.display = "none";
                        break;
                    case 1:
                        document.getElementById("game_menu").style.display = "flex", Ne.camera = new er, Ne.camera.setup()
                }
            }
            draw_menu(e) {
                this.delta = e, this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
                    function(e, t, i, s) {
                        var r, n, o, l, h;
                        t.save(), t.fillStyle = "#133a2b", t.fillRect(0, 0, e.width, e.height), t.restore(), t.save(), Ne.loader.load_menu_alpha < 1 && Ne.loader.update(Ne), t.globalAlpha = Ne.loader.load_menu_alpha;
                        let d = [];
                        for (let m = 0; m < Ne.fakeWorld.length; m++) {
                            let c = Ne.fakeWorld[m];
                            if (String(c.type).includes("TREE") || String(c.type).includes("STONE")) {
                                d.push(c);
                                continue
                            }
                            let _ = Ne.spriteClient.getSprite(a[c.type].ID, !0),
                                p = .5 * e.width + c.x,
                                u = .5 * e.height + c.y,
                                I = c.width,
                                f = c.height;
                            null != _ && s.drawImage(_, p + g.reverseValue(I), u + g.reverseValue(f), I, f)
                        }
                        t.save(), t.translate(.5 * e.width, .5 * e.height);
                        for (let y = 0; y < Ne.fakeEntities.length; y++) {
                            let w = Ne.fakeEntities[y];
                            8 == w.type && (w.renderDown(e, t, i, s), w.renderUp(e, t, i, s))
                        }
                        t.restore();
                        for (let D = 0; D < d.length; D++) {
                            let v = d[D],
                                A = Ne.spriteClient.getSprite(a[v.type].ID, !0),
                                E = .5 * e.width + v.x,
                                S = .5 * e.height + v.y,
                                b = v.width,
                                T = v.height;
                            null != A && s.drawImage(A, E + g.reverseValue(b), S + g.reverseValue(T), b, T)
                        }
                        let O, R, x, C, L, P, k;
                        t.save(), t.restore(), t.restore(), r = e, n = t, o = i, l = s, O = null, R = .99, x = 1.01, C = 0, L = -41, Ne.menu.server.waiting && (+new Date - Ne.menu.server.timestamp > 2e4 && (Ne.menu.server.waiting = !1, Ne.menu.server.timestamp = -1, Ne.ServerMessageManager.onMessage("Cannot join this server")), Ne.menu.server.angle += .025, Ne.menu.server.angle > 2 * Math.PI && (Ne.menu.server.angle = 0), n.save(), n.translate(.5 * r.width, 80), n.rotate(Ne.menu.server.angle), O = Ne.spriteClient.getUISprite(q.LOADING_WHEEL), l.drawImage(O, -(.35 * O.width), -(.35 * O.height), .7 * O.width, .7 * O.height), n.restore()), Ne.menu.play_button.update && Ne.menu.play_button.animation.update(o) && 0 == Ne.menu.play_button.animation.o && (Ne.menu.play_button.update = !1), P = !1, Ne.menu.title_animation.update(o), n.save(), n.translate(.5 * r.width, .5 * r.height), O = Ne.spriteClient.getUISprite(q.PLAY_BACKGROUND), R = .99, x = 1.01, C = 0, L = -41, n.save(), n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), k = Ne.mouse.hovers.menu_button, O = Ne.spriteClient.getUISprite(k == q.PLAY_BUTTON_OUT ? q.PLAY_BUTTON_IN : q.PLAY_BUTTON_OUT), n.save(), R = .97, x = 1.02, C = 151, L = -4 + Ne.menu.play_button.animation.v, g.isInside({
                            x: .5 * r.width + C + -O.width * (.5 * R),
                            y: .5 * r.height + L + -O.height * (.5 * x),
                            width: O.width * R,
                            height: O.height * x
                        }) && (Ne.mouse.onHover(q.PLAY_BUTTON_OUT, "attach", "menu_button"), P = !0), n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(k == q.MENU_CATEGORY_LEADERBOARD ? q.MENU_CATEGORY_LEADERBOARD_IN : q.MENU_CATEGORY_LEADERBOARD), n.save(), R = .97, x = 1.02, C = .5 * r.width - 155, L = 195, g.isInside({
                            x: .5 * r.width + C + -O.width * (.5 * R),
                            y: .5 * r.height + L + -O.height * (.5 * x),
                            width: O.width * R,
                            height: O.height * x
                        }) && (Ne.mouse.onHover(q.MENU_CATEGORY_LEADERBOARD, "attach", "menu_button"), P = !0), n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(k == q.SERVERS_SELECT_BUTTON_OUT ? q.SERVERS_SELECT_BUTTON_IN : q.SERVERS_SELECT_BUTTON_OUT), n.save(), R = .99, x = 1.06, C = -99, L = -4, g.isInside({
                            x: .5 * r.width + C + -O.width * (.5 * R),
                            y: .5 * r.height + L + -O.height * (.5 * x),
                            width: O.width * R,
                            height: O.height * x
                        }) && (Ne.mouse.onHover(q.SERVERS_SELECT_BUTTON_OUT, "attach", "menu_button"), P = !0), n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(q.CHANGELOG), n.save(), R = .95, x = .92, C = .5 * r.width - 120, L = -110, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(q.TV_FEAUTED_VIDEOS_UNDER), n.save(), R = .85, x = .85, C = .5 * r.width - 110, L = .5 * r.height - 205, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(q.TV_BODY), n.save(), R = .95, x = .95, C = .5 * r.width - 125, L = .5 * r.height - 175.5, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(q.SOCIALS_BACKGROUND), n.save(), R = 1, x = 1, C = .5 * r.width - 100, L = .5 * r.height - 10, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(k == q.SOCIAL_DISCORD_BUTTON_OUT ? q.SOCIAL_DISCORD_BUTTON_IN : q.SOCIAL_DISCORD_BUTTON_OUT), g.isInside({
                            x: .5 * r.width + C + (-O.width * (.5 * R) - 92),
                            y: .5 * r.height + L + (-O.height * (.5 * x) - 40),
                            width: O.width * R,
                            height: O.height * x
                        }) && (Ne.mouse.onHover(q.SOCIAL_DISCORD_BUTTON_OUT, "attach", "menu_button"), P = !0), n.save(), R = 1, x = 1, C = .5 * r.width - 100, L = .5 * r.height - 10, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R) - 92, -O.height * (.5 * x) - 40, O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(k == q.SOCIAL_YOUTUBE_BUTTON_OUT ? q.SOCIAL_YOUTUBE_BUTTON_IN : q.SOCIAL_YOUTUBE_BUTTON_OUT), g.isInside({
                            x: .5 * r.width + C + (-O.width * (.5 * R) - 1),
                            y: .5 * r.height + L + (-O.height * (.5 * x) - 40),
                            width: O.width * R,
                            height: O.height * x
                        }) && (Ne.mouse.onHover(q.SOCIAL_YOUTUBE_BUTTON_OUT, "attach", "menu_button"), P = !0), n.save(), R = 1, x = 1, C = .5 * r.width - 100, L = .5 * r.height - 10, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R) - 1, -O.height * (.5 * x) - 40, O.width * R, O.height * x), n.restore(), O = Ne.spriteClient.getUISprite(q.LOADING_TITLE), n.save(), R = .67 * Ne.menu.title_animation.v, x = .67 * Ne.menu.title_animation.v, C = 0, L = -220, n.translate(C, L), l.drawImage(O, -O.width * (.5 * R), -O.height * (.5 * x), O.width * R, O.height * x), n.restore(), n.restore(), P || (Ne.mouse.hovers.menu_button = 0), Ne.mouse.updateMouse(), (h = t).save(), h.restore(), Ne.ServerMessageManager.messages.length > 0 && (Ne.ServerMessageManager.updateMessages(), J(e, t, i, s))
                    }(this.canvas, this.ctx, this.delta, this)
            }
            draw_game(e) {
                this.delta = e, this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
                    function(e, t, i, s) {
                        if (Ne.gameClient.world.update(), null == Ne.camera || !Ne.camera.isUpdatable) return;
                        Ne.camera.update(Ne.myPlayer.obj.x, Ne.myPlayer.obj.y, Ne.gameClient.render.delta), Ne.mouse.updateMouse(), t.save();
                        for (let r = 0; r < Ne.gameClient.world.biomes.length; r++) {
                            let n = Ne.gameClient.world.biomes[r],
                                o = n[0],
                                l = n[1],
                                h = n[2],
                                d = n[3],
                                m = n[4],
                                c = "black";
                            switch (o) {
                                case "FOREST":
                                    c = Ne.gameClient.world.cycle.isNight ? "#042b30" : "#133a2b";
                                    break;
                                case "WINTER":
                                    c = "white"
                            }
                            t.save(), t.fillStyle = c, t.fillRect(l + Ne.camera.cam.x, h + Ne.camera.cam.y, d, m), t.restore()
                        }
                        t.save();
                        let _ = [];
                        for (let p = 0; p < Ne.gameClient.world.decorations.length; p++) {
                            let u = Ne.gameClient.world.decorations[p],
                                I = {};
                            I.x = u[1], I.y = u[2];
                            let f = M.getDistance(I);
                            f.xDist <= Math.min(2560, window.innerWidth) && f.yDist <= Math.min(1440, window.innerHeight) && _.push(u)
                        }
                        for (let y = 0; y < _.length; y++) {
                            let w = _[y],
                                D = Ne.spriteClient.getSprite(a[w[0].toUpperCase()].ID);
                            null != D && (t.save(), t.translate(w[1] + Ne.camera.cam.x, w[2] + Ne.camera.cam.y), s.drawImage(D, 0, 0, null, null, !0), t.restore())
                        }! function(e, t, i, s) {
                            if (!Ne.buildingsManager.G_MODE || 0 == Ne.buildingsManager.current_building) return;
                            let a = Ne.myPlayer.obj;
                            var r = Math.floor(a.x + 120 * Math.cos(a._angle)),
                                n = Math.floor(a.y + 120 * Math.sin(a._angle));
                            r = Ne.camera.cam.x + (r - r % 100), n = Ne.camera.cam.y + (n - n % 100), t.save(), t.beginPath(), t.lineCap = "round", t.strokeStyle = "wheat", t.lineWidth = 5, t.globalAlpha = .6, t.translate(r, n);
                            for (let o = 0; o <= 800; o += 100) {
                                t.moveTo(o, 0), t.lineTo(o, 100);
                                for (let l = 0; l <= 800; l += 100) t.moveTo(0, l), t.lineTo(100, l)
                            }
                            for (let h = -800; h <= 0; h += 100) {
                                t.moveTo(h, 0), t.lineTo(h, 100);
                                for (let d = -800; d <= 0; d += 100) t.moveTo(0, d), t.lineTo(100, d)
                            }
                            t.stroke(), t.restore()
                        }(0, t);
                        let v = [4, 7, 6, 5, 8, 9, 2, 0, 1, 3, 34, 33, 32, 20, 21, 22, 23, 24, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 35, 30, 31];
                        for (let A = 0; A < v.length; A++) {
                            let E = Ne.gameClient.entities[v[A]];
                            for (let S = 0; S < E.length; S++) {
                                let b = E[S];
                                if (Ne.myPlayer.obj && b.id != Ne.myPlayer.obj.id && (M.distanceSqrt(b.r.x, b.r.y, Ne.myPlayer.obj.r.x, Ne.myPlayer.obj.r.y) >= (0 == b.type ? 1298 : 1350) || 512 & b.action)) {
                                    g.disposeEntity(b, b.type);
                                    continue
                                }
                                8 == b.type || 32 == b.type ? b.renderDown(e, t, i, s) : b.render(e, t, i, s)
                            }
                        }
                        for (let T = 0; T < Ne.gameClient.entities[8].length; T++) Ne.gameClient.entities[8][T].renderUp(e, t, i, s);
                        for (let O = 0; O < Ne.gameClient.entities[32].length; O++) Ne.gameClient.entities[32][O].renderUp(e, t, i, s);
                        Ne.gameClient.world.renderWorldObjects(e, t, i, s), t.restore(), Ne.dayNight.isUpdate && (Ne.dayNight.opacity.update(i) && 0 == Ne.dayNight.opacity.o || 0 == Ne.dayNight.opacity.v) && (Ne.dayNight.isUpdate = !1), t.save(), t.fillStyle = "#020b24", t.globalAlpha = Ne.dayNight.opacity.v, t.fillRect(0, 0, window.innerWidth, window.innerHeight), t.restore(), t.restore();
                        for (let R = 0; R < Ne.gameClient.entities[0].length; R++) Ne.gameClient.entities[0][R].draw_text();
                        ea.render(e, t, i, s), Ne.debugMode && Ne.debugger.update(e, t, i, s)
                    }(this.canvas, this.ctx, this.delta, this)
            }
            draw_loading(e) {
                this.delta = e, this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
                    function(e, t, i, s) {
                        Ne.loader.update(Ne), t.fillRect(0, 0, e.width, e.height), t.fillStyle = "#133a2b", t.save(), t.globalAlpha = Ne.loader.load_menu_alpha;
                        for (let r = 0; r < Ne.fakeWorld.length; r++) {
                            let n = Ne.fakeWorld[r],
                                o = Ne.spriteClient.getSprite(a[n.type].ID, !0),
                                l = .5 * e.width + n.x,
                                h = .5 * e.height + n.y,
                                d = n.width,
                                m = n.height;
                            null != o && s.drawImage(o, l + g.reverseValue(d), h + g.reverseValue(m), d, m)
                        }
                        let c = Ne.loader.progress.map(0, 100, 0, 732),
                            _ = Ne.spriteClient.getUISprite(q.LOADING_BAR_LINE),
                            p = c,
                            u = 1.1 * _.height;
                        t.translate(.5 * e.width, .5 * e.height + 50), t.save(), t.translate(-115, .103 * e.height), s.drawImage(_, -_.width / 4 + -(-(.25 * p) / p), -(.5 * u), 1 * p, 1 * u), t.restore(), t.save(), _ = Ne.spriteClient.getUISprite(q.LOADING_BAR_UP), t.translate(0, .1 * e.height), s.drawImage(_, -(.375 * _.width), -(.375 * _.height), .75 * _.width, .75 * _.height), t.save(), t.translate(0, -65), t.rotate(Ne.loader.wheel.angle), _ = Ne.spriteClient.getUISprite(q.LOADING_WHEEL), s.drawImage(_, -(.35 * _.width), -(.35 * _.height), .7 * _.width, .7 * _.height), t.restore(), t.translate(0, -250), _ = Ne.spriteClient.getUISprite(q.LOADING_TITLE), s.drawImage(_, -(.4 * _.width), -(.4 * _.height), .8 * _.width, .8 * _.height), t.restore(), t.restore(), t.save(), t.translate(75, 10), s.drawText("Made by EvelTeam", 0, 0, "18px", "wheat", !0), t.restore()
                    }(this.canvas, this.ctx, this.delta, this)
            }
            drawImageColorTransition(e, t, i, s, a, r = !1, n = "#020b24") {
                var o = document.createElement("canvas"),
                    l = o.getContext("2d");
                return o.width = s, o.height = a, l.drawImage(e, 0, 0, s, a), l.globalCompositeOperation = "source-in", l.fillStyle = n, l.fillRect(0, 0, o.width, o.height), o
            }
            drawImage(e, t, i, s, a, r = !1) {
                try {
                    if (!e) return;
                    let n = r ? -e.width / 4 + t : t,
                        o = r ? -e.height / 4 + i : i;
                    s || (s = e.width / 2), a || (a = e.height / 2), this.ctx.drawImage(e, n, o, s, a)
                } catch (l) {
                    console.log("[Famish/Errors] Error with drawing image!", l)
                }
            }
            drawTextWithShadow2(e, t, i, s = "20px", a = "white", r = !0, n = "black", o = 7) {
                this.ctx.save(), r && (this.ctx.textAlign = "center", this.ctx.textBaseline = "middle"), this.ctx.font = s + ' "Baloo Paaji", Verdana, sans-serif', this.ctx.strokeStyle = "#fee8f7", this.ctx.lineWidth = 1, this.ctx.strokeText(e, t, i), this.ctx.restore(), this.drawText(e, t, i, s, a, r)
            }
            drawTextWithShadow(e, t, i, s = "20px", a = "white", r = !0, n = "black", o = 7) {
                this.ctx.save(), r && (this.ctx.textAlign = "center", this.ctx.textBaseline = "middle"), this.ctx.font = s + ' "Baloo Paaji", Verdana, sans-serif', this.ctx.shadowColor = "black", this.ctx.shadowBlur = 7, this.ctx.lineWidth = 5, this.ctx.strokeText(e, t, i), this.ctx.restore(), this.drawText(e, t, i, s, a, r)
            }
            drawCursedText(e, t, i, s = "20px", a = "white", r = !0, n, o) {
                this.ctx.save(), r && (this.ctx.textAlign = "center", this.ctx.textBaseline = "middle"), this.ctx.font = s + ' "Baloo Paaji", Verdana, sans-serif', this.ctx.lineWidth = n, this.ctx.strokeStyle = o, this.ctx.strokeText(e, t, i), this.ctx.restore(), this.drawText(e, t, i, s, a, r)
            }
            drawText(e, t, i, s = "20px", a = "white", r = !0) {
                this.ctx.save(), r && (this.ctx.textAlign = "center", this.ctx.textBaseline = "middle"), this.ctx.font = s + ' "Baloo Paaji", Verdana, sans-serif', this.ctx.fillStyle = a, this.ctx.fillText(e, t, i), this.ctx.restore()
            }
            drawRoundRect(e, t, i, s, a = 5, r = !0, n = !1) {
                if (this.ctx.save(), "number" == typeof a) a = {
                    tl: a,
                    tr: a,
                    br: a,
                    bl: a
                };
                else {
                    let o = {
                        tl: 0,
                        tr: 0,
                        br: 0,
                        bl: 0
                    };
                    for (let l in o) a[l] = a[l] || o[l]
                }
                this.ctx.beginPath(), this.ctx.moveTo(e + a.tl, t), this.ctx.lineTo(e + i - a.tr, t), this.ctx.quadraticCurveTo(e + i, t, e + i, t + a.tr), this.ctx.lineTo(e + i, t + s - a.br), this.ctx.quadraticCurveTo(e + i, t + s, e + i - a.br, t + s), this.ctx.lineTo(e + a.bl, t + s), this.ctx.quadraticCurveTo(e, t + s, e, t + s - a.bl), this.ctx.lineTo(e, t + a.tl), this.ctx.quadraticCurveTo(e, t, e + a.tl, t), this.ctx.closePath(), r && this.ctx.fill(), n && this.ctx.stroke(), this.ctx.restore()
            }
            drawSmoothCube(e, t, i, s, a) {
                var r = Math.PI / 180;
                i - e - 2 * a < 0 && (a = (i - e) / 2), s - t - 2 * a < 0 && (a = (s - t) / 2), this.ctx.beginPath(), this.ctx.moveTo(e + a, t), this.ctx.lineTo(i - a, t), this.ctx.arc(i - a, t + a, a, 270 * r, 360 * r, !1), this.ctx.lineTo(i, s - a), this.ctx.arc(i - a, s - a, a, 0 * r, 90 * r, !1), this.ctx.lineTo(e + a, s), this.ctx.arc(e + a, s - a, a, 90 * r, 180 * r, !1), this.ctx.lineTo(e, t + a), this.ctx.arc(e + a, t + a, a, 180 * r, 270 * r, !1), this.ctx.closePath()
            }
            drawRotatedImage(e, t, i, s) {
                this.ctx.translate(t, i), this.ctx.rotate(s), this.ctx.drawImage(e, -(.5 * e.width), -(.5 * e.height))
            }
            measureText(e, t = "20px") {
                this.ctx.save(), this.ctx.font = t + ' "Baloo Paaji", Verdana, sans-serif';
                let i = this.ctx.measureText(e);
                return this.ctx.restore(), i
            }
        }
        class eo {
            constructor(e, t, i) {
                this.value = e, this.min = t, this.max = i, this.renderValue = e
            }
            update(e) {
                this.value < this.min && (this.value = this.min), this.value > this.max && (this.value = this.max), (this.renderValue < 0 || this.renderValue > 200) && (this.renderValue = this.value);
                let t = 2 * e;
                t >= 1 && (t = .016), this.renderValue = (1 - t) * this.renderValue + t * this.value
            }
        }
        class el {
            constructor() {}
            static getKicked(e = "unknown", t = !1) {
                t || Ne.networkClient.sendJSON([3, e]), Ne.networkClient.websocket.close(), Ne.gameClient.onServerDisconnect(), Ne.ServerMessageManager.onMessage("Kicked: " + e)
            }
        }
        class eh {
            constructor() {}
            static saveUUID(e) {
                localStorage.setItem("uuid_data", JSON.stringify({
                    timestamp: +new Date,
                    uuid: e
                }))
            }
            static loadUUID() {
                let e = localStorage.getItem("uuid_data");
                return null == e ? null : JSON.parse(e)
            }
            static onHandshakeAllowed(e) {
                function t(e, t, i = 126) {
                    for (var s = (e = String(e)).toString().split(""), a = 0; a < s.length; a++) s[a].charCodeAt(0) <= i && (s[a] = String.fromCharCode((s[a].charCodeAt(0) + t) % i));
                    return s.join("")
                }
                let i = eh.loadUUID();
                i && null != i.uuid || eh.saveUUID(M.uuidv4());
                let s = 2e3 * e[1] / 5e3;
                Ne.networkClient.sendJSON([0, document.getElementById("nickname").value, t(255 * Ne.CLIENT_VERSION, 121), eh.loadUUID().uuid, [window.innerWidth, window.innerHeight], g.reverseStr(t(s, 58))])
            }
            static onBoundReponse(e) {
                console.log("[Famishs/Pong] Your ping is: " + (+new Date - e[1]) + " ms")
            }
            static onServerJoin(e) {}
            static onStunUpdate(e) {
                let t = e[0];
                Ne.gameClient.entities[0].find(e => e.id == t).stunned = !0
            }
            static onHandshakeResponse(e) {
                Ne.myPlayer.id = e[0][0], Ne.gameClient.playerList = e[0][1];
                let t = {};
                t.id = Ne.myPlayer.id, t.score = e[0][3], t.name = e[0][2];
                let i = t;
                Ne.gameClient.playerList = Ne.gameClient.playerList.filter(e => e.id != i.id);
                let s = {
                    type: 0
                };
                s.id = Ne.myPlayer.id, s.x = e[0][7], s.y = e[0][8];
                let a = new Y(s);
                Ne.gameClient.entities[0].push(a), Ne.myPlayer.obj = a, Ne.camera = new er, Ne.camera.setOwner(Ne.myPlayer.id), Ne.camera.setup(), Ne.gameClient.playerList.push(i), Ne.viewPort.width = e[0][5], Ne.viewPort.height = e[0][6], this.onTimeUpdate([e[0][4]]), Ne.gameClient.world.setWorld(e[0][9]), Ne.gauges.values.health.value = e[0][10][0], Ne.gauges.values.food.value = e[0][10][1], Ne.gauges.values.cold.value = e[0][10][2], Ne.gameClient.render.scene = 2, Ne.gameClient.render.onSceneChanged(), Ne.gameClient.onServerJoined(), Ne.gameClient.inGame = !0, Ne.craftManager.crafts = e[0][11], Ne.autofeed.state = e[0][12], Ne.craftManager.on_crafts_updated(), Ne.menu.server.timestamp = -1, Ne.menu.server.waiting = !1, Ne.mouse.hovers.menu_button = 0, Ne.keyboard.reset(), Ne.mouse.reset(), Ne.market.tail.on_enable(), Ne.myPlayer.bandage_heals = 0, e[0][13] && (Ne.myPlayer.totem_data = {
                    players: e[0][13][0],
                    leader: e[0][13][0][0][0],
                    locked: e[0][13][1],
                    entity: null
                }, g.update_totem_ui())
            }
            static onEntityHitten(e = []) {
                g.hitten(e)
            }
            static onEntityRemove(e = []) {
                let t = e[0][0],
                    i = e[0][1];
                if (!Ne.gameClient.entities[t].find(e => e.id == i)) return console.log("[Famishs/EntityDispose] Entity cannot be disposed , id: " + i);
                let s = Ne.gameClient.entities[t].filter(e => e.id != i),
                    a = {};
                a.id = i, Ne.gameClient.entities[t] = s, g.disposeEntity(a, t)
            }
            static onEntityUpdate(e = []) {
                for (let t of e) {
                    let i = {};
                    i.type = t[0], i.id = t[1] | t[2] << 8, i.angle = Math.PI * t[3] / 255, i.x = t[4] | t[5] << 8, i.y = t[6] | t[7] << 8, i.action = t[8], i.info = t[9];
                    let s = i;
                    if (512 & s.action) return void g.disposeEntity(s, s.type);
                    switch (s.type) {
                        case 0:
                            if (g.isPlayerExists(s.id)) {
                                let a = g.getPlayer(s.id);
                                a.update(s), a.right = t[10][0], a.hat = t[10][1], s.id != Ne.myPlayer.id || Ne.myPlayer.obj || (Ne.myPlayer.obj = a)
                            } else {
                                let r = {};
                                r.type = s.type, r.id = s.id, r.x = s.x, r.y = s.y, r.angle = s.angle, r.owner = null, r.info = s.info;
                                let n = new Y(r);
                                n.right = t[10][0], n.hat = t[10][1], Ne.gameClient.entities[0].push(n)
                            }
                            break;
                        case 5:
                        case 6:
                            if (g.isEntityAppeared(s.id, s.type)) {
                                let o = g.getEntity(s.id, s.type);
                                if (!o) return;
                                let l = {};
                                l.x = s.x, l.y = s.y, l.angle = s.angle, l.itemsIn = t[8], l.age = t[9], o.update(l)
                            } else {
                                let h = {};
                                h.type = s.type, h.id = s.id, h.x = s.x, h.y = s.y, h.angle = s.angle, h.itemsIn = t[8], h.age = t[9];
                                let d = new Y(h);
                                Ne.gameClient.entities[s.type].push(d)
                            }
                            break;
                        case -6: {
                            let m = Ne.gameClient.world.objects.find(e => e.id == s.id);
                            if (!m) return console.log("tf?");
                            m.info = s.action;
                            break
                        }
                        default:
                            if (g.isEntityAppeared(s.id, s.type)) {
                                let c = g.getEntity(s.id, s.type);
                                if (!c) return;
                                c.update(s)
                            } else {
                                let _ = {};
                                _.type = s.type, _.id = s.id, _.x = s.x, _.y = s.y, _.angle = s.angle, _.owner = null, _.info = s.info;
                                let p = new Y(_);
                                Ne.gameClient.entities[s.type].push(p)
                            }
                    }
                }
            }
            static onPlayerJoin(e) {
                Ne.gameClient.playerList.find(t => t.id == e[0][0]) || Ne.gameClient.playerList.push({
                    id: e[0][0],
                    name: e[0][1],
                    score: e[0][2]
                })
            }
            static onPlayerDied(e) {
                let t = e[0],
                    i = Ne.gameClient.playerList.filter(e => e.id != t);
                Ne.gameClient.playerList = i;
                let s = Ne.gameClient.entities[0].filter(e => e.id != t);
                Ne.gameClient.entities[0] = s
            }
            static onLeaderboardUpdate(e = []) {
                for (let t = 0; t < e[0].length; t++) {
                    let i = g.getPlayerInfo(e[0][t][0]);
                    if (!i) return console.log("[Famishs/Errors] Leaderboard player not found PLEASE REPORT IT TO ADMINISTRATION!");
                    i.score = e[0][t][1]
                }
            }
            static onChat(e = []) {
                let t = e[0],
                    i = e[1],
                    s = g.getEntity(t, 0);
                if (!s) return console.log("[AsyncChat] Errored , couldnt find player.");
                s.text.push(i)
            }
            static onKicked(e = "unknown") {
                Ne.camera.isUpdatable = !1, console.log("[Famishs.io/KICKED] " + e), el.getKicked(e, !0)
            }
            static onInventoryUpdate(e = []) {
                Ne.inventory.fromJson(e[0]), Ne.craftManager.in_craft.itemId == l.AIR.Id && Ne.craftManager.get_craftables()
            }
            static onInventoryItemRemove(e = []) {
                let t = e[0],
                    i = Ne.inventory.slots.filter(e => e.item != t);
                Ne.inventory.slots = i, Ne.inventory.newSlot()
            }
            static onCraftResponse(e = []) {
                let t = e[0],
                    i = 1e3 * e[1];
                    Settings.AutoCraft.id = t;
                Ne.craftManager.set_in_craft(t, i), Ne.buildingsManager.current_building = 0, Ne.mouse.hovers.plus_hover = 0, Ne.mouse.hovers.craft_inventory = 0, Ne.mouse.hovers.item_drop = 0, Ne.mouse.hovers.storage_hover = 0
            }
            static onServerMessage(e = []) {
                Ne.ServerMessageManager.onMessage(e[0])
            }
            static onGaugesUpdate(e = []) {
                Ne.gauges.values.food.value = e[0][0], Ne.gauges.values.cold.value = e[0][1]
            }
            static onHealthUpdate(e) {
                Ne.gauges.values.health.value = e[0]
            }
            static onStateUpdated(e = []) {
                let t = g.getEntity(e[1], e[0]);
                t && (t.hurt.update = !0, t.hurt.type = e[2])
            }
            static onTimeUpdate(e) {
                let t = e[0];
                t && 0 == Ne.dayNight.opacity.v && (Ne.dayNight.isUpdate = !0), !t && Ne.dayNight.opacity.v >= .5 && (Ne.dayNight.isUpdate = !0), Ne.dayNight.isNight = t
            }
            static onPrediction(e) {
                Ne.drawShit = e
            }
            static onTotemDataCallback(e = []) {
                switch (e[0]) {
                    case 0: {
                        let t = e[1],
                            i = {};
                        i.players = t, i.leader = !0, i.locked = 1, Ne.myPlayer.totem_data = i, g.update_totem_ui();
                        break
                    }
                    case 3: {
                        let s = e[1],
                            a = {};
                        a.players = s, a.leader = !1, a.locked = 1, Ne.myPlayer.totem_data = a, g.update_totem_ui(), Ne.ServerMessageManager.onMessage("You joined a team");
                        break
                    }
                    case 5: {
                        let r = e[1];
                        switch (Ne.myPlayer.totem_data = {
                                players: [],
                                leader: !1,
                                locked: 1
                            }, r) {
                            case 0:
                                Ne.ServerMessageManager.onMessage("You left the team");
                                break;
                            case 1:
                                Ne.ServerMessageManager.onMessage("Totem destroyed")
                        }
                        g.clear_team();
                        break
                    }
                    case 4: {
                        let n = e[1];
                        Ne.myPlayer.totem_data.locked = n, g.update_totem_ui();
                        break
                    }
                    case 6:
                        Ne.ServerMessageManager.onMessage("You left the team"), g.clear_team();
                        break;
                    case 1: {
                        let o = e[1],
                            l = e[2],
                            h = e[3],
                            d = g.getPlayerInfo(l);
                        if (null != d && (h = d.name), Ne.ServerMessageManager.onMessage(h + " " + (1 == o ? "left" : "joined") + " the team"), 1 == o) {
                            let m = Ne.myPlayer.totem_data.players.filter(e => e[0] != l);
                            Ne.myPlayer.totem_data.players = m
                        } else Ne.myPlayer.totem_data.players.push([l, 0]);
                        g.update_totem_ui()
                    }
                }
            }
        }
        class ed {
            constructor() {}
            static onPacketReceive(e) {
                let t = e.slice(1);
                switch (e[0]) {
                    case 0:
                        eh.onHandshakeAllowed(t);
                        break;
                    case 2:
                        eh.onKicked(e[1]);
                        break;
                    case 3:
                        eh.onHandshakeResponse(t);
                        break;
                    case 4:
                        eh.onEntityUpdate(t[0]);
                        break;
                    case 5:
                        eh.onInventoryUpdate(t);
                        break;
                    case 6:
                        eh.onInventoryItemRemove(t);
                        break;
                    case 7:
                        eh.onLeaderboardUpdate(t);
                        break;
                    case 8:
                        eh.onPlayerJoin(t);
                        break;
                    case 9:
                        eh.onPlayerDied(t);
                        break;
                    case 10:
                        eh.onServerMessage(t);
                        break;
                    case 12:
                        eh.onHealthUpdate(t);
                        break;
                    case 11:
                        eh.onGaugesUpdate(t);
                        break;
                    case 13:
                        eh.onTimeUpdate(t);
                        break;
                    case 14:
                        eh.onEntityRemove(t);
                        break;
                    case 15:
                        eh.onEntityHitten(t);
                        break;
                    case 16:
                        eh.onStateUpdated(t);
                        break;
                    case 17:
                        eh.onBoundReponse(t);
                        break;
                    case 18:
                        eh.onCraftResponse(t);
                        break;
                    case 19:
                        eh.onPrediction(t);
                        break;
                    case 20:
                        Ne.buildingsManager.on_build_response(t[0]);
                        break;
                    case 21:
                        Ne.delayManager.on_delay(t);
                        break;
                    case 23:
                        Ne.market.tail.update_item_prices(t[0]);
                        break;
                    case 24:
                        eh.onChat(t);
                        break;
                    case 25:
                        Ne.myPlayer.bandage_heals = t[0];
                        break;
                    case 26:
                        eh.onTotemDataCallback(t);
                        break;
                    case 27:
                        eh.onStunUpdate(t);
                        break;
                    case 22:
                        let i = t[0],
                            s = t[1],
                            a = t[2];
                        Ne.console.send_message(a, i, s)
                }
            }
        }
        class eg {
            static on_execute(e, t) {
                switch (e) {
                    case "export":
                        Ne.console.send_message("white", "Client configuration", JSON.stringify(Ne.options.options));
                        break;
                    case "import":
                        try {
                            let i = "";
                            for (let s = 0; s < t.length; s++) i += t[s] + " ";
                            let a = JSON.parse(i);
                            Ne.options.options = a, Ne.console.send_message("limegreen", a[0].configuration_name, a[0].configuration_message)
                        } catch (r) {
                            return void Ne.console.send_message("orangered", "Settings Loader Failed", "JSON Parse failed , please validated your config with any JSON Validator")
                        }
                        break;
                    case "reset":
                        break;
                    case "help":
                        Ne.console.send_message("limegreen", "Here list of all commands:", ""), Ne.console.send_message("gray", "Server:", "* - requires to be authorizated as administrator"), Ne.console.send_message("gold", null, "auth [password] - login to server as administrator*"), Ne.console.send_message("gold", null, "broadcast [message] - send title message to all players in server*"), Ne.console.send_message("gold", null, "list - show list of all players");
                        break;
                    case "list":
                        Ne.console.send_message("limegreen", "Player List", "players in server: " + Ne.gameClient.playerList.length);
                        for (let n = 0; n < Ne.gameClient.playerList.length; n++) {
                            let o = Ne.gameClient.playerList[n];
                            Ne.console.send_message("gold", null, o.name + " | " + o.id)
                        }
                        break;
                    case "clear":
                        document.getElementsByClassName("consoleOutput")[0].innerHTML = "", Ne.console.send_message("gold", "Console clearned.", "");
                        break;
                    case "set_uuid":
                        let l = t[0];
                        eh.saveUUID(l), Ne.console.send_message("gold", "UUID Saved", "Now you can reload page and join to your session");
                        break;
                    case "get_uuid":
                        Ne.console.send_message("gold", "Your UUID", "UUID is: " + eh.loadUUID().uuid);
                        break;
                    case "pos":
                        Ne.console.send_message("gold", `Your position is ${Math.floor(Ne.myPlayer.obj.x)}:${Math.floor(Ne.myPlayer.obj.y)}`, " ");
                        break;
                    default:
                        Ne.networkClient.sendJSON([11, [e, t]])
                }
                document.getElementById("consoleInput").value = ""
            }
        }
        i(41);
        let em = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            ec = (e, t) => {
                if (t < 0) return ec(e, t + 26);
                let i = "";
                for (let s = 0; s < e.length; s++) {
                    let a = e[s];
                    if (a.match(/[a-z]/i)) {
                        let r = e.charCodeAt(s);
                        r >= 65 && r <= 90 ? a = String.fromCharCode((r - 65 + t) % 26 + 65) : r >= 97 && r <= 122 && (a = String.fromCharCode((r - 97 + t) % 26 + 97))
                    }
                    i += a
                }
                return i
            },
            e$ = (e, t) => {
                let i = (e => {
                    if ("string" != typeof e) throw null;
                    let t = "";
                    for (let i, s, a = 0, r = em; e.charAt(0 | a) || (r = "=", a % 1); t += r.charAt(63 & i >> 8 - a % 1 * 8)) {
                        if ((s = e.charCodeAt(a += 3 / 4)) > 255) throw null;
                        i = i << 8 | s
                    }
                    return t
                })(e);
                return ec(i, t)
            },
            e_ = (e, t) => (e => {
                if ("string" != typeof e) throw null;
                let t = e.replace(/[=]+$/, "");
                if (t.length % 4 == 1) throw null;
                let i = "";
                for (let s, a, r = 0, n = 0; a = t.charAt(n++); ~a && (s = r % 4 ? 64 * s + a : a, r++ % 4) && (i += String.fromCharCode(255 & s >> (-2 * r & 6)))) a = em.indexOf(a);
                return i
            })(ec(e, -t)),
            ep = "famishs_userdata",
            eu = {
                gameAccountToken: null
            },
            e8 = (e, t) => {
                t = t || {};
                let i = Promise.create(),
                    s = new XMLHttpRequest;
                for (let a in s.open(t.method || "get", e), t.headers) s.setRequestHeader(a, t.headers[a]);
                s.onload = () => {
                    i.resolve(r())
                }, s.onerror = i.reject, s.send(t.body);
                let r = () => {
                    let e, t = [],
                        i = [],
                        a = {};
                    return s.getAllResponseHeaders().replace(/^(.*?):\s*([\s\S]*?)$/gm, (s, r, n) => {
                        t.push(r = r.toLowerCase()), i.push([r, n]), e = a[r], a[r] = e ? e + "," + n : n
                    }), {
                        ok: 1 == (s.status / 200 | 0),
                        status: s.status,
                        statusText: s.statusText,
                        url: s.responseURL,
                        clone: r,
                        text: () => Promise.resolve(s.responseText),
                        json: () => Promise.resolve(s.responseText).then(JSON.parse),
                        xml: () => Promise.resolve(s.responseXML),
                        blob: () => Promise.resolve(new Blob([s.response])),
                        arrayBuffer: () => Promise.resolve(s.response),
                        headers: {
                            keys: () => t,
                            entries: () => i,
                            get: e => a[e.toLowerCase()],
                            has: e => e.toLowerCase() in a
                        }
                    }
                };
                return i
            },
            e0 = (e, t = {}) => {
                let i = Promise.create();
                return t.method = "GET", e8(e, t).then(function(e) {
                    if (!e.ok) return i.reject(e);
                    e.text().then(e => {
                        if (e.charAt(0).includes(["[", "{"])) try {
                            i.resolve(JSON.parse(e))
                        } catch (t) {
                            i.resolve(e)
                        } else i.resolve(e)
                    })
                }).catch(i.reject), i
            },
            eI = (e, t = {}, i = {}) => {
                let s = Promise.create();
                return i.method = "POST", t && (i.body = "object" == typeof t || Array.isArray(t) ? JSON.stringify(t) : t), i.headers || (i.headers = {
                    "content-type": "application/json"
                }), e8(e, i).then(function(e) {
                    if (!e.ok) return s.reject(e);
                    e.text().then(e => {
                        if (e.charAt(0).includes("[") || e.charAt(0).includes("{")) try {
                            s.resolve(JSON.parse(e))
                        } catch (t) {
                            s.resolve(e)
                        } else s.resolve(e)
                    })
                }).catch(s.reject), s
            },
            e3 = "https:" === globalThis.location.protocol,
            ef = "/auth/check",
            ey = "gameAccountToken",
            ew = e => {
                "string" != typeof e && (e = JSON.stringify(e));
                let t = [],
                    i = Math.floor(Math.random() * (16 ^ (Date.now() / 1e9 | 0)) * Math.PI),
                    s = e$(e, i);
                return 0 === t.length && t.push(i, s), t
            };
        class e1 extends Error {
            constructor(e) {
                super(e), this.name = "AccountServiceError"
            }
        }
        let Ne = {
                options: new class {
                    constructor() {
                        this.options = [{
                            configuration_name: "Famishs.io Client Config",
                            configuration_message: "Succesfully loaded Client Configuration!"
                        }, {
                            name: "console",
                            cmd_title: "Console Line limit",
                            option_box: {
                                max_lines: {
                                    value: 600,
                                    type: "number"
                                }
                            }
                        }, {
                            name: "render",
                            cmd_title: "Rendering inGame elements",
                            option_box: {
                                minimap: {
                                    value: !0,
                                    type: "boolean"
                                },
                                leaderboard: {
                                    value: !0,
                                    type: "boolean"
                                },
                                delays: {
                                    value: !0,
                                    type: "boolean"
                                },
                                building_health: {
                                    value: !0,
                                    type: "boolean"
                                },
                                fire_particles: {
                                    value: !0,
                                    type: "boolean"
                                }
                            }
                        }]
                    }
                    restoreDefault() {}
                    get_value(e, t) {
                        return this.get_option(e).option_box[t].value
                    }
                    get_option(e) {
                        return this.options.find(t => t.name == e)
                    }
                    set_option(e, t) {
                        if (t.length < 3) return Ne.console.send_message("orangered", "Error while setting Option", "wrong option arguments, ex: .fireParticles enabled yes");
                        let i = this.get_option(e);
                        if (null == i) return Ne.console.send_message("orangered", "Error while setting Option", "wrong option name, ex: .fireParticles [optionName] [optionValue]");
                        i.option_box[t[1]].value = this.parse_argument(i.option_box[t[1]], t[2]), Ne.console.send_message("limegreen", i.cmd_title, "value of that option was changed successfully!"), document.getElementById("consoleInput").value = ""
                    }
                    parse_argument(e, t) {
                        switch (e.type) {
                            case "boolean":
                                return "true" == t || "yes" == t;
                            case "string":
                            default:
                                return String(t);
                            case "number":
                                return Number(t)
                        }
                    }
                },
                market: {
                    opened: !1,
                    tail: new class {
                        constructor() {
                            this.data = []
                        }
                        get_take_bread(e, t) {
                            let i = e[0] / e[1] * 100,
                                s = Math.floor(e[2] * (i / 20 + 1) / 5);
                            return Math.ceil(t / s)
                        }
                        update_item_prices(e) {
                            this.data = e;
                            let t = this.data[0],
                                i = this.data[1],
                                s = this.data[2],
                                a = this.data[3],
                                r = document.getElementById("market_item_wood_count"),
                                n = document.getElementById("market_item_stone_count"),
                                o = document.getElementById("market_item_gold_count"),
                                l = document.getElementById("market_item_diamond_count"),
                                h = document.getElementById("market_item_amethyst_count");
                            document.getElementById("bread_wood_number").innerHTML = Math.ceil(r.value / 3), document.getElementById("bread_amethyst_number").innerHTML = this.get_take_bread(a, h.value), document.getElementById("bread_diamond_number").innerHTML = this.get_take_bread(s, l.value), document.getElementById("bread_gold_number").innerHTML = this.get_take_bread(i, o.value), document.getElementById("bread_stone_number").innerHTML = this.get_take_bread(t, n.value)
                        }
                        buy_item(e, t) {
                            Ne.networkClient.sendJSON([13, 0, e, t])
                        }
                        on_enable() {
                            this.cvs = document.getElementById("alo_shop_crnc"), this.ctx = this.cvs.getContext("2d")
                        }
                        render() {}
                    }
                },
                marker: {
                    x: void 0,
                    y: void 0
                },
                chat: {
                    body: null,
                    elemt: null,
                    send_message(e) {
                        e.length <= 0 || Ne.networkClient.sendJSON([14, e])
                    }
                },
                autofeed: {
                    state: !1,
                    send_state() {
                        Ne.autofeed.state = !Ne.autofeed.state, Ne.networkClient.sendJSON([15])
                    }
                },
                bigmap: !1,
                interfacedBuildings: new class {
                    constructor() {
                        this.renderData = null
                    }
                    clear() {
                        Ne.mouse.hovers.storage_hover = 0, Ne.mouse.hovers.plus_hover = 0, null != this.renderData && (this.renderData = null)
                    }
                    renderItemPlus(e, t, i) {
                        if (null != this.renderData && this.renderData.shouldRenderItemPlus) {
                            let s = !0;
                            Ne.inventory.forEach((a, r) => {
                                this.renderData.drawingItems.includes(a.item) && (g.isInside({
                                    x: a.SlotManager.x + -30 + 44.5,
                                    y: a.SlotManager.y + -30 - 35,
                                    width: 60,
                                    height: 60
                                }) && (Ne.mouse.onHover([1, a.item, this.renderData.renderEntity.id, Ne.keyboard.keyboard.is_shift() ? 1 : 0], "attach", "plus_hover"), s = !1), a.SlotManager.renderPlus(i, t, e, r, 0 == s))
                            }), s && (Ne.mouse.hovers.plus_hover = l.AIR.Id)
                        }
                    }
                    render(e, t, i) {
                        t.save();
                        let s = !1,
                            r = null,
                            n = 0,
                            o = 0,
                            h = 0;
                        if (null != this.renderData) switch (this.renderData.type) {
                            case 0: {
                                let d = this.renderData.renderEntity.action;
                                if (!d) return;
                                if (r = Ne.spriteClient.getSprite(a.SIMPLE_ITEM_UI.ID, !0), n = .35, o = 0 == Ne.craftManager.craftables.length ? 115 : 30 + 90 * (Math.floor(Ne.craftManager.craftables.length / 5) + 2), h = 60, t.translate(o, h), i.drawImage(r, -(r.width * (.5 * n)), -(r.height * (.5 * n)), r.width * n, r.height * n), d[0][0] != l.AIR.Id) {
                                    let m = Ne.spriteClient.getItemSprite(d[0][0]);
                                    i.drawImage(m, -52 + -95 / 2, -2 + -95 / 2, 95, 95, !1), d[0][1] > 0 && (t.save(), t.textAlign = "right", i.drawText("x" + d[0][1], -10, 30, "21px", "white", !1), t.restore()), g.isInside({
                                        x: o + -99.5,
                                        y: h + -49.5,
                                        width: 95,
                                        height: 95
                                    }) && (s = !0, Ne.mouse.onHover([0, 1, this.renderData.renderEntity.id], "attach", "storage_hover"))
                                }
                                if (d[1][0] != l.AIR.Id) {
                                    let c = Ne.spriteClient.getItemSprite(d[1][0]);
                                    i.drawImage(c, 53 + -95 / 2, -2 + -95 / 2, 95, 95, !1), d[1][1] > 0 && (t.save(), t.textAlign = "right", i.drawText("x" + d[1][1], 90, 30, "21px", "white", !1), t.restore()), g.isInside({
                                        x: o + 5.5,
                                        y: h + -49.5,
                                        width: 95,
                                        height: 95
                                    }) && (s = !0, Ne.mouse.onHover([0, 2, this.renderData.renderEntity.id], "attach", "storage_hover"))
                                }
                                s || (Ne.mouse.hovers.storage_hover = 0), t.restore();
                                break
                            }
                            case 1: {
                                let _ = this.renderData.renderEntity.action;
                                if (!_) return;
                                if (r = Ne.spriteClient.getSprite(a.ONE_ITEM_UI.ID, !0), n = .35, o = 0 == Ne.craftManager.craftables.length ? 115 : 30 + 90 * (Math.floor(Ne.craftManager.craftables.length / 5) + 2), h = 60, t.translate(o, h), i.drawImage(r, -(r.width * (.5 * n)), -(r.height * (.5 * n)), r.width * n, r.height * n), _[0][0] != l.AIR.Id) {
                                    let p = Ne.spriteClient.getItemSprite(_[0][0]);
                                    i.drawImage(p, 0 + -95 / 2, -2 + -95 / 2, 95, 95, !1), _[0][1] > 0 && (t.save(), t.textAlign = "right", i.drawText("x" + _[0][1], 30, 30, "21px", "white", !1), t.restore()), g.isInside({
                                        x: o + -47.5,
                                        y: h + -49.5,
                                        width: 95,
                                        height: 95
                                    }) && (s = !0, Ne.mouse.onHover([0, 1, this.renderData.renderEntity.id], "attach", "storage_hover"))
                                }
                                s || (Ne.mouse.hovers.storage_hover = 0), t.restore();
                                break
                            }
                            case 3: {
                                let u = this.renderData.renderEntity.action;
                                if (!u) return;
                                if (r = Ne.spriteClient.getSprite(a.TRIPLE_ITEM_UI.ID, !0), n = .35, o = 0 == Ne.craftManager.craftables.length ? 178.5 : 87.5 + 90 * (Math.floor(Ne.craftManager.craftables.length / 5) + 2), h = 60, t.translate(o, h), i.drawImage(r, -(r.width * (.5 * n)), -(r.height * (.5 * n)), r.width * n, r.height * n), u[0][0] != l.AIR.Id) {
                                    let I = Ne.spriteClient.getItemSprite(u[0][0]);
                                    i.drawImage(I, -112 + -95 / 2, -2 + -95 / 2, 95, 95, !1), u[0][1] > 0 && (t.save(), t.textAlign = "right", i.drawText("x" + u[0][1], -80, 30, "21px", "white", !1), t.restore()), g.isInside({
                                        x: o + -159.5,
                                        y: h + -49.5,
                                        width: 95,
                                        height: 95
                                    }) && (s = !0, Ne.mouse.onHover([0, 1, this.renderData.renderEntity.id], "attach", "storage_hover"))
                                }
                                if (u[1][0] != l.AIR.Id) {
                                    let f = Ne.spriteClient.getItemSprite(u[1][0]);
                                    i.drawImage(f, -10 + -95 / 2, -2 + -95 / 2, 95, 95, !1), u[1][1] > 0 && (t.save(), t.textAlign = "right", i.drawText("x" + u[1][1], 22, 30, "21px", "white", !1), t.restore()), g.isInside({
                                        x: o + -57.5,
                                        y: h + -49.5,
                                        width: 95,
                                        height: 95
                                    }) && (s = !0, Ne.mouse.onHover([0, 2, this.renderData.renderEntity.id], "attach", "storage_hover"))
                                }
                                if (u[2][0] != l.AIR.Id) {
                                    let y = Ne.spriteClient.getItemSprite(u[2][0]);
                                    i.drawImage(y, 116 + -95 / 2, -2 + -95 / 2, 95, 95, !1), u[2][1] > 0 && (t.save(), t.textAlign = "right", i.drawText("x" + u[2][1], 148, 30, "21px", "white", !1), t.restore()), g.isInside({
                                        x: o + 68.5,
                                        y: h + -49.5,
                                        width: 95,
                                        height: 95
                                    }) && (s = !0, Ne.mouse.onHover([0, 3, this.renderData.renderEntity.id], "attach", "storage_hover"))
                                }
                                s || (Ne.mouse.hovers.storage_hover = 0), t.restore()
                            }
                        }
                        t.restore(), this.renderItemPlus(e, t, i)
                    }
                },
                loader: {
                    progress: 0,
                    step: .01,
                    step_count: 1,
                    load_menu_alpha: 0,
                    state: -1,
                    wheel: {
                        angle: 0
                    },
                    update(e) {
                        switch (e.loader.wheel.angle += .025, e.loader.wheel.angle > 2 * Math.PI && (e.loader.wheel.angle = 0), e.loader.state) {
                            case -1:
                                e.loader.load_menu_alpha += .02, e.loader.load_menu_alpha >= 1 && (e.loader.load_menu_alpha = 1, e.loader.state = 0);
                                break;
                            case 0:
                                e.loader.step += .01 * e.loader.step_count, e.loader.step_count += Math.random() / 10 * 5, e.loader.progress += e.loader.step, e.loader.progress >= 100 && (e.loader.progress = 100, e.loader.state = 1);
                                break;
                            case 1:
                                e.loader.load_menu_alpha -= .02, e.loader.load_menu_alpha <= 0 && (e.loader.load_menu_alpha = 0, e.gameClient.render.scene = 1, e.gameClient.render.onSceneChanged(), e.loader.state = 2);
                                break;
                            case 2:
                                e.loader.load_menu_alpha += .02
                        }
                    }
                },
                nearest: {},
                menu: {
                    title_animation: new r(!1, 1, 1.1, 1, .025, .025),
                    play_button: {
                        update: !1,
                        animation: new r(!0, -2, -2, 0, 10, 10),
                        count: 0
                    },
                    server: {
                        waiting: !1,
                        angle: 0,
                        socket_link: "",
                        timestamp: -1
                    }
                },
                CLIENT_VERSION: 22,
                MODE: 0,
                LANGUAGE: "RU",
                LAG_DISTANCE: 150,
                gameClient: new class {
                    constructor() {
                        this.playerList = [], this.entities = [
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            [],
                            []
                        ], this.intervals = [], this.serverWaiter = new F, this.socket = null, this.world = new V, this.inGame = !1, this.isMovable = !1, this.render = null, this.middleCanvas = {
                            x: 0,
                            y: 0
                        }
                    }
                    onPreInit() {
                        let e = {
                            type: 8,
                            x: -400,
                            y: 200
                        };
                        e.angle = Math.PI / 2, e.info = null, e.id = -1, Ne.camera.setup(), Ne.spriteClient.Initializate(), this.render = new en, this.listen(), Ne.camera.cam.x = 0, Ne.camera.cam.y = 0, Ne.fakeEntities.push(new Y(e))
                    }
                    onServerDisconnect() {
                        this.playerList = [];
                        for (let e = 0; e < this.entities.length; e++) this.entities[e] = [];
                        this.socket = null, this.world.clearWorld(), this.inGame = !1, this.isMovable = !1, this.isAttackable = !1, Ne.myPlayer.id = null, Ne.myPlayer.obj = null, Ne.inventory = new B(12)
                    }
                    onServerJoined() {
                        this.isMovable = !0, this.isAttackable = !0, this.inGame = !0
                    }
                    renderInit() {
                        this.render
                    }
                    setMiddleCanvas(e, t) {
                        this.middleCanvas.x = e, this.middleCanvas.y = t
                    }
                    restore_item_numbers() {
                        let e = document.getElementById("market_item_wood_count"),
                            t = document.getElementById("market_item_stone_count"),
                            i = document.getElementById("market_item_gold_count"),
                            s = document.getElementById("market_item_diamond_count"),
                            a = document.getElementById("market_item_amethyst_count");
                        e.value >= 512 && (e.value = 512), t.value >= 512 && (t.value = 512), i.value >= 512 && (i.value = 512), s.value >= 512 && (s.value = 512), a.value >= 512 && (a.value = 512), e.value <= 2 && (e.value = 3), t.value <= 19 && (t.value = 20), i.value <= 15 && (i.value = 16), s.value <= 10 && (s.value = 11), a.value <= 4 && (a.value = 5)
                    }
                    listen() {
                        this.listen_elem(["delete_button_one", "delete_button_all", "delete_button_no", "delete_button_recycle"], Ne.mouse.dropItem), document.getElementById("buy_wood_btn").addEventListener("click", () => {
                            this.restore_item_numbers();
                            let e = document.getElementById("market_item_wood_count").value;
                            Ne.market.tail.buy_item(l.WOOD.Id, e)
                        }), document.getElementById("buy_stone_btn").addEventListener("click", () => {
                            this.restore_item_numbers();
                            let e = document.getElementById("market_item_stone_count").value;
                            Ne.market.tail.buy_item(l.STONE.Id, e)
                        }), document.getElementById("buy_gold_btn").addEventListener("click", () => {
                            this.restore_item_numbers();
                            let e = document.getElementById("market_item_gold_count").value;
                            Ne.market.tail.buy_item(l.GOLD.Id, e)
                        }), document.getElementById("buy_diamond_btn").addEventListener("click", () => {
                            this.restore_item_numbers();
                            let e = document.getElementById("market_item_diamond_count").value;
                            Ne.market.tail.buy_item(l.DIAMOND.Id, e)
                        }), document.getElementById("buy_amethyst_btn").addEventListener("click", () => {
                            this.restore_item_numbers();
                            let e = document.getElementById("market_item_amethyst_count").value;
                            Ne.market.tail.buy_item(l.AMETHYST.Id, e)
                        }), document.getElementById("quit_market").addEventListener("click", () => {
                            document.getElementById("shop_market").style.display = "none", Ne.market.opened = !1
                        }), Ne.keyboard.Listen(), Ne.mouse.Listen(), Ne.chat.elemt = document.getElementById("chat_input"), Ne.chat.body = document.getElementById("chat_block")
                    }
                    listen_elem(e, t = () => {}) {
                        if (!(t instanceof Function)) throw Error("Unexpected click callback");
                        if (e instanceof Array)
                            for (let i = 0; i < e.length; i++) document.getElementById(e[i]).onclick = () => {
                                t(e[i], Ne.mouse)
                            };
                        else document.getElementById(e).onclick = () => {
                            t(e, Ne.mouse)
                        }
                    }
                    setElementVisible(e, t = !1) {
                        document.getElementById(e).style.visibility = t ? "visible" : "hidden"
                    }
                },
                networkClient: new class {
                    constructor() {
                        this.websocket = null
                    }
                    connect() {
                        console.log("[Famishs/Connector] Socket state changed");
                        let e = "ws://localhost:80/srv",
                            t = document.getElementById("servers");
                        Ne.MODE == e2.PRODUCTION ? e = window.proxyAPI.servers[Number(t.value)].socket_link : console.log("[Famishs/CLIENT] Loading game as Development Mode"), this.websocket = new WebSocket(e), this.websocket.binaryType = "arraybuffer", this.websocket.onclose = this._close.bind(this), this.websocket.onerror = this._error.bind(this), this.websocket.onmessage = this._data.bind(this), this.websocket.onopen = this._open.bind(this)
                    }
                    sendJSON(e) {
                        this.websocket.send(JSON.stringify(e))
                    }
                    _open() {
                        console.log("[Famishs/Connector] Socket connected")
                    }
                    _close() {
                        Settings.AutoRespawn ? Ne.networkClient.connect() : null;
                        Ne.delayManager.delays = [],
                        g.clear_building_data(), 
                        Ne.menu.server.waiting ? F.on_failed("Unable to join server!") : Ne.ServerMessageManager.onMessage("You died"), 
                        console.log("[Famishs/Connector] Socket disconnected"), 
                        Ne.gameClient.render.scene = 1, 
                        Ne.gameClient.onServerDisconnect(), 
                        Ne.gameClient.render.onSceneChanged(), 
                        Ne.console.state = !1, 
                        Ne.chat.body.style.display = "none", 
                        Ne.gameClient.inGame = !1, 
                        Ne.autofeed.state = !1, 
                        document.getElementsByClassName("consoleWrapper")[0].style.display = "none", 
                        g.clear_team()
                    }
                    _error() {}
                    _data(e) {
                        try {
                            let t = msgpack.decode(new Uint8Array(e.data));
                            ed.onPacketReceive(t, this)
                        } catch (i) {
                            console.log(i)
                        }
                    }
                },
                spriteClient: new class {
                    constructor() {
                        this.sprites = {}, this.itemSprites = {}, this.ui_sprites = {}
                    }
                    createImage(e) {
                        let t = new Image;
                        return t.src = e, t
                    }
                    Initializate() {
                        Object.keys(a).forEach((e, t) => {
                            this.constructSprite(e, !0)
                        }), this.setItemSprite(l.AIR.Id, "inv_slot"), this.setItemSprite(l.WOOD.Id, "inv_wood"), this.setItemSprite(l.FIRE.Id, "inv_firepit"), this.setItemSprite(l.STONE.Id, "inv_stone"), this.setItemSprite(l.GOLD.Id, "inv_gold"), this.setItemSprite(l.DIAMOND.Id, "inv_diamond"), this.setItemSprite(l.BONE.Id, "inv_bones"), this.setItemSprite(l.RAW_MEAT.Id, "inv_rawmeat"), this.setItemSprite(l.COOKED_MEAT.Id, "inv_cookmeat"), this.setItemSprite(l.WOLF_FUR.Id, "inv_wolf_leather"), this.setItemSprite(l.RABBIT_FUR.Id, "inv_rabbit_leather"), this.setItemSprite(l.CORD.Id, "inv_strings"), this.setItemSprite(l.BERRY.Id, "inv_berry"), this.setItemSprite(l.WHEAT.Id, "inv_wheat"), this.setItemSprite(l.BERRY_SEED.Id, "inv_berry_seed"), this.setItemSprite(l.WHEAT_SEED.Id, "inv_wheat_seed"), this.setItemSprite(l.FLOUR.Id, "inv_flour"), this.setItemSprite(l.BREAD.Id, "inv_bread"), this.setItemSprite(l.BREAD_OVEN.Id, "inv_bread_oven"), this.setItemSprite(l.BOOK.Id, "inv_book"), this.setItemSprite(l.WOOD_PICKAXE.Id, "inv_pickaxe_wood"), this.setItemSprite(l.STONE_PICKAXE.Id, "inv_pickaxe_stone"), this.setItemSprite(l.GOLD_PICKAXE.Id, "inv_pickaxe_gold"), this.setItemSprite(l.DIAMOND_PICKAXE.Id, "inv_pickaxe_diamond"), this.setItemSprite(l.AMETHYST_PICKAXE.Id, "inv_pickaxe_amethyst"), this.setItemSprite(l.PLOT.Id, "inv_plot"), this.setItemSprite(l.WOOD_SWORD.Id, "inv_sword_wood"), this.setItemSprite(l.STONE_SWORD.Id, "inv_sword_stone"), this.setItemSprite(l.GOLD_SWORD.Id, "inv_sword_gold"), this.setItemSprite(l.DIAMOND_SWORD.Id, "inv_sword_diamond"), this.setItemSprite(l.AMETHYST_SWORD.Id, "inv_sword_amethyst"), this.setItemSprite(l.WOOD_SPEAR.Id, "inv_spear_wood"), this.setItemSprite(l.STONE_SPEAR.Id, "inv_spear_stone"), this.setItemSprite(l.GOLD_SPEAR.Id, "inv_spear_gold"), this.setItemSprite(l.DIAMOND_SPEAR.Id, "inv_spear_diamond"), this.setItemSprite(l.AMETHYST_SPEAR.Id, "inv_spear_amethyst"), this.setItemSprite(l.WOOD_HELMET.Id, "inv_helmet_wood"), this.setItemSprite(l.STONE_HELMET.Id, "inv_helmet_stone"), this.setItemSprite(l.GOLD_HELMET.Id, "inv_helmet_gold"), this.setItemSprite(l.DIAMOND_HELMET.Id, "inv_helmet_diamond"), this.setItemSprite(l.AMETHYST_HELMET.Id, "inv_helmet_amethyst"), this.setItemSprite(l.AMETHYST.Id, "inv_amethyst"), this.setItemSprite(l.STONE_HAMMER.Id, "inv_hammer_stone"), this.setItemSprite(l.GOLD_HAMMER.Id, "inv_hammer_gold"), this.setItemSprite(l.DIAMOND_HAMMER.Id, "inv_hammer_diamond"), this.setItemSprite(l.AMETHYST_HAMMER.Id, "inv_hammer_amethyst"), this.setItemSprite(l.WALL_WOOD.Id, "inv_wall_wood"), this.setItemSprite(l.WALL_STONE.Id, "inv_wall_stone"), this.setItemSprite(l.WALL_GOLD.Id, "inv_wall_gold"), this.setItemSprite(l.WALL_DIAMOND.Id, "inv_wall_diamond"), this.setItemSprite(l.WALL_AMETHYST.Id, "inv_wall_amethyst"), this.setItemSprite(l.SPIKE_WOOD.Id, "inv_spike_wood"), this.setItemSprite(l.SPIKE_STONE.Id, "inv_spike_stone"), this.setItemSprite(l.SPIKE_GOLD.Id, "inv_spike_gold"), this.setItemSprite(l.SPIKE_DIAMOND.Id, "inv_spike_diamond"), this.setItemSprite(l.SPIKE_AMETHYST.Id, "inv_spike_amethyst"), this.setItemSprite(l.STONE_PITCHFORK.Id, "inv_pitchfork_stone"), this.setItemSprite(l.WRENCH.Id, "inv_wrench"), this.setItemSprite(l.DOOR_WOOD.Id, "inv_door_wood"), this.setItemSprite(l.DOOR_STONE.Id, "inv_door_stone"), this.setItemSprite(l.DOOR_GOLD.Id, "inv_door_gold"), this.setItemSprite(l.DOOR_DIAMOND.Id, "inv_door_diamond"), this.setItemSprite(l.DOOR_AMETHYST.Id, "inv_door_amethyst"), this.setItemSprite(l.WARM_HELMET1.Id, "inv_hat_1"), this.setItemSprite(l.WARM_HELMET2.Id, "inv_hat_2"), this.setItemSprite(l.COMPRESSOR.Id, "inv_compressor"), this.setItemSprite(l.FURNACE.Id, "inv_furnace"), this.setItemSprite(l.WORKBENCH.Id, "inv_workbench"), this.setItemSprite(l.CHEST.Id, "inv_chest"), this.setItemSprite(l.BANDAGE.Id, "inv_bandage"), this.setItemSprite(l.TOTEM.Id, "inv_totem"), this.setUISprite(q.SOCIAL_DISCORD_BUTTON_IN, "/menu/Button_Discord_Hover"), this.setUISprite(q.SOCIAL_DISCORD_BUTTON_OUT, "/menu/Button_Discord"), this.setUISprite(q.SOCIAL_YOUTUBE_BUTTON_IN, "/menu/Button_Youtube_Hover"), this.setUISprite(q.SOCIAL_YOUTUBE_BUTTON_OUT, "/menu/Button_Youtube"), this.setUISprite(q.SOCIALS_BACKGROUND, "/menu/Social_Under"), this.setUISprite(q.PLAY_BUTTON_IN, "/menu/Button_Play"), this.setUISprite(q.PLAY_BUTTON_OUT, "/menu/Button_Play_Hover"), this.setUISprite(q.SERVERS_SELECT_BUTTON_IN, "/menu/Button_Server_Hover"), this.setUISprite(q.SERVERS_SELECT_BUTTON_OUT, "/menu/Button_Server"), this.setUISprite(q.MENU_CATEGORY_PLAY, "/menu/StartAGame"), this.setUISprite(q.MENU_CATEGORY_PROFILE, "/menu/Profile"), this.setUISprite(q.MENU_CATEGORY_SHOP, "/menu/Shop"), this.setUISprite(q.MENU_CATEGORY_LEADERBOARD, "/menu/Leaderboard"), this.setUISprite(q.MENU_CATEGORY_LEADERBOARD_IN, "/menu/Leaderboard_hover"), this.setUISprite(q.CHANGELOG, "/menu/Commands_Changelogs_Under"), this.setUISprite(q.PLAY_BACKGROUND, "/menu/Menu_Under"), this.setUISprite(q.LOGO, "/menu/Logo"), this.setUISprite(q.TV_BODY, "/menu/FeaturedVideos_Upper"), this.setUISprite(q.TV_FEAUTED_VIDEOS_UNDER, "/menu/FeaturedVideos_Under"), this.setUISprite(q.LOADING_BACKGROUND, "/loading/Background"), this.setUISprite(q.LOADING_BAR_LINE, "/loading/bar_line"), this.setUISprite(q.LOADING_BAR_UP, "/loading/bar_up"), this.setUISprite(q.LOADING_BG_BAR, "/loading/bg_bar"), this.setUISprite(q.LOADING_TITLE, "/loading/title"), this.setUISprite(q.LOADING_WHEEL, "/loading/wheel")
                    }
                    setUISprite(e, t) {
                        let i = this.createImage("/img/ui" + t + ".png");
                        this.ui_sprites[e] = i
                    }
                    getUISprite(e) {
                        return this.ui_sprites[e]
                    }
                    setItemSprite(e, t) {
                        let i = this.createImage("/img/items/icons/" + t + ".png");
                        this.itemSprites[e] = i
                    }
                    getItemSprite(e = l.AIR.Id) {
                        return this.itemSprites[e]
                    }
                    getSprite(e) {
                        return this.sprites[e + "_DAY"]
                    }
                    constructSprite(e) {
                        this.sprites[a[e].ID + "_DAY"] = this.createImage(a[e].URL.DAY)
                    }
                },
                nickname: "",
                token: 0,
                debugMode: !1,
                debugger: new class {
                    constructor() {
                        this.player_radius = 32
                    }
                    update(e, t, i, s) {
                        for (let a = 0; a < Ne.gameClient.world.objects.length; a++) {
                            let r = Ne.gameClient.world.objects[a];
                            t.save(), t.beginPath(), t.lineWidth = 5, t.arc(r.x + Ne.camera.cam.x + 3, r.y + Ne.camera.cam.y, r.size, 0, 2 * Math.PI), t.stroke(), t.restore()
                        }
                        for (let n = 0; n < Ne.gameClient.entities[0].length; n++) {
                            let o = Ne.gameClient.entities[0][n];
                            t.beginPath(), t.lineWidth = 5, t.arc(o.x + Ne.camera.cam.x, o.y + Ne.camera.cam.y, this.player_radius, 0, 2 * Math.PI), t.stroke()
                        }
                        for (let l = 0; l < Ne.gameClient.entities[1].length; l++) {
                            let h = Ne.gameClient.entities[1][l];
                            t.beginPath(), t.lineWidth = 5, t.arc(h.x + Ne.camera.cam.x, h.y + Ne.camera.cam.y, 60, 0, 2 * Math.PI), t.stroke()
                        }
                        for (let d = 0; d < Ne.gameClient.entities[2].length; d++) {
                            let g = Ne.gameClient.entities[2][d];
                            t.beginPath(), t.lineWidth = 5, t.arc(g.x + Ne.camera.cam.x, g.y + Ne.camera.cam.y, 30, 0, 2 * Math.PI), t.stroke()
                        }
                        for (let m = 0; m < Ne.gameClient.entities[3].length; m++) {
                            let c = Ne.gameClient.entities[3][m];
                            t.beginPath(), t.lineWidth = 5, t.arc(c.x + Ne.camera.cam.x, c.y + Ne.camera.cam.y, 30, 0, 2 * Math.PI), t.stroke()
                        }
                    }
                },
                craftManager: new class {
                    constructor() {
                        this.crafts = [], this.craftables = [], this.in_craft = {
                            itemId: 0,
                            time: -1,
                            timestamp: -1
                        }, this.last_states = {
                            lastIsFire: !1,
                            lastIsWorkbench: !1,
                            lastIsWater: !1
                        }
                    }
                    on_state_update() {
                        Ne.myPlayer.states.isInFire != this.last_states.lastIsFire && (this.last_states.lastIsFire = Ne.myPlayer.states.isInFire, this.get_craftables()), Ne.myPlayer.states.isInWorkbench != this.last_states.lastIsWorkbench && (this.last_states.lastIsWorkbench = Ne.myPlayer.states.isInWorkbench, this.get_craftables()), Ne.myPlayer.states.isInWater != this.last_states.lastIsWater && (this.last_states.lastIsWater = Ne.myPlayer.states.isInWater, this.get_craftables())
                    }
                    set_in_craft(e, t) {
                        this.in_craft.itemId = e, this.in_craft.time = t, this.in_craft.timestamp = +new Date
                    }
                    on_craft_finished() {
                        this.in_craft.itemId = 0, this.in_craft.time = -1, this.in_craft.timestamp = -1, this.get_craftables()
                    }
                    on_crafts_updated() {
                        let e = [];
                        for (let t = 0; t < this.crafts.length; t++) e.push({
                            id: this.crafts[t][0],
                            items: this.crafts[t][1],
                            priority: this.crafts[t][2],
                            time: this.crafts[t][3],
                            instances: this.crafts[t][4]
                        });
                        this.crafts = e
                    }
                    get_craft_by_id(e = 0) {
                        return this.crafts.find(t => t.id == e)
                    }
                    get_craftables() {
                        if (0 == this.in_craft.itemId) {
                            this.craftables = [];
                            for (let e = 0; e < this.crafts.length; e++) this.is_craft_allowed(this.crafts[e].id) && this.craftables.push(this.crafts[e])
                        }
                    }
                    is_craft_allowed(e = 0) {
                        let t = this.get_craft_by_id(e);
                        if (!t) return !1;
                        let i = Ne.inventory,
                            s = 1 == t.instances[1],
                            a = 1 == t.instances[0],
                            r = 1 == t.instances[2];
                        if (s && !Ne.myPlayer.states.isInFire || r && !Ne.myPlayer.states.isInWater || a && !Ne.myPlayer.states.isInWorkbench) return !1;
                        for (let n = 0; n < t.items.length; n++) {
                            let o = i.getCount(t.items[n][0]);
                            if (0 == o || o < t.items[n][1]) return !1
                        }
                        return !0
                    }
                },
                buildingsManager: new class {
                    constructor() {
                        this.current_building = 0, this.lastBuild = -1, this.G_MODE = !1
                    }
                    on_build_response(e) {
                        1 == e && (this.current_building = 0, this.lastBuild = +new Date)
                    }
                    on_build_action(e, t) {
                        switch (e) {
                            case 2:
                                return this.G_MODE = !this.G_MODE;
                            case 1:
                                if (+new Date - this.lastBuild >= 1e3) {
                                    let i = Ne.myPlayer.obj;
                                    this.G_MODE, Ne.networkClient.sendJSON([10, this.current_building, this.G_MODE, l.fromId(this.current_building).offset_angle, i._angle])
                                }
                                break;
                            case 0:
                                this.current_building == t ? this.current_building = 0 : this.current_building = t
                        }
                    }
                },
                accountService: new class {
                    constructor() {
                        this.url = (e3 ? "https:" : "http:") + "//51.75.76.191:3000", this.storage = (() => {
                            let e = "localStorage" in window && window.localStorage instanceof Storage ? window.localStorage : void 0;
                            if (!e) throw Error("Can't resolve localStorage");
                            return (() => {
                                if (!e || !e.getItem(ep)) {
                                    let t = null;
                                    try {
                                        t = e$(JSON.stringify(eu), 743)
                                    } catch (i) {
                                        throw i
                                    } finally {
                                        t && "string" == typeof t && e.setItem(ep, t)
                                    }
                                }
                            })(), {
                                get(t) {
                                    let i = e && e.getItem(ep);
                                    if (!i) throw Error("Can't resolve store");
                                    let s = !1;
                                    try {
                                        s = e_(i, 743)
                                    } catch (a) {
                                        throw a
                                    } finally {
                                        if (s && "string" == typeof s) {
                                            let r = !1;
                                            try {
                                                r = JSON.parse(s)
                                            } catch (n) {
                                                throw n
                                            } finally {
                                                if (r && "object" == typeof r) return t in r ? r[t] : null
                                            }
                                        }
                                    }
                                },
                                set(t, i) {
                                    let s = e && e.getItem(ep);
                                    if (!s) throw Error("Can't resolve store");
                                    let a = !1;
                                    try {
                                        a = e_(s, 743)
                                    } catch (r) {
                                        throw r
                                    } finally {
                                        if (a && "string" == typeof a) {
                                            let n = null,
                                                o = !1;
                                            try {
                                                o = JSON.parse(a)
                                            } catch (l) {
                                                throw l
                                            } finally {
                                                if (o && "object" == typeof o) {
                                                    t in o ? o[t] !== i && (o[t] = i) : o[t] = i;
                                                    try {
                                                        n = e$(JSON.stringify(o), 743)
                                                    } catch (h) {
                                                        throw h
                                                    } finally {
                                                        n && "string" == typeof n && e.setItem(ep, n)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                clear() {
                                    let t = e && e.getItem(ep);
                                    if (!t) throw Error("Can't resolve store");
                                    let i = !1;
                                    try {
                                        i = e_(t, 743)
                                    } catch (s) {
                                        throw s
                                    } finally {
                                        if (i && "string" == typeof i) {
                                            let a = null,
                                                r = !1;
                                            try {
                                                r = JSON.parse(i)
                                            } catch (n) {
                                                throw n
                                            } finally {
                                                if (r && "object" == typeof r)
                                                    for (let o in r) o in eu ? r[o] = o in eu ? eu[o] : null : delete r[o]
                                            }
                                            try {
                                                a = e$(JSON.stringify(r), 743)
                                            } catch (l) {
                                                throw l
                                            } finally {
                                                a && "string" == typeof a && e.setItem(ep, a)
                                            }
                                        }
                                    }
                                },
                                remove(t) {
                                    let i = e && e.getItem(ep);
                                    if (!i) throw Error("Can't resolve store");
                                    let s = !1;
                                    try {
                                        s = e_(i, 743)
                                    } catch (a) {
                                        throw a
                                    } finally {
                                        if (s && "string" == typeof s) {
                                            let r = null,
                                                n = !1;
                                            try {
                                                n = JSON.parse(s)
                                            } catch (o) {
                                                throw o
                                            } finally {
                                                if (n && "object" == typeof n) {
                                                    if (!(t in n) || t in eu) return;
                                                    delete n[t]
                                                }
                                            }
                                            try {
                                                r = e$(JSON.stringify(n), 743)
                                            } catch (l) {
                                                throw l
                                            } finally {
                                                r && "string" == typeof r && e.setItem(ep, r)
                                            }
                                        }
                                    }
                                }
                            }
                        })(), this.dataValidation = {
                            login: {
                                user: "string",
                                password: "string"
                            },
                            register: {
                                email: "string",
                                username: "string",
                                password: "string"
                            }
                        }
                    }
                    get token() {
                        return this.storage.get(ey)
                    }
                    _validateData(e, t = {}) {
                        if ("string" != typeof e || !this.dataValidation[e] || 0 === Object.keys(t).length) return;
                        let i = !0;
                        for (let [s, a] of Object.entries(t))
                            if (this.dataValidation[e][s] && typeof t[s] !== this.dataValidation[e][s]) {
                                i = !1;
                                break
                            } return i
                    }
                    async login(e, t = {}) {
                        if ("function" == typeof e && "string" != typeof this.storage.get(ey) && this._validateData("login", t)) {
                            let i = await eI(this.url + "/auth/login", ew(t), {
                                "content-type": "application/json"
                            });
                            i && (e(i), i.ok && this.storage.set(ey, i.data.account_access_token))
                        }
                    }
                    async register(e, t = {}) {
                        if ("function" == typeof e && "string" != typeof this.storage.get(ey) && this._validateData("register", t)) {
                            let i = await eI(this.url + "/auth/register", ew(t), {
                                "content-type": "application/json"
                            });
                            i && e(i)
                        }
                    }
                    async checkData(e) {
                        if ("function" != typeof e) return;
                        let t = this.storage.get(ey);
                        if ("string" == typeof t) {
                            let i = {
                                "content-type": "application/json"
                            };
                            i.authorization = "Bearer " + t;
                            let s = await e0(this.url + ef, i);
                            if ("string" == typeof s) try {
                                s = JSON.parse(s)
                            } catch (a) {
                                throw e1("Cannot parse response properly: " + a)
                            } finally {
                                e(s), s.ok || this.storage.set(ey, null)
                            }
                        }
                    }
                    async initialize(e) {
                        if ("function" != typeof e) return;
                        let t = this.storage.get(ey);
                        if ("string" == typeof t) {
                            let i = {
                                "content-type": "application/json"
                            };
                            i.authorization = "Bearer " + t;
                            let s = {};
                            s.headers = i;
                            let a = await e0(this.url + ef, s);
                            if ("string" == typeof a) try {
                                a = JSON.parse(a)
                            } catch (r) {
                                throw e1("Cannot parse response properly: " + r)
                            } finally {
                                e(a), a.ok || this.storage.set(ey, null)
                            }
                        }
                    }
                },
                myPlayer: {
                    id: 0,
                    bandage_heals: 0,
                    obj: null,
                    states: {
                        isInFire: !1,
                        isInWorkbench: !1,
                        isInWater: !1
                    },
                    totem_data: {
                        players: null,
                        leader: -1,
                        entity: null
                    }
                },
                keyboard: new class {
                    constructor() {
                        this.keyboard = new j, this.Direction = 0, this.previous = -1, this.lastUp = -1
                    }
                    reset() {
                        this.Direction = 0, this.previous = 0, this.keyboard = new j
                    }
                    Listen() {
                        document.addEventListener("keydown", e => {
                            if ("flex" != Ne.chat.body.style.display && Ne.gameClient.inGame) {
                                if (Ne.console.state) return this.keyboard.down(e);
                                this.keyboard.down(e), this.movement_()
                            }
                        }), document.addEventListener("keyup", e => {
                            let t = -1;
                            if (Ne.gameClient.inGame && (27 == e.which && (Ne.console.state && (Ne.console.state = !1, document.getElementsByClassName("consoleWrapper")[0].style.display = "none"), "flex" == Ne.chat.body.style.display && (Ne.chat.body.style.display = "none")), 13 == e.which && ("flex" == Ne.chat.body.style.display ? (Ne.chat.body.style.display = "none", Ne.chat.send_message(Ne.chat.elemt.value), Ne.chat.elemt.value = "") : Ne.console.state || (Ne.chat.body.style.display = "flex", Ne.chat.elemt.focus())), "flex" != Ne.chat.body.style.display)) {
                                if (this.keyboard.is_o() && !$(".consoleInput").is(":focus")) {
                                    let i = document.getElementsByClassName("consoleWrapper")[0],
                                        s = "none" == i.style.display;
                                    Ne.console.state = s, i.style.display = 0 == s ? "none" : "flex", s && document.getElementById("consoleInput").focus()
                                }
                                if (Ne.console.state) return this.keyboard.up(e);
                                switch (this.keyboard.is_m() && (Ne.bigmap = !Ne.bigmap), this.keyboard.is_r() && Ne.autofeed.send_state(), this.keyboard.is_g() && Ne.buildingsManager.on_build_action(2), e.which) {
                                    case 49:
                                    case 48:
                                        t = 0;
                                        break;
                                    case 50:
                                        t = 1;
                                        break;
                                    case 51:
                                        t = 2;
                                        break;
                                    case 52:
                                        t = 3;
                                        break;
                                    case 53:
                                        t = 4;
                                        break;
                                    case 54:
                                        t = 5;
                                        break;
                                    case 55:
                                        t = 6;
                                        break;
                                    case 56:
                                        t = 7;
                                        break;
                                    case 57:
                                        t = 8;
                                        break;
                                    default:
                                        t = -1
                                }
                                if (this.lastUp = +new Date, -1 != t && Ne.craftManager.in_craft.itemId == l.AIR.Id) {
                                    let a = Ne.inventory.slots[t];
                                    if (a.item != l.AIR.Id) {
                                        let r = l.fromId(a.item);
                                        if (r && r.is_building) return Ne.buildingsManager.on_build_action(0, a.item), this.keyboard.up(e), this.movement_();
                                        Ne.networkClient.sendJSON([6, a.item])
                                    }
                                }
                                this.keyboard.up(e), this.movement_()
                            }
                        })
                    }
                    movement_(e) {
                        if (Ne.gameClient.inGame && Ne.gameClient.isMovable) {
                            var t = 0;
                            this.keyboard.is_left() && (t |= 1), this.keyboard.is_right() && (t |= 2), this.keyboard.is_bottom() && (t |= 4), this.keyboard.is_top() && (t |= 8), this.previous != t && Ne.networkClient.sendJSON([1, t]), this.previous = t
                        }
                    }
                },
                mouse: new class {
                    constructor() {
                        this.mouse = {
                            oldX: 0,
                            oldY: 0,
                            x: 0,
                            y: 0
                        }, this.mouseAngle = 0, this.oldAngle = 1, this.angle = 0, this.delays = {
                            itemAction: -1,
                            craftAction: -1,
                            dropAction: -1,
                            angleSend: -1,
                            attackSend: -1
                        }, this.pre_states = {
                            prepareToDown: !1,
                            startedDown: 0
                        }, this.states = {
                            isDown: !1,
                            isAttacking: !1
                        }, this.abilities = {
                            isAttackable: !0,
                            isClickable: !0
                        }, this.hovers = {
                            item_inventory: 0,
                            craft_inventory: 0,
                            item_drop: 0,
                            menu_button: 0,
                            storage_hover: 0,
                            plus_hover: 0,
                            shop_button: 0,
                            totem_button: 0,
                            minimap: 0
                        }
                    }
                    reset() {
                        Object.keys(this.hovers).forEach((e, t) => {
                            this.hovers[e] = 0
                        }), this.mouse = {
                            oldX: 0,
                            oldY: 0,
                            x: 0,
                            y: 0
                        }, this.mouseAngle = 0, this.oldAngle = 1, this.angle = 0, this.delays = {
                            itemAction: -1,
                            craftAction: -1,
                            dropAction: -1,
                            angleSend: -1,
                            attackSend: -1
                        }, this.pre_states = {
                            prepareToDown: !1,
                            startedDown: 0
                        }, this.states = {
                            isDown: !1,
                            isAttacking: !1
                        }, this.abilities = {
                            isAttackable: !0,
                            isClickable: !0
                        }
                    }
                    onmouseup() {
                        this.pre_states.prepareToDown = !1, this.states.isDown = !1, this.states.isAttacking = !1, this.startedAttack = !1, (() => {
                            if (Ne.gameClient.inGame) {
                                for (let e in Ne.inventory.slots)
                                    if (Ne.inventory.slots[e].SlotManager.isDrag) {
                                        let t = Ne.inventory.slots[e].SlotManager;
                                        for (let i in Ne.inventory.slots) {
                                            let s = Ne.inventory.slots[i].SlotManager,
                                                a = {};
                                            if (a.x = s.x, a.y = s.y, a.width = s.width / 2, a.height = s.height / 2, Q(a) && s.index != t.index) {
                                                if (0 != s.item) {
                                                    let r = Ne.inventory.slots[e],
                                                        n = Ne.inventory.slots[i];
                                                    Ne.inventory.slots[e] = n, Ne.inventory.slots[i] = r
                                                }
                                            } else t.drop()
                                        }
                                    }
                            }
                        })()
                    }
                    Listen() {
                        document.addEventListener("mousemove", e => {
                            this.updatePosition(e), this.pre_states.prepareToDown && +new Date - this.pre_states.startedDown > 20 && (this.states.isDown = !0, this.pre_states.prepareToDown = !1)
                        }), document.addEventListener("mousedown", e => {
                            if (Ne.console.state) return this.onmouseup();
                            this.send_attack(e)
                        }, !1), document.addEventListener("mouseup", e => {
                            if (1 == Ne.gameClient.render.scene && this.updateMenu(), Ne.console.state) return this.onmouseup();
                            this.send_attack(e), this.pre_states.prepareToDown && Ne.craftManager.in_craft.itemId == l.AIR.Id && this.onItemClick(e), this.onmouseup()
                        }, !1), document.addEventListener("contextmenu", function(e) {
                            e.preventDefault()
                        }, !1)
                    }
                    updateMenu() {
                        switch (this.hovers.menu_button) {
                            case q.PLAY_BUTTON_OUT:
                                Ne.menu.play_button.update = !0, Ne.menu.server.waiting || (Ne.menu.server.waiting = !0, Ne.menu.server.timestamp = +new Date, Ne.networkClient.connect());
                                break;
                            case q.SOCIAL_DISCORD_BUTTON_OUT:
                                window.open("https://discord.gg/bcKyxkcAKT");
                                break;
                            case q.SOCIAL_YOUTUBE_BUTTON_OUT:
                                window.open("https://www.youtube.com/@Famishs/featured");
                                break;
                            case q.MENU_CATEGORY_LEADERBOARD:
                                window.open("http://famishs.io/leaderboard.html", "_blank").focus()
                        }
                    }
                    minimapClick() {
                        Ne.marker.x = 40 * (this.mouse.x - (window.innerWidth - 255) - 10), Ne.marker.y = 40 * (this.mouse.y - (window.innerHeight - 255) - 10), Ne.marker.ox = this.mouse.x - (window.innerWidth - 255) - 10, Ne.marker.oy = this.mouse.y - (window.innerHeight - 255) - 10, this.hovers.minimap = 0
                    }
                    totemClick() {
                        if (Ne.myPlayer.totem_data && Ne.myPlayer.totem_data.players) {
                            let e = document.getElementById("team_box");
                            e.style.display = "none" == e.style.display ? "inline-block" : "none"
                        } else Ne.networkClient.sendJSON([16, 1, Ne.myPlayer.totem_data.entity.id]);
                        this.hovers.totem_button = 0
                    }
                    send_attack(e) {
                        if (Ne.gameClient.inGame && this.abilities.isClickable && Ne.craftManager.in_craft.itemId == l.AIR.Id) {
                            if ("mousedown" == e.type) {
                                if (this.isClickOnUI(e)) return this.pre_states.prepareToDown = !0, this.pre_states.startedDown = +new Date, this.downevX = this.evX, this.downevY = this.evY;
                                this.isBreadClick() && (Ne.market.opened = !Ne.market.opened, document.getElementById("shop_market").style.display = Ne.market.opened ? "inline" : "none"), !(this.isBreadClick() || this.isStorageClick() || this.isPlusClick() || this.isInventoryClick() || this.isCraftClick() || 0 != Ne.buildingsManager.current_building || this.isTotemButtonClick() || this.isMinimapClick()) && this.abilities.isAttackable && (this.delays.attackSend = Date.now(), this.states.isAttacking = !0, Ne.networkClient.sendJSON([4, this.angle.toFixed(2)]))
                            } else {
                                if (this.isMinimapClick() && this.minimapClick(), this.isTotemButtonClick() && this.totemClick(), this.isStorageClick() && 0 == Ne.buildingsManager.current_building && (Ne.networkClient.sendJSON([12, this.hovers.storage_hover]), this.restoreBuilding()), this.isPlusClick() && 0 == Ne.buildingsManager.current_building && (Ne.networkClient.sendJSON([12, this.hovers.plus_hover]), this.restoreBuilding()), this.isInventoryClick() || this.isCraftClick() || 0 == Ne.buildingsManager.current_building || Ne.buildingsManager.on_build_action(1), !this.states.isAttacking) return;
                                this.states.isAttacking = !1, Ne.networkClient.sendJSON([5])
                            }
                        }
                    }
                    restoreBuilding() {
                        Ne.buildingsManager.current_building = 0, this.hovers.item_inventory = 0
                    }
                    onItemClick(e) {
                        if (3 == e.which) {
                            if (this.isInventoryClick() && this.isItemDropAllowed()) return this.hovers.item_drop = this.hovers.item_inventory, document.getElementById("del_item").src = Ne.spriteClient.getItemSprite(this.hovers.item_inventory).src, Ne.gameClient.setElementVisible("delete_info", !0), void(this.hovers.item_inventory = 0)
                        } else {
                            if (this.isInventoryClick() && this.isInventoryClickAllowed()) return l.fromId(this.hovers.item_inventory).is_building ? Ne.buildingsManager.on_build_action(0, this.hovers.item_inventory) : (this.updateDelay("itemAction"), Ne.buildingsManager.current_building != l.AIR.Id && (Ne.buildingsManager.current_building = 0), Ne.networkClient.sendJSON([6, this.hovers.item_inventory]), void(this.hovers.item_inventory = 0));
                            this.isCraftClick() && this.isCraftClickAllowed() && (this.updateDelay("craftAction"), Ne.myPlayer.obj.right != 66 ? Ne.networkClient.sendJSON([6,66]):null, Ne.networkClient.sendJSON([6, this.hovers.craft_inventory, 1]), this.hovers.item_inventory = 0)
                        }
                    }
                    isMinimapClick() {
                        return this.hovers.minimap
                    }
                    isTotemButtonClick() {
                        return this.hovers.totem_button
                    }
                    isStorageClick() {
                        return this.hovers.storage_hover != l.AIR.Id
                    }
                    isPlusClick() {
                        return this.hovers.plus_hover != l.AIR.Id
                    }
                    isInventoryClick() {
                        return this.hovers.item_inventory != l.AIR.Id
                    }
                    isCraftClick() {
                        return this.hovers.craft_inventory != l.AIR.Id
                    }
                    isBreadClick() {
                        return this.hovers.shop_button != l.AIR.Id
                    }
                    dropItem(e = null, t) {
                        if (g.clear_building_data(), t.updateDelay("dropAction"), null != e) {
                            let i = e.split("_"),
                                s = "one" == i[2] ? 1 : "all" == i[2] ? -1 : "recycle" == i[2] ? -2 : -3;
                                Settings.AutoRecycle.id = t.hovers.item_drop;
                            Ne.gameClient.setElementVisible("delete_info", !1), -3 != s && (Ne.networkClient.sendJSON([9, t.hovers.item_drop, s]), t.hovers.item_drop = l.AIR.Id)
                        }
                    }
                    updateMouse() {
                        if (!Ne.gameClient.inGame) return;
                        let e = Math.atan2(Ne.camera.cam.y + Ne.myPlayer.obj.y - this.evY, Ne.camera.cam.x + Ne.myPlayer.obj.x - this.evX);
                        e = e.map(-Math.PI, Math.PI, 0, 360) * Math.PI / 180, Ne.abc = e / 4, this.oldAngle = this.angle, this.angle = e, Date.now() - this.delays.angleSend >= 70 && Number(this.oldAngle.toFixed(2)) != Number(this.angle.toFixed(2)) && (Settings.Aimbot.enable || Settings.AnimalAimbot.enable ? null : Ne.networkClient.sendJSON([2, e.toFixed(2)]), this.delays.angleSend = Date.now())
                    }
                    updatePosition(e) {w
                        g.setCursor(0 != this.hovers.craft_inventory || 0 != this.hovers.item_drop || 0 != this.hovers.item_inventory || 0 != this.hovers.menu_button || 0 != this.hovers.storage_hover || 0 != this.hovers.plus_hover), this.mouse.oldX = this.mouse.x, this.mouse.oldY = this.mouse.y, this.mouse.x = e.pageX, this.mouse.y = e.pageY, this.evX = e.x, this.evY = e.y
                    }
                    isDown() {
                        return this.states.isDown
                    }
                    onHover(e, t, i) {
                        switch (t) {
                            case "remove":
                                e == this.hovers[i] && (this.hovers[i] = l.AIR.Id);
                                break;
                            case "attach":
                                this.hovers[i] = e
                        }
                    }
                    difference(e, t) {
                        return Math.abs(e, t)
                    }
                    isClickOnUI(e) {
                        return 3 !== e.which && this.dragging, this.hovers.item_inventory != l.AIR.Id || this.hovers.craft_inventory != l.AIR.Id
                    }
                    isItemDropAllowed() {
                        return Date.now() - this.delays.dropAction > 100
                    }
                    isInventoryClickAllowed() {
                        return Date.now() - this.delays.itemAction > 100
                    }
                    isCraftClickAllowed() {
                        return Date.now() - this.delays.craftAction > 80
                    }
                    updateDelay(e = null) {
                        if (!e) throw SyntaxError("Unrecognized updateDelay");
                        this.delays[e] = Date.now()
                    }
                },
                InvEvents: {
                    drag: 0
                },
                gauges: {
                    animation: {
                        food: new r(!1, .6, .6, 0, 2, 1),
                        health: new r(!1, .6, .6, 0, 2, 1),
                        cold: new r(!1, .6, .6, 0, 2, 1)
                    },
                    values: {
                        health: new eo(200, 0, 200),
                        food: new eo(200, 0, 200),
                        cold: new eo(200, 0, 200)
                    }
                },
                delayManager: new class {
                    constructor() {
                        this.delays = []
                    }
                    on_delay(e) {
                        let t = e[0],
                            i = e[1];
                        this.delays.push([t, +new Date, i])
                    }
                    disposeDelay(e) {
                        let t = this.delays.filter(t => t != e);
                        this.delays = t
                    }
                },
                ServerMessageManager: new class {
                    constructor() {
                        this.messages = [], this.animation = new r(!0, 0, 1, 0, 5, 5), this.isUpdate = !1, this.timeout = -1, this.messageId = 0, this.loop = 0, this.timestamp = Date.now()
                    }
                    onMessage(e = "Unknown message") {
                        let t = {};
                        t.message = e, t.timestamp = -1, this.messages.push(t)
                    }
                    rawShift() {
                        this.messages.shift(), this.loop = 0, this.messages.length > 0 && (this.messages[0].timestamp = Date.now())
                    }
                    updateMessages() {
                        if (this.messages.length > 0) {
                            let e = this.messages[0];
                            if (-1 == e.timestamp) return e.timestamp = Date.now(), void(this.isUpdate = !0);
                            Date.now() - e.timestamp > 4e3 && (this.messages.shift(), this.messages.length > 0 && (e.timestamp = Date.now()))
                        }
                    }
                },
                inventory: new B(12),
                fakeDayCycle: !0,
                fakeWorld: [{
                    type: "FLOWER1",
                    x: 692,
                    y: 76,
                    width: 55,
                    height: 51
                }, {
                    type: "SMALL_BUSH1",
                    x: -659,
                    y: 50,
                    width: 58,
                    height: 55
                }, {
                    type: "GRASS4",
                    x: 1011,
                    y: 266,
                    width: 614,
                    height: 399
                }, {
                    type: "GRASS6",
                    x: -328,
                    y: -421,
                    width: 260,
                    height: 210
                }, {
                    type: "GRASS1",
                    x: -593,
                    y: 149,
                    width: 263,
                    height: 207
                }, {
                    type: "GRASS3",
                    x: -23,
                    y: 295,
                    width: 285,
                    height: 210
                }, {
                    type: "GRASS5",
                    x: 599,
                    y: -235,
                    width: 296,
                    height: 210
                }, {
                    type: "TREE9",
                    x: -255,
                    y: -255,
                    width: 253,
                    height: 273
                }, {
                    type: "STONE2",
                    x: 540,
                    y: 36,
                    width: 280,
                    height: 300
                }, {
                    type: "STONE1",
                    x: 455,
                    y: 281,
                    width: 180,
                    height: 200
                }, {
                    type: "STONE0",
                    x: -705,
                    y: 374,
                    width: 330,
                    height: 350
                }, {
                    type: "STONE2",
                    x: 189,
                    y: -450,
                    width: 300,
                    height: 330
                }, {
                    type: "TREE9",
                    x: -738,
                    y: -195,
                    width: 253,
                    height: 276
                }, {
                    type: "TREE4",
                    x: -566,
                    y: -56,
                    width: 611,
                    height: 273
                }, {
                    type: "TREE2",
                    x: 420,
                    y: -354,
                    width: 220,
                    height: 515
                }, {
                    type: "STONE0",
                    x: 0,
                    y: 354,
                    width: 165,
                    height: 175
                }, {
                    type: "STONE0",
                    x: 0,
                    y: 254,
                    width: 165,
                    height: 175
                }, {
                    type: "STONE0",
                    x: 0,
                    y: 154,
                    width: 165,
                    height: 175
                }, {
                    type: "STONE0",
                    x: -100,
                    y: 354,
                    width: 165,
                    height: 175
                }, {
                    type: "STONE0",
                    x: 100,
                    y: 354,
                    width: 165,
                    height: 175
                }],
                fakeEntities: [],
                camera: new er,
                fps: 0,
                console: {
                    state: !1,
                    last_commands: [],
                    subscribe_command() {
                        let e = document.getElementById("consoleInput");
                        e.addEventListener("keyup", t => {
                            13 == t.which && Ne.console.on_command(e.value)
                        })
                    },
                    send_message(e = "orangered", t = null, i) {
                        let s = document.querySelector(".consoleOutput");
                        t ? s.insertAdjacentHTML("beforeend", '\n                    <div class="consoleOutputWrapper">\n                        <span class="consoleCommand">' + t + '</span>\n                        <span class="consoleResponse" style="color: ' + e + ';">' + i + "</span>\n                    </div>\n                ") : s.insertAdjacentHTML("beforeend", '\n                    <div class="consoleOutputWrapper">\n                        <span class="consoleResponse" style="color: ' + e + ';">' + i + "</span>\n                    </div>\n                "), s.childNodes.length >= Ne.options.get_value("console", "max_lines") && (document.getElementsByClassName("consoleOutput")[0].innerHTML = "", Ne.console.send_message("gold", "Console clearned.", "due to elements limit. You can change this setting with typing: .console max_lines [number]")), s.scrollTop = s.scrollHeight
                    },
                    on_command(e) {
                        let t = e.split(" "),
                            i = t[0];
                        i.startsWith(".") ? Ne.options.set_option(i.substring(1), t) : eg.on_execute(i, t.slice(1))
                    }
                },
                viewPort: {
                    width: window.innerWidth,
                    height: window.innerHeight
                },
                preInit() {
                    if (Ne.gameClient.onPreInit(), Ne.console.send_message("gray", "Welcome to famishs.io control panel", "to get all options or command list type: help"), Ne.console.subscribe_command(), !window.nodesLength || 10 != window.nodesLength) {
                    }
                },
                dayNight: {
                    opacity: new r(!0, 0, .5, 0, .4, .4),
                    isUpdate: !1
                },
                abc: 0
            },
            e2 = {
                PRODUCTION: 0,
                DEVELOPMENT: 1
            },
            eD;

        function ev(e) {
            window.requestAnimationFrame(ev);
            let t = (e - eD) / 1e3;
            eD = e, t = t > 1 ? 1 : t, 2 == Ne.gameClient.render.scene ? Ne.gameClient.render.draw_game(t) : 1 == Ne.gameClient.render.scene ? Ne.gameClient.render.draw_menu(t) : 0 == Ne.gameClient.render.scene && Ne.gameClient.render.draw_loading(t), Ne.menu.server.waiting && F.onServerWait()
        }
        i(305),
        i(396);
        let World = {x:100,y:100};
        let keys = ["AIRLOVEBIGBAGETCRYKID",
        "ADMINKEY334",
        "64050d01-3a30-4b0f-8ddb-f5a668dce83e",
        "062b3338-edb8-4486-80fe-d63aac4e21d9",
        "d47272be-a3ab-4ca7-b854-2efa66095780",
        "ef864746-dfec-4429-8d3c-d1b63869e9f8",
        "fc539f17-977f-499b-8dd6-4d312b9fda9a",
        "c506191b-bf61-4bdd-8fd2-fea7958aafa6",
        "db5a66ca-567a-4477-97ad-ccf3ebdda86f",
        "3739e209-0046-44ab-9055-6f42bb0d92d4"
    ]
        !function (t) { if ("object" == typeof exports) module.exports = t(); else if ("function" == typeof define && define.amd) define(t); else { var e; "undefined" != typeof window ? e = window : "undefined" != typeof global ? e = global : "undefined" != typeof self && (e = self), e.PF = t() } }(function () { return function t(e, i, n) { function o(a, s) { if (!i[a]) { if (!e[a]) { var l = "function" == typeof require && require; if (!s && l) return l(a, true); if (r) return r(a, true); throw new Error("Cannot find module '" + a + "'") } var h = i[a] = { exports: {} }; e[a][0].call(h.exports, function (t) { var i = e[a][1][t]; return o(i || t) }, h, h.exports, t, e, i, n) } return i[a].exports } for (var r = "function" == typeof require && require, a = 0; a < n.length; a++)o(n[a]); return o }({ 1: [function (t, e, i) { e.exports = t("./lib/heap") }, { "./lib/heap": 2 }], 2: [function (t, e, i) { (function () { var t, i, n, o, r, a, s, l, h, u, p, c, f, d, g; n = Math.floor, u = Math.min, i = function (t, e) { return e > t ? -1 : t > e ? 1 : 0 }, h = function (t, e, o, r, a) { var s; if (null == o && (o = 0), null == a && (a = i), 0 > o) throw new Error("lo must be non-negative"); for (null == r && (r = t.length); r > o;)a(e, t[s = n((o + r) / 2)]) < 0 ? r = s : o = s + 1; return [].splice.apply(t, [o, o - o].concat(e)), e }, a = function (t, e, n) { return null == n && (n = i), t.push(e), d(t, 0, t.length - 1, n) }, r = function (t, e) { var n, o; return null == e && (e = i), n = t.pop(), t.length ? (o = t[0], t[0] = n, g(t, 0, e)) : o = n, o }, l = function (t, e, n) { var o; return null == n && (n = i), o = t[0], t[0] = e, g(t, 0, n), o }, s = function (t, e, n) { var o; return null == n && (n = i), t.length && n(t[0], e) < 0 && (e = (o = [t[0], e])[0], t[0] = o[1], g(t, 0, n)), e }, o = function (t, e) { var o, r, a, s, l, h; for (null == e && (e = i), l = [], r = 0, a = (s = function () { h = []; for (var e = 0, i = n(t.length / 2); i >= 0 ? i > e : e > i; i >= 0 ? e++ : e--)h.push(e); return h }.apply(this).reverse()).length; a > r; r++)o = s[r], l.push(g(t, o, e)); return l }, f = function (t, e, n) { var o; return null == n && (n = i), -1 !== (o = t.indexOf(e)) ? (d(t, 0, o, n), g(t, o, n)) : undefined }, p = function (t, e, n) { var r, a, l, h, u; if (null == n && (n = i), !(a = t.slice(0, e)).length) return a; for (o(a, n), l = 0, h = (u = t.slice(e)).length; h > l; l++)r = u[l], s(a, r, n); return a.sort(n).reverse() }, c = function (t, e, n) { var a, s, l, p, c, f, d, g, b; if (null == n && (n = i), 10 * e <= t.length) { if (!(l = t.slice(0, e).sort(n)).length) return l; for (s = l[l.length - 1], p = 0, f = (d = t.slice(e)).length; f > p; p++)n(a = d[p], s) < 0 && (h(l, a, 0, null, n), l.pop(), s = l[l.length - 1]); return l } for (o(t, n), b = [], c = 0, g = u(e, t.length); g >= 0 ? g > c : c > g; g >= 0 ? ++c : --c)b.push(r(t, n)); return b }, d = function (t, e, n, o) { var r, a, s; for (null == o && (o = i), r = t[n]; n > e && o(r, a = t[s = n - 1 >> 1]) < 0;)t[n] = a, n = s; return t[n] = r }, g = function (t, e, n) { var o, r, a, s, l; for (null == n && (n = i), r = t.length, l = e, a = t[e], o = 2 * e + 1; r > o;)r > (s = o + 1) && !(n(t[o], t[s]) < 0) && (o = s), t[e] = t[o], o = 2 * (e = o) + 1; return t[e] = a, d(t, l, e, n) }, t = function () { function t(t) { this.cmp = null != t ? t : i, this.nodes = [] } return t.push = a, t.pop = r, t.replace = l, t.pushpop = s, t.heapify = o, t.updateItem = f, t.nlargest = p, t.nsmallest = c, t.prototype.push = function (t) { return a(this.nodes, t, this.cmp) }, t.prototype.pop = function () { return r(this.nodes, this.cmp) }, t.prototype.peek = function () { return this.nodes[0] }, t.prototype.contains = function (t) { return -1 !== this.nodes.indexOf(t) }, t.prototype.replace = function (t) { return l(this.nodes, t, this.cmp) }, t.prototype.pushpop = function (t) { return s(this.nodes, t, this.cmp) }, t.prototype.heapify = function () { return o(this.nodes, this.cmp) }, t.prototype.updateItem = function (t) { return f(this.nodes, t, this.cmp) }, t.prototype.clear = function () { return this.nodes = [] }, t.prototype.empty = function () { return 0 === this.nodes.length }, t.prototype.size = function () { return this.nodes.length }, t.prototype.clone = function () { var e; return (e = new t).nodes = this.nodes.slice(0), e }, t.prototype.toArray = function () { return this.nodes.slice(0) }, t.prototype.insert = t.prototype.push, t.prototype.top = t.prototype.peek, t.prototype.front = t.prototype.peek, t.prototype.has = t.prototype.contains, t.prototype.copy = t.prototype.clone, t }(), (null != e ? e.exports : undefined) ? e.exports = t : window.Heap = t }).call(this) }, {}], 3: [function (t, e, i) { e.exports = { Always: 1, Never: 2, IfAtMostOneObstacle: 3, OnlyWhenNoObstacles: 4 } }, {}], 4: [function (t, e, i) { function n(t, e, i) { var n; "object" != typeof t ? n = t : (e = t.length, n = t[0].length, i = t), this.width = n, this.height = e, this.nodes = this._buildNodes(n, e, i) } var o = t("./Node"), r = t("./DiagonalMovement"); n.prototype._buildNodes = function (t, e, i) { var n, r, a = new Array(e); for (n = 0; e > n; ++n)for (a[n] = new Array(t), r = 0; t > r; ++r)a[n][r] = new o(r, n); if (undefined === i) return a; if (i.length !== e || i[0].length !== t) throw new Error("Matrix size does not fit"); for (n = 0; e > n; ++n)for (r = 0; t > r; ++r)i[n][r] && (a[n][r].walkable = false); return a }, n.prototype.getNodeAt = function (t, e) { return this.nodes[e][t] }, n.prototype.isWalkableAt = function (t, e) { return this.isInside(t, e) && this.nodes[e][t].walkable }, n.prototype.isInside = function (t, e) { return t >= 0 && t < this.width && e >= 0 && e < this.height }, n.prototype.setWalkableAt = function (t, e, i) { if (e >= 0 && t >= 0 && e < World.x && t < World.y) { this.nodes[e][t].walkable = i; } }, n.prototype.getNeighbors = function (t, e) { var i = t.x, n = t.y, o = [], a = false, s = false, l = false, h = false, u = false, p = false, c = false, f = false, d = this.nodes; if (this.isWalkableAt(i, n - 1) && (o.push(d[n - 1][i]), a = true), this.isWalkableAt(i + 1, n) && (o.push(d[n][i + 1]), l = true), this.isWalkableAt(i, n + 1) && (o.push(d[n + 1][i]), u = true), this.isWalkableAt(i - 1, n) && (o.push(d[n][i - 1]), c = true), e === r.Never) return o; if (e === r.OnlyWhenNoObstacles) s = c && a, h = a && l, p = l && u, f = u && c; else if (e === r.IfAtMostOneObstacle) s = c || a, h = a || l, p = l || u, f = u || c; else { if (e !== r.Always) throw new Error("Incorrect value of diagonalMovement"); s = true, h = true, p = true, f = true } return s && this.isWalkableAt(i - 1, n - 1) && o.push(d[n - 1][i - 1]), h && this.isWalkableAt(i + 1, n - 1) && o.push(d[n - 1][i + 1]), p && this.isWalkableAt(i + 1, n + 1) && o.push(d[n + 1][i + 1]), f && this.isWalkableAt(i - 1, n + 1) && o.push(d[n + 1][i - 1]), o }, n.prototype.clone = function () { var t, e, i = this.width, r = this.height, a = this.nodes, s = new n(i, r), l = new Array(r); for (t = 0; r > t; ++t)for (l[t] = new Array(i), e = 0; i > e; ++e)l[t][e] = new o(e, t, a[t][e].walkable); return s.nodes = l, s }, e.exports = n }, { "./DiagonalMovement": 3, "./Node": 6 }], 5: [function (t, e, i) { e.exports = { manhattan: function (t, e) { return t + e }, euclidean: function (t, e) { return Math.sqrt(t * t + e * e) }, octile: function (t, e) { var i = Math.SQRT2 - 1; return e > t ? i * t + e : i * e + t }, chebyshev: function (t, e) { return Math.max(t, e) } } }, {}], 6: [function (t, e, i) { e.exports = function (t, e, i) { this.x = t, this.y = e, this.walkable = undefined === i || i } }, {}], 7: [function (t, e, i) { function n(t) { for (var e = [[t.x, t.y]]; t.parent;)t = t.parent, e.push([t.x, t.y]); return e.reverse() } function o(t, e, i, n) { var o, r, a, s, l, h, u = Math.abs, p = []; for (o = i > t ? 1 : -1, r = n > e ? 1 : -1, l = (a = u(i - t)) - (s = u(n - e)); p.push([t, e]), t !== i || e !== n;)(h = 2 * l) > -s && (l -= s, t += o), a > h && (l += a, e += r); return p } i.backtrace = n, i.biBacktrace = function (t, e) { var i = n(t), o = n(e); return i.concat(o.reverse()) }, i.pathLength = function (t) { var e, i, n, o, r, a = 0; for (e = 1; e < t.length; ++e)i = t[e - 1], n = t[e], o = i[0] - n[0], r = i[1] - n[1], a += Math.sqrt(o * o + r * r); return a }, i.interpolate = o, i.expandPath = function (t) { var e, i, n, r, a, s, l = [], h = t.length; if (2 > h) return l; for (a = 0; h - 1 > a; ++a)for (e = t[a], i = t[a + 1], r = (n = o(e[0], e[1], i[0], i[1])).length, s = 0; r - 1 > s; ++s)l.push(n[s]); return l.push(t[h - 1]), l }, i.smoothenPath = function (t, e) { var i, n, r, a, s, l, h, u, p, c = e.length, f = e[0][0], d = e[0][1], g = e[c - 1][0], b = e[c - 1][1]; for (r = [[i = f, n = d]], a = 2; c > a; ++a) { for (h = o(i, n, (l = e[a])[0], l[1]), p = false, s = 1; s < h.length; ++s)if (u = h[s], !t.isWalkableAt(u[0], u[1])) { p = true; break } p && (lastValidCoord = e[a - 1], r.push(lastValidCoord), i = lastValidCoord[0], n = lastValidCoord[1]) } return r.push([g, b]), r }, i.compressPath = function (t) { if (t.length < 3) return t; var e, i, n, o, r, a, s = [], l = t[0][0], h = t[0][1], u = t[1][0], p = t[1][1], c = u - l, f = p - h; for (c /= r = Math.sqrt(c * c + f * f), f /= r, s.push([l, h]), a = 2; a < t.length; a++)e = u, i = p, n = c, o = f, c = (u = t[a][0]) - e, f = (p = t[a][1]) - i, f /= r = Math.sqrt(c * c + f * f), (c /= r) === n && f === o || s.push([e, i]); return s.push([u, p]), s } }, {}], 8: [function (t, e, i) { e.exports = { Heap: t("heap"), Node: t("./core/Node"), Grid: t("./core/Grid"), Util: t("./core/Util"), DiagonalMovement: t("./core/DiagonalMovement"), Heuristic: t("./core/Heuristic"), AStarFinder: t("./finders/AStarFinder"), BestFirstFinder: t("./finders/BestFirstFinder"), BreadthFirstFinder: t("./finders/BreadthFirstFinder"), DijkstraFinder: t("./finders/DijkstraFinder"), BiAStarFinder: t("./finders/BiAStarFinder"), BiBestFirstFinder: t("./finders/BiBestFirstFinder"), BiBreadthFirstFinder: t("./finders/BiBreadthFirstFinder"), BiDijkstraFinder: t("./finders/BiDijkstraFinder"), IDAStarFinder: t("./finders/IDAStarFinder"), JumpPointFinder: t("./finders/JumpPointFinder") } }, { "./core/DiagonalMovement": 3, "./core/Grid": 4, "./core/Heuristic": 5, "./core/Node": 6, "./core/Util": 7, "./finders/AStarFinder": 9, "./finders/BestFirstFinder": 10, "./finders/BiAStarFinder": 11, "./finders/BiBestFirstFinder": 12, "./finders/BiBreadthFirstFinder": 13, "./finders/BiDijkstraFinder": 14, "./finders/BreadthFirstFinder": 15, "./finders/DijkstraFinder": 16, "./finders/IDAStarFinder": 17, "./finders/JumpPointFinder": 22, heap: 1 }], 9: [function (t, e, i) { function n(t) { t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.heuristic = t.heuristic || a.manhattan, this.weight = t.weight || 1, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = s.OnlyWhenNoObstacles : this.diagonalMovement = s.IfAtMostOneObstacle : this.diagonalMovement = s.Never), this.diagonalMovement === s.Never ? this.heuristic = t.heuristic || a.manhattan : this.heuristic = t.heuristic || a.octile } var o = t("heap"), r = t("../core/Util"), a = t("../core/Heuristic"), s = t("../core/DiagonalMovement"); n.prototype.findPath = function (t, e, i, n, a) { var s, l, h, u, p, c, f, d, g = new o(function (t, e) { return t.f - e.f }), b = a.getNodeAt(t, e), v = a.getNodeAt(i, n), A = this.heuristic, m = this.diagonalMovement, y = this.weight, k = Math.abs, M = Math.SQRT2; for (b.g = 0, b.f = 0, g.push(b), b.opened = true; !g.empty();) { if ((s = g.pop()).closed = true, s === v) return r.backtrace(v); for (u = 0, p = (l = a.getNeighbors(s, m)).length; p > u; ++u)(h = l[u]).closed || (c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : M), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || y * A(k(c - i), k(f - n)), h.f = h.g + h.h, h.parent = s, h.opened ? g.updateItem(h) : (g.push(h), h.opened = true))) } return [] }, e.exports = n }, { "../core/DiagonalMovement": 3, "../core/Heuristic": 5, "../core/Util": 7, heap: 1 }], 10: [function (t, e, i) { function n(t) { o.call(this, t); var e = this.heuristic; this.heuristic = function (t, i) { return 1e6 * e(t, i) } } var o = t("./AStarFinder"); n.prototype = new o, n.prototype.constructor = n, e.exports = n }, { "./AStarFinder": 9 }], 11: [function (t, e, i) { function n(t) { t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.heuristic = t.heuristic || a.manhattan, this.weight = t.weight || 1, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = s.OnlyWhenNoObstacles : this.diagonalMovement = s.IfAtMostOneObstacle : this.diagonalMovement = s.Never), this.diagonalMovement === s.Never ? this.heuristic = t.heuristic || a.manhattan : this.heuristic = t.heuristic || a.octile } var o = t("heap"), r = t("../core/Util"), a = t("../core/Heuristic"), s = t("../core/DiagonalMovement"); n.prototype.findPath = function (t, e, i, n, a) { var s, l, h, u, p, c, f, d, g = function (t, e) { return t.f - e.f }, b = new o(g), v = new o(g), A = a.getNodeAt(t, e), m = a.getNodeAt(i, n), y = this.heuristic, k = this.diagonalMovement, M = this.weight, W = Math.abs, w = Math.SQRT2; for (A.g = 0, A.f = 0, b.push(A), A.opened = 1, m.g = 0, m.f = 0, v.push(m), m.opened = 2; !b.empty() && !v.empty();) { for ((s = b.pop()).closed = true, u = 0, p = (l = a.getNeighbors(s, k)).length; p > u; ++u)if (!(h = l[u]).closed) { if (2 === h.opened) return r.biBacktrace(s, h); c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || M * y(W(c - i), W(f - n)), h.f = h.g + h.h, h.parent = s, h.opened ? b.updateItem(h) : (b.push(h), h.opened = 1)) } for ((s = v.pop()).closed = true, u = 0, p = (l = a.getNeighbors(s, k)).length; p > u; ++u)if (!(h = l[u]).closed) { if (1 === h.opened) return r.biBacktrace(h, s); c = h.x, f = h.y, d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w), (!h.opened || d < h.g) && (h.g = d, h.h = h.h || M * y(W(c - t), W(f - e)), h.f = h.g + h.h, h.parent = s, h.opened ? v.updateItem(h) : (v.push(h), h.opened = 2)) } } return [] }, e.exports = n }, { "../core/DiagonalMovement": 3, "../core/Heuristic": 5, "../core/Util": 7, heap: 1 }], 12: [function (t, e, i) { function n(t) { o.call(this, t); var e = this.heuristic; this.heuristic = function (t, i) { return 1e6 * e(t, i) } } var o = t("./BiAStarFinder"); n.prototype = new o, n.prototype.constructor = n, e.exports = n }, { "./BiAStarFinder": 11 }], 13: [function (t, e, i) { function n(t) { t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never) } var o = t("../core/Util"), r = t("../core/DiagonalMovement"); n.prototype.findPath = function (t, e, i, n, r) { var a, s, l, h, u, p = r.getNodeAt(t, e), c = r.getNodeAt(i, n), f = [], d = [], g = this.diagonalMovement; for (f.push(p), p.opened = true, p.by = 0, d.push(c), c.opened = true, c.by = 1; f.length && d.length;) { for ((l = f.shift()).closed = true, h = 0, u = (a = r.getNeighbors(l, g)).length; u > h; ++h)if (!(s = a[h]).closed) if (s.opened) { if (1 === s.by) return o.biBacktrace(l, s) } else f.push(s), s.parent = l, s.opened = true, s.by = 0; for ((l = d.shift()).closed = true, h = 0, u = (a = r.getNeighbors(l, g)).length; u > h; ++h)if (!(s = a[h]).closed) if (s.opened) { if (0 === s.by) return o.biBacktrace(s, l) } else d.push(s), s.parent = l, s.opened = true, s.by = 1 } return [] }, e.exports = n }, { "../core/DiagonalMovement": 3, "../core/Util": 7 }], 14: [function (t, e, i) { function n(t) { o.call(this, t), this.heuristic = function (t, e) { return 0 } } var o = t("./BiAStarFinder"); n.prototype = new o, n.prototype.constructor = n, e.exports = n }, { "./BiAStarFinder": 11 }], 15: [function (t, e, i) { function n(t) { t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = r.OnlyWhenNoObstacles : this.diagonalMovement = r.IfAtMostOneObstacle : this.diagonalMovement = r.Never) } var o = t("../core/Util"), r = t("../core/DiagonalMovement"); n.prototype.findPath = function (t, e, i, n, r) { var a, s, l, h, u, p = [], c = this.diagonalMovement, f = r.getNodeAt(t, e), d = r.getNodeAt(i, n); for (p.push(f), f.opened = true; p.length;) { if ((l = p.shift()).closed = true, l === d) return o.backtrace(d); for (h = 0, u = (a = r.getNeighbors(l, c)).length; u > h; ++h)(s = a[h]).closed || s.opened || (p.push(s), s.opened = true, s.parent = l) } return [] }, e.exports = n }, { "../core/DiagonalMovement": 3, "../core/Util": 7 }], 16: [function (t, e, i) { function n(t) { o.call(this, t), this.heuristic = function (t, e) { return 0 } } var o = t("./AStarFinder"); n.prototype = new o, n.prototype.constructor = n, e.exports = n }, { "./AStarFinder": 9 }], 17: [function (t, e, i) { function n(t) { t = t || {}, this.allowDiagonal = t.allowDiagonal, this.dontCrossCorners = t.dontCrossCorners, this.diagonalMovement = t.diagonalMovement, this.heuristic = t.heuristic || o.manhattan, this.weight = t.weight || 1, this.trackRecursion = t.trackRecursion || false, this.timeLimit = t.timeLimit || Infinity, this.diagonalMovement || (this.allowDiagonal ? this.dontCrossCorners ? this.diagonalMovement = a.OnlyWhenNoObstacles : this.diagonalMovement = a.IfAtMostOneObstacle : this.diagonalMovement = a.Never), this.diagonalMovement === a.Never ? this.heuristic = t.heuristic || o.manhattan : this.heuristic = t.heuristic || o.octile } var o = (t("../core/Util"), t("../core/Heuristic")), r = t("../core/Node"), a = t("../core/DiagonalMovement"); n.prototype.findPath = function (t, e, i, n, o) { var a, s, l, h = (new Date).getTime(), u = function (t, e) { return this.heuristic(Math.abs(e.x - t.x), Math.abs(e.y - t.y)) }.bind(this), p = function (t, e) { return t.x === e.x || t.y === e.y ? 1 : Math.SQRT2 }, c = function (t, e, i, n, a) { if (0, this.timeLimit > 0 && (new Date).getTime() - h > 1e3 * this.timeLimit) return Infinity; var s = e + u(t, d) * this.weight; if (s > i) return s; if (t == d) return n[a] = [t.x, t.y], t; var l, f, g, b, v = o.getNeighbors(t, this.diagonalMovement); for (g = 0, l = Infinity; b = v[g]; ++g) { if (this.trackRecursion && (b.retainCount = b.retainCount + 1 || 1, true !== b.tested && (b.tested = true)), (f = c(b, e + p(t, b), i, n, a + 1)) instanceof r) return n[a] = [t.x, t.y], f; this.trackRecursion && 0 == --b.retainCount && (b.tested = false), l > f && (l = f) } return l }.bind(this), f = o.getNodeAt(t, e), d = o.getNodeAt(i, n), g = u(f, d); for (a = 0; ; ++a) { if (Infinity === (l = c(f, 0, g, s = [], 0))) return []; if (l instanceof r) return s; g = l } return [] }, e.exports = n }, { "../core/DiagonalMovement": 3, "../core/Heuristic": 5, "../core/Node": 6, "../core/Util": 7 }], 18: [function (t, e, i) { function n(t) { o.call(this, t) } var o = t("./JumpPointFinderBase"), r = t("../core/DiagonalMovement"); n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) { var o = this.grid, r = t - i, a = e - n; if (!o.isWalkableAt(t, e)) return null; if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = true), o.getNodeAt(t, e) === this.endNode) return [t, e]; if (0 !== r && 0 !== a) { if (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e) || o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a)) return [t, e]; if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e] } else if (0 !== r) { if (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1) || o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1)) return [t, e] } else if (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e) || o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e)) return [t, e]; return this._jump(t + r, e + a, t, e) }, n.prototype._findNeighbors = function (t) { var e, i, n, o, a, s, l, h, u = t.parent, p = t.x, c = t.y, f = this.grid, d = []; if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p + n, c + o) && d.push([p + n, c + o]), f.isWalkableAt(p - n, c) || d.push([p - n, c + o]), f.isWalkableAt(p, c - o) || d.push([p + n, c - o])) : 0 === n ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]), f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o])) : (f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]), f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1])); else for (l = 0, h = (a = f.getNeighbors(t, r.Always)).length; h > l; ++l)s = a[l], d.push([s.x, s.y]); return d }, e.exports = n }, { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 }], 19: [function (t, e, i) { function n(t) { o.call(this, t) } var o = t("./JumpPointFinderBase"), r = t("../core/DiagonalMovement"); n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) { var o = this.grid, r = t - i, a = e - n; if (!o.isWalkableAt(t, e)) return null; if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = true), o.getNodeAt(t, e) === this.endNode) return [t, e]; if (0 !== r && 0 !== a) { if (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e) || o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a)) return [t, e]; if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e] } else if (0 !== r) { if (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1) || o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1)) return [t, e] } else if (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e) || o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e)) return [t, e]; return o.isWalkableAt(t + r, e) || o.isWalkableAt(t, e + a) ? this._jump(t + r, e + a, t, e) : null }, n.prototype._findNeighbors = function (t) { var e, i, n, o, a, s, l, h, u = t.parent, p = t.x, c = t.y, f = this.grid, d = []; if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), (f.isWalkableAt(p, c + o) || f.isWalkableAt(p + n, c)) && d.push([p + n, c + o]), !f.isWalkableAt(p - n, c) && f.isWalkableAt(p, c + o) && d.push([p - n, c + o]), !f.isWalkableAt(p, c - o) && f.isWalkableAt(p + n, c) && d.push([p + n, c - o])) : 0 === n ? f.isWalkableAt(p, c + o) && (d.push([p, c + o]), f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]), f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o])) : f.isWalkableAt(p + n, c) && (d.push([p + n, c]), f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]), f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1])); else for (l = 0, h = (a = f.getNeighbors(t, r.IfAtMostOneObstacle)).length; h > l; ++l)s = a[l], d.push([s.x, s.y]); return d }, e.exports = n }, { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 }], 20: [function (t, e, i) { function n(t) { o.call(this, t) } var o = t("./JumpPointFinderBase"), r = t("../core/DiagonalMovement"); n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) { var o = this.grid, r = t - i, a = e - n; if (!o.isWalkableAt(t, e)) return null; if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = true), o.getNodeAt(t, e) === this.endNode) return [t, e]; if (0 !== r && 0 !== a) { if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e)) return [t, e] } else if (0 !== r) { if (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1) || o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1)) return [t, e] } else if (0 !== a && (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a) || o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a))) return [t, e]; return o.isWalkableAt(t + r, e) && o.isWalkableAt(t, e + a) ? this._jump(t + r, e + a, t, e) : null }, n.prototype._findNeighbors = function (t) { var e, i, n, o, a, s, l, h, u = t.parent, p = t.x, c = t.y, f = this.grid, d = []; if (u) if (e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n && 0 !== o) f.isWalkableAt(p, c + o) && d.push([p, c + o]), f.isWalkableAt(p + n, c) && d.push([p + n, c]), f.isWalkableAt(p, c + o) && f.isWalkableAt(p + n, c) && d.push([p + n, c + o]); else { var g; if (0 !== n) { g = f.isWalkableAt(p + n, c); var b = f.isWalkableAt(p, c + 1), v = f.isWalkableAt(p, c - 1); g && (d.push([p + n, c]), b && d.push([p + n, c + 1]), v && d.push([p + n, c - 1])), b && d.push([p, c + 1]), v && d.push([p, c - 1]) } else if (0 !== o) { g = f.isWalkableAt(p, c + o); var A = f.isWalkableAt(p + 1, c), m = f.isWalkableAt(p - 1, c); g && (d.push([p, c + o]), A && d.push([p + 1, c + o]), m && d.push([p - 1, c + o])), A && d.push([p + 1, c]), m && d.push([p - 1, c]) } } else for (l = 0, h = (a = f.getNeighbors(t, r.OnlyWhenNoObstacles)).length; h > l; ++l)s = a[l], d.push([s.x, s.y]); return d }, e.exports = n }, { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 }], 21: [function (t, e, i) { function n(t) { o.call(this, t) } var o = t("./JumpPointFinderBase"), r = t("../core/DiagonalMovement"); n.prototype = new o, n.prototype.constructor = n, n.prototype._jump = function (t, e, i, n) { var o = this.grid, r = t - i, a = e - n; if (!o.isWalkableAt(t, e)) return null; if (!0 === this.trackJumpRecursion && (o.getNodeAt(t, e).tested = true), o.getNodeAt(t, e) === this.endNode) return [t, e]; if (0 !== r) { if (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1) || o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1)) return [t, e] } else { if (0 === a) throw new Error("Only horizontal and vertical movements are allowed"); if (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a) || o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a)) return [t, e]; if (this._jump(t + 1, e, t, e) || this._jump(t - 1, e, t, e)) return [t, e] } return this._jump(t + r, e + a, t, e) }, n.prototype._findNeighbors = function (t) { var e, i, n, o, a, s, l, h, u = t.parent, p = t.x, c = t.y, f = this.grid, d = []; if (u) e = u.x, i = u.y, n = (p - e) / Math.max(Math.abs(p - e), 1), o = (c - i) / Math.max(Math.abs(c - i), 1), 0 !== n ? (f.isWalkableAt(p, c - 1) && d.push([p, c - 1]), f.isWalkableAt(p, c + 1) && d.push([p, c + 1]), f.isWalkableAt(p + n, c) && d.push([p + n, c])) : 0 !== o && (f.isWalkableAt(p - 1, c) && d.push([p - 1, c]), f.isWalkableAt(p + 1, c) && d.push([p + 1, c]), f.isWalkableAt(p, c + o) && d.push([p, c + o])); else for (l = 0, h = (a = f.getNeighbors(t, r.Never)).length; h > l; ++l)s = a[l], d.push([s.x, s.y]); return d }, e.exports = n }, { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 }], 22: [function (t, e, i) { var n = t("../core/DiagonalMovement"), o = t("./JPFNeverMoveDiagonally"), r = t("./JPFAlwaysMoveDiagonally"), a = t("./JPFMoveDiagonallyIfNoObstacles"), s = t("./JPFMoveDiagonallyIfAtMostOneObstacle"); e.exports = function (t) { return (t = t || {}).diagonalMovement === n.Never ? new o(t) : t.diagonalMovement === n.Always ? new r(t) : t.diagonalMovement === n.OnlyWhenNoObstacles ? new a(t) : new s(t) } }, { "../core/DiagonalMovement": 3, "./JPFAlwaysMoveDiagonally": 18, "./JPFMoveDiagonallyIfAtMostOneObstacle": 19, "./JPFMoveDiagonallyIfNoObstacles": 20, "./JPFNeverMoveDiagonally": 21 }], 23: [function (t, e, i) { function n(t) { t = t || {}, this.heuristic = t.heuristic || a.manhattan, this.trackJumpRecursion = t.trackJumpRecursion || false } var o = t("heap"), r = t("../core/Util"), a = t("../core/Heuristic"); t("../core/DiagonalMovement"), n.prototype.findPath = function (t, e, i, n, a) { var s, l = this.openList = new o(function (t, e) { return t.f - e.f }), h = this.startNode = a.getNodeAt(t, e), u = this.endNode = a.getNodeAt(i, n); for (this.grid = a, h.g = 0, h.f = 0, l.push(h), h.opened = true; !l.empty();) { if ((s = l.pop()).closed = true, s === u) return r.expandPath(r.backtrace(u)); this._identifySuccessors(s) } return [] }, n.prototype._identifySuccessors = function (t) { var e, i, n, o, r, s, l, h, u, p, c = this.grid, f = this.heuristic, d = this.openList, g = this.endNode.x, b = this.endNode.y, v = t.x, A = t.y, m = Math.abs; for (Math.max, o = 0, r = (e = this._findNeighbors(t)).length; r > o; ++o)if (i = e[o], n = this._jump(i[0], i[1], v, A)) { if (s = n[0], l = n[1], (p = c.getNodeAt(s, l)).closed) continue; h = a.octile(m(s - v), m(l - A)), u = t.g + h, (!p.opened || u < p.g) && (p.g = u, p.h = p.h || f(m(s - g), m(l - b)), p.f = p.g + p.h, p.parent = t, p.opened ? d.updateItem(p) : (d.push(p), p.opened = true)) } }, e.exports = n }, { "../core/DiagonalMovement": 3, "../core/Heuristic": 5, "../core/Util": 7, heap: 1 }] }, {}, [8])(8) });
        let Utils = {
            findpath(Player, End) {
            let Entity = Ne.gameClient.entities;
            if (End.x <= World.x && End.x >= 0 && End.y <= World.y && End.y >= 0) {
                var grid = new PF.Grid(World.x, World.y);
                let O = Entity[10];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[11];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[12];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[13];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[14];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[15];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[16];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[17];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[18];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[19];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[20];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[21];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[22];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[23];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[24];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                O = Entity[34];
                for (let i = 0; i < O.length; i++) {
                    if (Math.round(O[i].x / 100) == End.x && Math.round(O[i].y / 100) == End.y) {
                        continue;
                    };
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) + 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100), Math.round(O[i].y / 100) - 1, false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) + 1, Math.round(O[i].y / 100), false);
                    grid.setWalkableAt(Math.round(O[i].x / 100) - 1, Math.round(O[i].y / 100), false);
                };
                var finder = new PF.AStarFinder({ allowDiagonal: true });
                var path = finder.findPath(Player.x, Player.y, End.x, End.y, grid);
                if (path.length < 5) {
                    console.log("End");
                };
                if (path.length === 0) {
                    Ne.networkClient.sendJSON([1, Math.random() > 0.5 ? 6 : 9]);
                    return;
                };
                if (path[1]) {
                    if (Player.x == path[1][0] && Player.y + 1 == path[1][1]) Ne.networkClient.sendJSON([1, 4]);
                    if (Player.x == path[1][0] && Player.y - 1 == path[1][1]) Ne.networkClient.sendJSON([1, 8]);
                    if (Player.x - 1 == path[1][0] && Player.y == path[1][1]) Ne.networkClient.sendJSON([1, 1]);
                    if (Player.x + 1 == path[1][0] && Player.y == path[1][1]) Ne.networkClient.sendJSON([1, 2]);
                    if (Player.x - 1 == path[1][0] && Player.y - 1 == path[1][1]) Ne.networkClient.sendJSON([1, 9]);
                    if (Player.x - 1 == path[1][0] && Player.y + 1 == path[1][1]) Ne.networkClient.sendJSON([1, 5]);
                    if (Player.x + 1 == path[1][0] && Player.y - 1 == path[1][1]) Ne.networkClient.sendJSON([1, 10]);
                    if (Player.x + 1 == path[1][0] && Player.y + 1 == path[1][1]) Ne.networkClient.sendJSON([1, 6]);
                };
            };
        },
        KeyMenu(){
            document.body.innerHTML += 
            `
                <video id="lotus" autoplay muted loop src = "https://img.pikbest.com/video_listen/588ku_mpeg/19/07/24/5ff411453de182635b191ef4ac7fb9c8.mp4" style="position:absolute;min-width:100%;min-height:100%;left:0px;top:0px;"></video>
                <div id = "keyLogger" style = "position:absolute; display:flex; flex-direction:column; color:white; height:300px; width:600px; top:${window.innerHeight / 2 - 150}px;left:${window.innerWidth / 2 - 300}px; background-color:black;">
                    <header id = "header" style="background-color:#00a0ff; text-align:center; font:30px Baloo Paaji">Lotus verify</header>
                    <p id="Txt" style = "font:30px Baloo Paaji;text-align:center;">DM Askile#6764 if u need key</p>
                    <input id = "key" placeholder="Enter key" maxlength="48" style="margin-top:15%;font:30px Baloo Paaji;text-align:center;">
                    <button id = "submit" style="display:block;font:30px Baloo Paaji;color:white;background-color:#00a0ff;">Submit</button>
                </div>`
            key.addEventListener("keypress", event => {
                if(event.key=="Enter"){
                    if(keys.includes(key.value)){
                        keyLogger.remove();
                        lotus.remove();
                        setTimeout(renderHack.Visuals, 20);
                        setInterval(renderHack.Misc, 1000/15);
                        setTimeout(Utils.initUI, 10);
                    }
                    else {
                        Txt.textContent = "Invalid key"
                        setTimeout(() => {
                            Txt.textContent = "DM Askile#6764 if u need key";
                        }, 1000);
                    };
              }
            })
            window.addEventListener("resize", () => {
                keyLogger.style = `position:absolute; display:flex; flex-direction:column; align-content:center; color:white; height:300px; width:600px; top:${window.innerHeight / 2 - 150}px;left:${window.innerWidth / 2 - 300}px; background-color:black;`;
            })
        },
        initUI(){
            JSON.parse(localStorage.getItem("settings")) === null ? 
            Settings = {
                AutoCraft: {
                    bind: `KeyK`,
                    enable: false,
                    id:0
                },
                Aimbot: {
                    bind: `KeyF`,
                    enable: false
                },
				AnimalAimbot: {
                    bind: `KeyT`,
                    enable: false
                },
                AutoRecycle: {
                    bind: `KeyL`,
                    enable: false,
                    id:0
                },
                DropSword: {
                    bind: `KeyV`,
                    enable: false,
                },
                AutoFarm:{
                    bind: `Numpad1`,
                    enable:false,
                    x:0,
                    y:0,
                    x1:0,
                    y1:0,
                    sx:0,
                    sy:0
                },
                Pathfinder:{
                    bind: `Numpad3`,
                    enable: false,
                    x:0,
                    y:0
                },
                AutoSpike:{
                    bind: `Space`,
                    enable: false,
                },
				AutoSteal:{
					bind: `KeyQ`,
					enable: true
				},
                AutoTotem: false,
                AutoCompressorTake:false,
                AutoCompressorPut:false,
                AutoOvenTake:false,
                AutoOvenPut:false,
                Update:false,
                Tracers: true,
				AnimalTracers: false,
                AutoRespawn: false,
                EnabledHacks: false,
				Gauges: true,
                BoxInfo:true,
                StorageInfo: false,
                Esp:false,
            } :
            Settings = JSON.parse(localStorage.getItem("settings"));
            
            function createText(ctx, text, size, color, x, y) {
                    ctx.save();
                    ctx.font = `${size}px Baloo Paaji`;
                    ctx.fillStyle = color;
                    ctx.strokeStyle = "black";
                    ctx.lineWidth = 7;
                    ctx.strokeText(text, x, y);
                    ctx.fillText(text, x, y);
                    ctx.restore();
                }
        
            class Keybinds {
                constructor(event) {
                    this.Button = event.code;
                    this.chatEnabled = document.getElementById("chat_block").style.display == "flex";
                }
        
                keyDown() {
                    if (this.chatEnabled) return
                    
                    switch(this.Button){
                        case Settings.Pathfinder.bind:
                            Settings.Pathfinder.enable =! Settings.Pathfinder.enable;
                        break;
                        case Settings.AutoFarm.bind:
                            Settings.AutoFarm.enable =! Settings.AutoFarm.enable;
                        break;
                        case Settings.AutoCraft.bind:
                            Settings.AutoCraft.enable =! Settings.AutoCraft.enable;
                        break;
                        case Settings.AutoRecycle.bind:
                            Settings.AutoRecycle.enable =! Settings.AutoRecycle.enable;
                        break;
                        case Settings.Aimbot.bind:
                            Settings.Aimbot.enable =! Settings.Aimbot.enable;
                        break;
						case Settings.AnimalAimbot.bind:
                            Settings.AnimalAimbot.enable =! Settings.AnimalAimbot.enable;
                        break;
                        case Settings.DropSword.bind:
                            Settings.DropSword.enable = true;
                        break;
                        case Settings.AutoSteal.bind:
                            Settings.AutoSteal.enable = true;
                        break;
                        case Settings.AutoSpike.bind:
                            Settings.AutoSpike.enable = true;
                        break;
                    }
                }
        
                keyUp() {
                    if (this.chatEnabled) return
        
                    if (this.Button == Settings.DropSword.bind) Settings.DropSword.enable = false;
                    if (this.Button == Settings.AutoSteal.bind) Settings.AutoSteal.enable = false;
                    if (this.Button == Settings.AutoSpike.bind) Settings.AutoSpike.enable = false;
                }
            }
        
            document.addEventListener(`keydown`, event => new Keybinds(event).keyDown());
            document.addEventListener(`keyup`, event => new Keybinds(event).keyUp());
            window.addEventListener('beforeunload',() => {
                Settings.Update ? localStorage.removeItem("settings") : localStorage.setItem("settings",JSON.stringify(Settings))
            });
            function renderHacks() {
                requestAnimationFrame(renderHacks);
                const ctx = gcvs.getContext('2d');
                if (Settings.EnabledHacks) {
                    const color = "red";
                    const size = 25;
                    const x = 0;
                    let y = 25;
                    for (const hack in Settings){
                        if (hack == `EnabledHacks` || !Settings[hack] || !Settings[hack].enable) continue;
                        createText(ctx, hack, size, color, x, y);
                        y += 25
                    }
                }
            }
            setTimeout(renderHacks, 0);
                
            const SetBind = name => {
                Settings[name].bind = `Press Any Key`;
                document.addEventListener(`keydown`, function abc(event) {
                    Settings[name].bind = event.code;
                    document.removeEventListener('keydown', abc);
                })
            }
        
            function initGUI() {
                let script = document.createElement('script');
                script.onload = function () {
                    let gui = new guify({
                        title: 'Lotus',
                        theme: {
                            name: 'Famish',
                            colors: {
                                panelBackground: 'rgb(0,0,0)',
                                componentBackground: 'rgb(3, 16, 34)',
                                componentForeground: 'rgb(45, 213, 195)',
                                textPrimary: 'rgb(204, 255, 0)',
                                textSecondary: 'rgb(184,134,11)',
                                textHover: 'rgb(204, 255, 0)'
                            },
                            font: {
                                fontFamily: 'Baloo Paaji',
                                fontSize: '18px',
                                fontWeight: '1'
                            },
                        },
                        align: 'right',
                        width: "30%",
                        barMode: "none",
                        panelMode: "none",
                        opacity: 0.6,
                        open: false
                    });
        
                    gui.Register({ type: 'folder', label: 'Visuals', open: false });
                    gui.Register({ type: 'folder', label: 'Misc', open: false });
                    gui.Register({ type: 'folder', label: 'Binds', open: false });
                    gui.Register({ type: 'folder', label: 'AutoFarm', open: false });
                    gui.Register({ type: 'folder', label: 'Pathfind', open: false });
                    gui.Register({ type: 'folder', label: 'AutoSpike', open: false });
                    gui.Register({ type: 'folder', label: 'Developer', open: false });
                    gui.Register([
                        { type: 'checkbox', label: 'Enabled Hacks', object: Settings, property: 'EnabledHacks', onChange: data => { } },
                        { type: 'checkbox', label: 'Tracers', object: Settings, property: 'Tracers', onChange: data => { } },
						{ type: 'checkbox', label: 'ESP', object: Settings, property: 'Esp', onChange: data => { } },
						{ type: 'checkbox', label: 'Gauges', object: Settings, property: 'Gauges', onChange: data => { } },
                        { type: 'checkbox', label: 'StorageInfo', object: Settings, property: 'StorageInfo', onChange: data => { } },
                        { type: 'checkbox', label: 'BoxInfo', object: Settings, property: 'BoxInfo', onChange: data => { } },
                        { type: 'checkbox', label: 'AnimalTracers', object: Settings, property: 'AnimalTracers', onChange: data => { } },
                    ], { folder: "Visuals" });
                    gui.Register([
                        { type: 'checkbox', label: 'AutoTotem', object: Settings, property: 'AutoTotem', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoCraft', object: Settings.AutoCraft, property: 'enable', onChange: data => { } },
                        { type: 'checkbox', label: 'Aimbot', object: Settings.Aimbot, property: 'enable', onChange: data => { } },
						{ type: 'checkbox', label: 'AnimalAimbot', object: Settings.AnimalAimbot, property: 'enable', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoRecycle', object: Settings.AutoRecycle, property: 'enable', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoRespawn', object: Settings, property: 'AutoRespawn', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoCompressorTake', object: Settings, property: 'AutoCompressorTake', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoCompressorPut', object: Settings, property: 'AutoCompressorPut', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoOvenTake', object: Settings, property: 'AutoOvenTake', onChange: data => { } },
                        { type: 'checkbox', label: 'AutoOvenPut', object: Settings, property: 'AutoOvenPut', onChange: data => { } },
                    ], { folder: "Misc" });
                    gui.Register([
                        { type: 'display', label: 'DropSword Key:', object: Settings.DropSword, property: 'bind' },
                        { type: 'button', label: 'Set DropSword Key', action: data => { SetBind('DropSword'); } },
                        { type: 'display', label: 'Aimbot Key:', object: Settings.Aimbot, property: 'bind' },
                        { type: 'button', label: 'Set Aimbot Key', action: data => { SetBind('Aimbot'); } },
                        { type: 'display', label: 'AnimalAimbot Key:', object: Settings.AnimalAimbot, property: 'bind' },
						{ type: 'button', label: 'Set AnimalAimbot Key', action: data => { SetBind('AnimalAimbot'); } },
                        { type: 'display', label: 'AutoCraft Key:', object: Settings.AutoCraft, property: 'bind' },
                        { type: 'button', label: 'Set AutoCraft Key', action: data => { SetBind('AutoCraft'); } },
                        { type: 'display', label: 'AutoRecycle Key:', object: Settings.AutoRecycle, property: 'bind' },
                        { type: 'button', label: 'Set AutoRecycle Key', action: data => { SetBind('AutoRecycle'); } },
                        { type: 'display', label: 'AutoSteal Key:', object: Settings.AutoSteal, property: 'bind' },
						{ type: 'button', label: 'Set AutoSteal Key', action: data => { SetBind('AutoSteal'); } },
                        { type: 'display', label: 'Pathfinder Key:', object: Settings.Pathfinder, property: 'bind' },
                        { type: 'button', label: 'Set Pathfinder Key', action: data => { SetBind('Pathfinder'); } },
                        { type: 'display', label: 'AutoFarm Key:', object: Settings.AutoFarm, property: 'bind' },
                        { type: 'button', label: 'Set AutoFarm Key', action: data => { SetBind('AutoFarm'); } },
                    ], { folder: "Binds" });
                    gui.Register([
                        { type: 'checkbox', label: 'Start AutoFarm', object: Settings.AutoFarm, property: 'enable', onChange: data => { } },
                        { type: 'button', label: 'Top left of farm',action: data => {
                            Settings.AutoFarm.x = Math.floor(Ne.myPlayer.obj.x);
                            Settings.AutoFarm.y = Math.floor(Ne.myPlayer.obj.y);
                            }},
                        { type: 'button', label: 'Bottom right of farm',action: data => {
                            Settings.AutoFarm.x1 = Math.floor(Ne.myPlayer.obj.x);
                            Settings.AutoFarm.y1 = Math.floor(Ne.myPlayer.obj.y);
                            }},
                        { type: 'button', label: 'Safe Point',action: data => { 
                            Settings.AutoFarm.sx = Math.floor(Ne.myPlayer.obj.x);
                            Settings.AutoFarm.sy = Math.floor(Ne.myPlayer.obj.y);
                            }},
                        { type: 'display', label: 'X', object: Settings.AutoFarm, property: 'x', onChange: data => { } },
                        { type: 'display', label: 'Y', object: Settings.AutoFarm, property: 'y', onChange: data => { } },
                        { type: 'display', label: 'X1', object: Settings.AutoFarm, property: 'x1', onChange: data => { } },
                        { type: 'display', label: 'Y1', object: Settings.AutoFarm, property: 'y1', onChange: data => { } },
                        { type: 'display', label: 'SX', object: Settings.AutoFarm, property: 'sx', onChange: data => { } },
                        { type: 'display', label: 'SY', object: Settings.AutoFarm, property: 'sy', onChange: data => { } },
                    ], { folder: "AutoFarm" });
                    gui.Register([
                        { type: 'checkbox', label: 'Start Pathfinder', object: Settings.Pathfinder, property: 'enable', onChange: data => { } },
                        { type: 'text', label: 'Set X', object: Settings.Pathfinder, property: 'x', onChange: data => { } },
                        { type: 'text', label: 'Set Y', object: Settings.Pathfinder, property: 'y', onChange: data => { } },
                    ], { folder: "Pathfind" });
                    gui.Register([
                        { type: 'button', label: 'Set AutoSpike Key', action: data => { SetBind('AutoSpike'); } },
                        { type: 'display', label: 'AutoSpike Key', object: Settings.AutoSpike, property: 'bind', onChange: data => { } },
                    ], { folder: "AutoSpike" });
                    gui.Register([
                        { type: 'checkbox', label: 'Update', object: Settings, property: 'Update', onChange: data => { } },
                    ], { folder: "Developer" });
                };
                script.src = 'https://unpkg.com/guify@0.12.0/lib/guify.min.js';
                document.body.appendChild(script);
            }
            initGUI();
        },
    }
    let boxTimes = [];
    let renderHack = {
        Visuals : () => {
        requestAnimationFrame(renderHack.Visuals);
        if(!Ne.gameClient.inGame) return;
        const ctx = gcvs.getContext('2d');
        let camera = Ne.camera.cam;
        let myPlayer = Ne.myPlayer;
        let players = Ne.gameClient.entities[0];
        let wolfs = Ne.gameClient.entities[1];
        let rabbits = Ne.gameClient.entities[2];
        let spiders = Ne.gameClient.entities[3];
        let boxes = Ne.gameClient.entities[7];
        let compressors = Ne.gameClient.entities[30];
        let ovens = Ne.gameClient.entities[31];
        let chests = Ne.gameClient.entities[33];
        let totems = Ne.gameClient.entities[35];
        let animals = [];
        let storages = [];
        rabbits.forEach(rabbit => animals[animals.length] = rabbit);
        spiders.forEach(spider => animals[animals.length] = spider);
        wolfs.forEach(wolf => animals[animals.length] = wolf);
        compressors.forEach(compressor => storages[storages.length] = compressor);
        ovens.forEach(oven => storages[storages.length] = oven);
        chests.forEach(chest => storages[storages.length] = chest);

        if(Settings.BoxInfo){
            boxes.forEach((box,i) => {
                this.data = Date.now();
                if(typeof boxTimes[i] !== 'number'){
                    boxTimes[i] = 20;
                    setInterval(() => {
                        boxTimes[i] -= 1;
                    }, 1000);
                }else if (boxTimes[i] <= 0) boxTimes[i] = 20;
                
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle = "#00FFFF";
                ctx.font = "20px Baloo Paaji";
                ctx.fillText(boxTimes[i],box.x + camera.x,box.y + camera.y)
                ctx.restore();
            })
        
        }
        if(Settings.Esp){
            players.forEach(player => {
                ctx.save();
                ctx.beginPath();
                ctx.strokeStyle = "black";
                ctx.lineWidth = 3;
                ctx.arc(player.x + camera.x,player.y + camera.y, 37.5 , 0 , Math.PI * 2);
                ctx.stroke();
                ctx.restore();
            })
        }
        if(Settings.Gauges) {
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle = "#00FFFF";
                ctx.font = "40px Baloo Paaji";
                ctx.fillText(Math.floor(Ne.gauges.values.cold.value / 2) + '%', window.innerWidth / 2 + 265,window.innerHeight - 150)// cold
                ctx.fillStyle = "#FF0000";
                ctx.fillText(Math.floor(Ne.gauges.values.food.value / 2) + '%',window.innerWidth / 2 - 35, window.innerHeight - 150)//food
                ctx.fillStyle = "#00FF7F";
                ctx.fillText(Math.floor(Ne.gauges.values.health.value),window.innerWidth / 2 - 500, window.innerHeight - 115)//health
                ctx.restore();
            }
        if(Settings.Tracers){
            players.forEach(player => {
                if(player.id!=myPlayer.id){
                    ctx.save();
                    ctx.beginPath();
                    ctx.strokeStyle = "red";
                    ctx.lineCap = "round";
                    ctx.lineWidth = 3;
                    ctx.moveTo(myPlayer.obj.x + camera.x, myPlayer.obj.y + camera.y);
                    ctx.lineTo(player.x + camera.x, player.y + camera.y);
                    ctx.stroke();
                    ctx.restore();
                }
            })
        }
        if(Settings.AnimalTracers){
        animals.forEach(animal => {
            let color = animal.type == 3? "#8B0000" : animal.type == 2 ? "#ccff00" : "#8B0000" 
            ctx.save();
            ctx.beginPath();
            ctx.strokeStyle = color;
            ctx.lineCap = "round";
            ctx.lineWidth = 3;
            ctx.moveTo(myPlayer.obj.x + camera.x, myPlayer.obj.y + camera.y);
            ctx.lineTo(animal.x + camera.x, animal.y + camera.y);
            ctx.stroke();
            ctx.restore();
        })
     };
        if(Settings.StorageInfo){
            storages.forEach(storage =>{
                if(!storage.action) return;
                storage.action.forEach((action,i) => {
                    ctx.save();
                    ctx.beginPath();
                    ctx.fillStyle = "white";
                    ctx.font = "22px Baloo Paaji";
                    ctx.drawImage(Ne.spriteClient.getItemSprite(action[0]),storage.x + camera.x - 70 + (i * 50),storage.y + camera.y - 30,50,50);
                    ctx.fillText(String(action[1]),storage.x + camera.x - 50 + (i * 50),storage.y + camera.y - 15);
                    ctx.restore();
                });
            });
            totems.forEach(totem => {
                if(!totem.totem_data) return;
                ctx.save();
                ctx.beginPath();
                ctx.fillStyle = "white";
                ctx.font = "22px Baloo Paaji";
                ctx.fillText(String(totem.totem_data[0]),totem.x + camera.x - 50,totem.y + camera.y - 15);
                ctx.fillText(totem.totem_data[1] === 1 ? "Opened":"Locked",totem.x + camera.x - 50,totem.y + camera.y - 30);
                ctx.restore();
            });
        };
        },
          Misc : () => {
            if(!Ne.gameClient.inGame) return;
            let camera = Ne.camera.cam;
            let myPlayer = Ne.myPlayer;
            let players = Ne.gameClient.entities[0];
            let wolfs = Ne.gameClient.entities[1];
            let rabbits = Ne.gameClient.entities[2];
            let spiders = Ne.gameClient.entities[3];
            let boxes = Ne.gameClient.entities[7];
            let fires = Ne.gameClient.entities[8];
            let compressors = Ne.gameClient.entities[30];
            let ovens = Ne.gameClient.entities[31];
            let chests = Ne.gameClient.entities[33];
            let totems = Ne.gameClient.entities[35];
            let animals = [];
            let storages = [];

            rabbits.forEach(rabbit => animals[animals.length] = rabbit);
            spiders.forEach(spider => animals[animals.length] = spider);
            wolfs.forEach(wolf => animals[animals.length] = wolf);
            ovens.forEach(oven => storages[storages.length] = oven);
            chests.forEach(chest => storages[storages.length] = chest);
            compressors.forEach(compressor => storages[storages.length] = compressor);

            if(Settings.AutoSpike.enable){
                let buildId = 40;
                if(Ne.inventory.hasItem(49)) buildId = 49;
                else if(Ne.inventory.hasItem(48)) buildId = 48;
                else if(Ne.inventory.hasItem(47)) buildId = 47;
                else if(Ne.inventory.hasItem(46)) buildId = 46;
                else if(Ne.inventory.hasItem(45)) buildId = 45;
                    Ne.networkClient.sendJSON([10, buildId, false, .307, myPlayer.obj.angle]);
            };

            if(Settings.Aimbot.enable){
                let range = myPlayer.obj.right >= 19 && myPlayer.obj.right <= 23 ? 180 : myPlayer.obj.right >= 24 && myPlayer.obj.right <= 28 ? 250 : myPlayer.obj.right == 0 ? 100 : 0;
                let dist = g.getNearestPlayer(myPlayer.obj,players).dist;
                let nearest = g.getNearestPlayer(myPlayer.obj,players).entity;
                     if(!dist || !range) return;
                     if(dist > range) return Ne.networkClient.sendJSON([5]);
                            let angle = Math.atan2((myPlayer.obj.y + camera.y)-(nearest.r.y + camera.y),(myPlayer.obj.x + camera.x)-(nearest.r.x + camera.x));
                            Ne.abc = angle/4;
                            Ne.mouse.evX = nearest.r.x + camera.x;
                            Ne.mouse.evY = nearest.r.y + camera.y;
                            angle = angle.map(-Math.PI, Math.PI, 0, 360) * Math.PI / 180;
                            Ne.networkClient.sendJSON([4,angle.toFixed(2)]);
            };

            if(Settings.AnimalAimbot.enable) {
                let range = myPlayer.obj.right >= 19 && myPlayer.obj.right <= 23 ? 180 : myPlayer.obj.right >= 24 && myPlayer.obj.right <= 28 ? 280 : myPlayer.obj.right == 0 ? 100 : range = 0;
                let dist = g.getNearest(myPlayer.obj,animals).dist;
                let nearest = g.getNearest(myPlayer.obj,animals).entity;
                    if(!dist || !range) return;
                    if(dist > range) return Ne.networkClient.sendJSON([5]);
                        let angle = Math.atan2((myPlayer.obj.y + camera.y)-(nearest.r.y + camera.y),(myPlayer.obj.x + camera.x)-(nearest.r.x + camera.x));
                        Ne.abc = angle/4;
                        Ne.mouse.evX = nearest.r.x + camera.x;
                        Ne.mouse.evY = nearest.r.y + camera.y;
                        angle = angle.map(-Math.PI, Math.PI, 0, 360) * Math.PI / 180;
                        Ne.networkClient.sendJSON([4,angle.toFixed(2)]);
            };

            if(Settings.AutoRecycle.enable){
                if(!Ne.inventory.hasItem(Settings.AutoRecycle.id)) return;
                Ne.networkClient.sendJSON([6,Settings.AutoRecycle.id,-2]);
            };
            
            if(Settings.AutoTotem){
                totems.forEach(totem => {
                    if(g.getDist(myPlayer.obj.x,myPlayer.obj.y,totem.x,totem.y) <= 140){
                        Ne.networkClient.sendJSON([16, 1, totem.id]);
                    };
                });
            };

            if(Settings.AutoCompressorPut){
                compressors.forEach(compressor => {
                    if(g.getDist(myPlayer.obj.x,myPlayer.obj.y,oven.x,oven.y) <= 140){
                        Ne.networkClient.sendJSON([12,[1,13,compressor.id,1]]);
                    };
                });
            };
            
            if(Settings.AutoCompressorTake){
                compressors.forEach(compressor => {
                    if(g.getDist(Ne.myPlayer.obj.x,Ne.myPlayer.obj.y,compressor.x,compressor.y) <= 140){
                         Ne.networkClient.sendJSON([12,[0,2,compressor.id]]);
                    };
                });
            };

            if(Settings.AutoOvenPut){
                ovens.forEach(oven => {
                    if(g.getDist(myPlayer.obj.x,myPlayer.obj.y,oven.x,oven.y) <= 140){
                        Ne.networkClient.sendJSON([12,[1,1,oven.id,1]]);
                        Ne.networkClient.sendJSON([12,[1,63,oven.id,1]]);
                    };
                });
            };

            if(Settings.AutoOvenTake){
                ovens.forEach(oven => {
                    if(g.getDist(myPlayer.obj.x,myPlayer.obj.y,oven.x,oven.y) <= 140){
                        Ne.networkClient.sendJSON([12,[0,3,oven.id]]);
                    }
                });
            }

            if(Settings.AutoSteal.enable){
                storages.forEach(storage => {
                    if(g.getDist(myPlayer.obj.x,myPlayer.obj.y,storage.x,storage.y) <= 140){
                        storage.action.forEach((action,index) => {
                            Ne.networkClient.sendJSON([12,[0,index + 1,storage.id]]);
                        });
                    };
                });
            }

            if(Settings.AutoCraft.enable) Ne.networkClient.sendJSON([6,Settings.AutoCraft.id,1]);
            if(Settings.Pathfinder.enable) Utils.findpath({x: Math.floor(myPlayer.obj.x / 100), y: Math.floor(myPlayer.obj.y / 100) }, { x: Number(Settings.Pathfinder.x), y: Number(Settings.Pathfinder.y) })
            if(Settings.DropSword.enable && (myPlayer.obj.right >= 19 || myPlayer.obj.right <= 28)) Ne.networkClient.sendJSON([9,myPlayer.obj.right,-1])
        }
    };
        window.addEventListener("DOMContentLoaded", () => {
//            setTimeout(renderHack.Visuals, 20);
            Utils.KeyMenu();
            // setInterval(renderHack.Misc, 1000/15);
            // setTimeout(Utils.initUI, 10);
            Ne.preInit(), ev(0), window.onbeforeunload = function() {
                if (null !== Ne.networkClient.websocket) return "Data will be lost if you leave the page, are you sure?"
            }
        })
    })()
})();
